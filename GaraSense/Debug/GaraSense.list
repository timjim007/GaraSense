
GaraSense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014874  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b98  08014a08  08014a08  00015a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080165a0  080165a0  00018200  2**0
                  CONTENTS
  4 .ARM          00000008  080165a0  080165a0  000175a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080165a8  080165a8  00018200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080165a8  080165a8  000175a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080165ac  080165ac  000175ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  080165b0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00018200  2**0
                  CONTENTS
 10 .bss          00008d40  20000200  20000200  00018200  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008f40  20008f40  00018200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00018200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d65d  00000000  00000000  00018230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006e1b  00000000  00000000  0004588d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002570  00000000  00000000  0004c6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c81  00000000  00000000  0004ec18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ca9a  00000000  00000000  00050899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034afc  00000000  00000000  0007d333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef012  00000000  00000000  000b1e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a0e41  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000abd0  00000000  00000000  001a0e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  001aba54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080149ec 	.word	0x080149ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	080149ec 	.word	0x080149ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <Active_ctor>:




/*--------------------------------------------------------*/
void Active_ctor(Active * const me, DispatchHandler dispatch){
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
	me->dispatch = dispatch;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	609a      	str	r2, [r3, #8]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <Active_eventLoop>:

/*--------------------------------------------------------*/
/* Thread function for all Active objects */
static void Active_eventLoop(void *argument){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	Active *me = (Active*)argument;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	61fb      	str	r3, [r7, #28]

	/*Initialise the AO*/
	static Event const initEvt = {INIT_SIG};
	me->dispatch(me, &initEvt);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	490b      	ldr	r1, [pc, #44]	@ (8000f94 <Active_eventLoop+0x40>)
 8000f66:	69f8      	ldr	r0, [r7, #28]
 8000f68:	4798      	blx	r3
	/* event loop ("message pump") */
	for(;;){
		Event e; /*event object ("message")*/

		/*wait for any event and receive it into object 'e' */
		 if (osMessageQueueGet(me->queue, &e, NULL, osWaitForever) == osOK) {
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	6858      	ldr	r0, [r3, #4]
 8000f6e:	f107 0108 	add.w	r1, r7, #8
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	2200      	movs	r2, #0
 8000f78:	f00d fdb6 	bl	800eae8 <osMessageQueueGet>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f3      	bne.n	8000f6a <Active_eventLoop+0x16>

			 /* dispatch event to the active object 'me' */
			me->dispatch(me, &e); /* NO BLOCKING */
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f107 0208 	add.w	r2, r7, #8
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	69f8      	ldr	r0, [r7, #28]
 8000f8e:	4798      	blx	r3
	for(;;){
 8000f90:	e7eb      	b.n	8000f6a <Active_eventLoop+0x16>
 8000f92:	bf00      	nop
 8000f94:	08014bd0 	.word	0x08014bd0

08000f98 <Active_start>:
	}

}

/*----------------------------------------------------------------*/
void Active_start(Active * const me, const osThreadAttr_t * threadAttr, osMessageQueueId_t  queueHandle){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
	me->queue = queueHandle;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	605a      	str	r2, [r3, #4]
	me->thread = osThreadNew(Active_eventLoop, me, threadAttr);
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	68f9      	ldr	r1, [r7, #12]
 8000fae:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <Active_start+0x2c>)
 8000fb0:	f00d fb3d 	bl	800e62e <osThreadNew>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	601a      	str	r2, [r3, #0]

}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	08000f55 	.word	0x08000f55

08000fc8 <Active_post>:

/*----------------------------------------------------------------*/
void Active_post(Active * const me, Event const * const e){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
	osStatus_t rv = osMessageQueuePut(me->queue,e ,0,0);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6858      	ldr	r0, [r3, #4]
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6839      	ldr	r1, [r7, #0]
 8000fdc:	f00d fd24 	bl	800ea28 <osMessageQueuePut>
 8000fe0:	60f8      	str	r0, [r7, #12]
	if(rv != osOK){
		//error handle
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <AO_ReportStack>:

void AO_ReportStack(Active * const me, const char *name)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
    size_t unused = osThreadGetStackSpace(me->thread);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f00d fba9 	bl	800e752 <osThreadGetStackSpace>
 8001000:	60f8      	str	r0, [r7, #12]
    sprintf(TxBuffer,"%s thread: %u bytes free\r\n", name, (unsigned)unused);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	4905      	ldr	r1, [pc, #20]	@ (800101c <AO_ReportStack+0x30>)
 8001008:	4805      	ldr	r0, [pc, #20]	@ (8001020 <AO_ReportStack+0x34>)
 800100a:	f011 fbc1 	bl	8012790 <siprintf>
    UART_Print(TxBuffer);
 800100e:	4804      	ldr	r0, [pc, #16]	@ (8001020 <AO_ReportStack+0x34>)
 8001010:	f010 fe82 	bl	8011d18 <UART_Print>
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	08014a08 	.word	0x08014a08
 8001020:	20002f94 	.word	0x20002f94

08001024 <AO_ReportQueue>:

void AO_ReportQueue(Active * const me, const char *name)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	size_t free  = osMessageQueueGetSpace(me->queue);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f00d fdb6 	bl	800eba4 <osMessageQueueGetSpace>
 8001038:	60f8      	str	r0, [r7, #12]
	sprintf(TxBuffer, "%s queue Available: %u free\r\n",
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	4905      	ldr	r1, [pc, #20]	@ (8001054 <AO_ReportQueue+0x30>)
 8001040:	4805      	ldr	r0, [pc, #20]	@ (8001058 <AO_ReportQueue+0x34>)
 8001042:	f011 fba5 	bl	8012790 <siprintf>
	        name, (unsigned)free);
	UART_Print(TxBuffer);
 8001046:	4804      	ldr	r0, [pc, #16]	@ (8001058 <AO_ReportQueue+0x34>)
 8001048:	f010 fe66 	bl	8011d18 <UART_Print>
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	08014a24 	.word	0x08014a24
 8001058:	20002f94 	.word	0x20002f94

0800105c <BrokerDispatch>:
extern Display display;
extern DistanceSensor distance;
extern EnvMonitor envmonitor;
extern DataLogger logger;

static void BrokerDispatch(Broker * const me, Event const * const e){
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]

	switch(e->dest){
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	785b      	ldrb	r3, [r3, #1]
 800106a:	2b04      	cmp	r3, #4
 800106c:	d833      	bhi.n	80010d6 <BrokerDispatch+0x7a>
 800106e:	a201      	add	r2, pc, #4	@ (adr r2, 8001074 <BrokerDispatch+0x18>)
 8001070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001074:	080010b7 	.word	0x080010b7
 8001078:	08001089 	.word	0x08001089
 800107c:	08001093 	.word	0x08001093
 8001080:	0800109d 	.word	0x0800109d
 8001084:	080010af 	.word	0x080010af
		case DIST_SENSOR:
			Active_post(&distance.super, e);
 8001088:	6839      	ldr	r1, [r7, #0]
 800108a:	4817      	ldr	r0, [pc, #92]	@ (80010e8 <BrokerDispatch+0x8c>)
 800108c:	f7ff ff9c 	bl	8000fc8 <Active_post>

			break;
 8001090:	e026      	b.n	80010e0 <BrokerDispatch+0x84>
		case  ENV_MONITOR:
			Active_post(&envmonitor.super, e);
 8001092:	6839      	ldr	r1, [r7, #0]
 8001094:	4815      	ldr	r0, [pc, #84]	@ (80010ec <BrokerDispatch+0x90>)
 8001096:	f7ff ff97 	bl	8000fc8 <Active_post>

			break;
 800109a:	e021      	b.n	80010e0 <BrokerDispatch+0x84>
		case DATA_LOGGER:
			if(me->isMount){
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7b1b      	ldrb	r3, [r3, #12]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d01a      	beq.n	80010da <BrokerDispatch+0x7e>
				Active_post(&logger.super, e);
 80010a4:	6839      	ldr	r1, [r7, #0]
 80010a6:	4812      	ldr	r0, [pc, #72]	@ (80010f0 <BrokerDispatch+0x94>)
 80010a8:	f7ff ff8e 	bl	8000fc8 <Active_post>
			}

			break;
 80010ac:	e015      	b.n	80010da <BrokerDispatch+0x7e>
		case DISPLAY:
			Active_post(&display.super, e);
 80010ae:	6839      	ldr	r1, [r7, #0]
 80010b0:	4810      	ldr	r0, [pc, #64]	@ (80010f4 <BrokerDispatch+0x98>)
 80010b2:	f7ff ff89 	bl	8000fc8 <Active_post>

		case BROKER:
			if(e->eventsig == SD_AVAILABLE){
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b12      	cmp	r3, #18
 80010bc:	d103      	bne.n	80010c6 <BrokerDispatch+0x6a>
				me->isMount = 1;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	731a      	strb	r2, [r3, #12]
			}else if (e->eventsig == SD_UNAVAILABLE){
				me->isMount = 0;
			}

			break;
 80010c4:	e00b      	b.n	80010de <BrokerDispatch+0x82>
			}else if (e->eventsig == SD_UNAVAILABLE){
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b11      	cmp	r3, #17
 80010cc:	d107      	bne.n	80010de <BrokerDispatch+0x82>
				me->isMount = 0;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	731a      	strb	r2, [r3, #12]
			break;
 80010d4:	e003      	b.n	80010de <BrokerDispatch+0x82>
		default:
			break;
 80010d6:	bf00      	nop
 80010d8:	e002      	b.n	80010e0 <BrokerDispatch+0x84>
			break;
 80010da:	bf00      	nop
 80010dc:	e000      	b.n	80010e0 <BrokerDispatch+0x84>
			break;
 80010de:	bf00      	nop
	}
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200030c0 	.word	0x200030c0
 80010ec:	200030d4 	.word	0x200030d4
 80010f0:	200030e8 	.word	0x200030e8
 80010f4:	200030a4 	.word	0x200030a4

080010f8 <Broker_Init>:

void Broker_Init(Broker * const me){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	Active_ctor(&me->super, (DispatchHandler)&BrokerDispatch);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4904      	ldr	r1, [pc, #16]	@ (8001114 <Broker_Init+0x1c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff17 	bl	8000f38 <Active_ctor>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	0800105d 	.word	0x0800105d

08001118 <displayRender>:

#include "../Inc/ao_display.h"

#include <stdio.h>

static void displayRender(Display * const me){
 8001118:	b580      	push	{r7, lr}
 800111a:	b08e      	sub	sp, #56	@ 0x38
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 8001120:	2000      	movs	r0, #0
 8001122:	f00b f921 	bl	800c368 <ssd1306_Fill>
//		ssd1306_UpdateScreen(SSD1306_1);
//		me->alert = 0;
//		return;
//	}

	 switch (me->page) {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7b1b      	ldrb	r3, [r3, #12]
 800112a:	2b06      	cmp	r3, #6
 800112c:	f200 80cb 	bhi.w	80012c6 <displayRender+0x1ae>
 8001130:	a201      	add	r2, pc, #4	@ (adr r2, 8001138 <displayRender+0x20>)
 8001132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001136:	bf00      	nop
 8001138:	08001155 	.word	0x08001155
 800113c:	08001171 	.word	0x08001171
 8001140:	080011b5 	.word	0x080011b5
 8001144:	0800121b 	.word	0x0800121b
 8001148:	0800125f 	.word	0x0800125f
 800114c:	0800129f 	.word	0x0800129f
 8001150:	080012b3 	.word	0x080012b3
	 	 case TURNED_OFF:
			 ssd1306_Fill(Black);
 8001154:	2000      	movs	r0, #0
 8001156:	f00b f907 	bl	800c368 <ssd1306_Fill>
			 ssd1306_SetCursor(0, 0);
 800115a:	2100      	movs	r1, #0
 800115c:	2000      	movs	r0, #0
 800115e:	f00b fa69 	bl	800c634 <ssd1306_SetCursor>
			 ssd1306_WriteString("Alive and well", Font_11x18, White);
 8001162:	4a5d      	ldr	r2, [pc, #372]	@ (80012d8 <displayRender+0x1c0>)
 8001164:	2301      	movs	r3, #1
 8001166:	ca06      	ldmia	r2, {r1, r2}
 8001168:	485c      	ldr	r0, [pc, #368]	@ (80012dc <displayRender+0x1c4>)
 800116a:	f00b fa3d 	bl	800c5e8 <ssd1306_WriteString>
			 break;
 800116e:	e0ab      	b.n	80012c8 <displayRender+0x1b0>

		 case DISTANCE:
			 ssd1306_SetCursor(0, 0);
 8001170:	2100      	movs	r1, #0
 8001172:	2000      	movs	r0, #0
 8001174:	f00b fa5e 	bl	800c634 <ssd1306_SetCursor>
			 ssd1306_WriteString("Distance:", Font_11x18, White);
 8001178:	4a57      	ldr	r2, [pc, #348]	@ (80012d8 <displayRender+0x1c0>)
 800117a:	2301      	movs	r3, #1
 800117c:	ca06      	ldmia	r2, {r1, r2}
 800117e:	4858      	ldr	r0, [pc, #352]	@ (80012e0 <displayRender+0x1c8>)
 8001180:	f00b fa32 	bl	800c5e8 <ssd1306_WriteString>
			 ssd1306_SetCursor(0, 20);
 8001184:	2114      	movs	r1, #20
 8001186:	2000      	movs	r0, #0
 8001188:	f00b fa54 	bl	800c634 <ssd1306_SetCursor>
			 char buf1[16];
			 sprintf(buf1, "%.1f cm", me->distance);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9d9 	bl	8000548 <__aeabi_f2d>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800119e:	4951      	ldr	r1, [pc, #324]	@ (80012e4 <displayRender+0x1cc>)
 80011a0:	f011 faf6 	bl	8012790 <siprintf>
			 ssd1306_WriteString(buf1, Font_11x18, White);
 80011a4:	4a4c      	ldr	r2, [pc, #304]	@ (80012d8 <displayRender+0x1c0>)
 80011a6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80011aa:	2301      	movs	r3, #1
 80011ac:	ca06      	ldmia	r2, {r1, r2}
 80011ae:	f00b fa1b 	bl	800c5e8 <ssd1306_WriteString>
			 break;
 80011b2:	e089      	b.n	80012c8 <displayRender+0x1b0>

		 case TEMP:
			 ssd1306_SetCursor(0, 0);
 80011b4:	2100      	movs	r1, #0
 80011b6:	2000      	movs	r0, #0
 80011b8:	f00b fa3c 	bl	800c634 <ssd1306_SetCursor>
			 ssd1306_WriteString("Temp/Hum:", Font_11x18, White);
 80011bc:	4a46      	ldr	r2, [pc, #280]	@ (80012d8 <displayRender+0x1c0>)
 80011be:	2301      	movs	r3, #1
 80011c0:	ca06      	ldmia	r2, {r1, r2}
 80011c2:	4849      	ldr	r0, [pc, #292]	@ (80012e8 <displayRender+0x1d0>)
 80011c4:	f00b fa10 	bl	800c5e8 <ssd1306_WriteString>
			 char buf2[16];
			 sprintf(buf2, "%.1d C", me->temp);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7b5b      	ldrb	r3, [r3, #13]
 80011cc:	461a      	mov	r2, r3
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	4946      	ldr	r1, [pc, #280]	@ (80012ec <displayRender+0x1d4>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f011 fadb 	bl	8012790 <siprintf>
			 ssd1306_SetCursor(0, 20);
 80011da:	2114      	movs	r1, #20
 80011dc:	2000      	movs	r0, #0
 80011de:	f00b fa29 	bl	800c634 <ssd1306_SetCursor>
			 ssd1306_WriteString(buf2, Font_11x18, White);
 80011e2:	4a3d      	ldr	r2, [pc, #244]	@ (80012d8 <displayRender+0x1c0>)
 80011e4:	f107 0018 	add.w	r0, r7, #24
 80011e8:	2301      	movs	r3, #1
 80011ea:	ca06      	ldmia	r2, {r1, r2}
 80011ec:	f00b f9fc 	bl	800c5e8 <ssd1306_WriteString>
			 sprintf(buf2, "%.1d %%", me->hum);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7b9b      	ldrb	r3, [r3, #14]
 80011f4:	461a      	mov	r2, r3
 80011f6:	f107 0318 	add.w	r3, r7, #24
 80011fa:	493d      	ldr	r1, [pc, #244]	@ (80012f0 <displayRender+0x1d8>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f011 fac7 	bl	8012790 <siprintf>
			 ssd1306_SetCursor(0, 40);
 8001202:	2128      	movs	r1, #40	@ 0x28
 8001204:	2000      	movs	r0, #0
 8001206:	f00b fa15 	bl	800c634 <ssd1306_SetCursor>
			 ssd1306_WriteString(buf2, Font_11x18, White);
 800120a:	4a33      	ldr	r2, [pc, #204]	@ (80012d8 <displayRender+0x1c0>)
 800120c:	f107 0018 	add.w	r0, r7, #24
 8001210:	2301      	movs	r3, #1
 8001212:	ca06      	ldmia	r2, {r1, r2}
 8001214:	f00b f9e8 	bl	800c5e8 <ssd1306_WriteString>
			 break;
 8001218:	e056      	b.n	80012c8 <displayRender+0x1b0>

		 case AIR:
			 ssd1306_SetCursor(0, 0);
 800121a:	2100      	movs	r1, #0
 800121c:	2000      	movs	r0, #0
 800121e:	f00b fa09 	bl	800c634 <ssd1306_SetCursor>
			 ssd1306_WriteString("CO2 Level:", Font_11x18, White);
 8001222:	4a2d      	ldr	r2, [pc, #180]	@ (80012d8 <displayRender+0x1c0>)
 8001224:	2301      	movs	r3, #1
 8001226:	ca06      	ldmia	r2, {r1, r2}
 8001228:	4832      	ldr	r0, [pc, #200]	@ (80012f4 <displayRender+0x1dc>)
 800122a:	f00b f9dd 	bl	800c5e8 <ssd1306_WriteString>
			 char buf3[16];
			 sprintf(buf3, "%4.2f ppm", me->ppm);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f988 	bl	8000548 <__aeabi_f2d>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	f107 0008 	add.w	r0, r7, #8
 8001240:	492d      	ldr	r1, [pc, #180]	@ (80012f8 <displayRender+0x1e0>)
 8001242:	f011 faa5 	bl	8012790 <siprintf>
			 ssd1306_SetCursor(0, 20);
 8001246:	2114      	movs	r1, #20
 8001248:	2000      	movs	r0, #0
 800124a:	f00b f9f3 	bl	800c634 <ssd1306_SetCursor>
			 ssd1306_WriteString(buf3, Font_11x18, White);
 800124e:	4a22      	ldr	r2, [pc, #136]	@ (80012d8 <displayRender+0x1c0>)
 8001250:	f107 0008 	add.w	r0, r7, #8
 8001254:	2301      	movs	r3, #1
 8001256:	ca06      	ldmia	r2, {r1, r2}
 8001258:	f00b f9c6 	bl	800c5e8 <ssd1306_WriteString>
			 break;
 800125c:	e034      	b.n	80012c8 <displayRender+0x1b0>

		 case UNMOUNT_PAGE:
			 ssd1306_SetCursor(0, 0);
 800125e:	2100      	movs	r1, #0
 8001260:	2000      	movs	r0, #0
 8001262:	f00b f9e7 	bl	800c634 <ssd1306_SetCursor>
			ssd1306_WriteString("Unmount SDcard?", Font_7x10, White);
 8001266:	4a25      	ldr	r2, [pc, #148]	@ (80012fc <displayRender+0x1e4>)
 8001268:	2301      	movs	r3, #1
 800126a:	ca06      	ldmia	r2, {r1, r2}
 800126c:	4824      	ldr	r0, [pc, #144]	@ (8001300 <displayRender+0x1e8>)
 800126e:	f00b f9bb 	bl	800c5e8 <ssd1306_WriteString>

			ssd1306_SetCursor(0, 20);
 8001272:	2114      	movs	r1, #20
 8001274:	2000      	movs	r0, #0
 8001276:	f00b f9dd 	bl	800c634 <ssd1306_SetCursor>
			if (me->unmountChoice == 0) {
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7e9b      	ldrb	r3, [r3, #26]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d106      	bne.n	8001290 <displayRender+0x178>
				ssd1306_WriteString("[NO]   YES", Font_7x10, White);
 8001282:	4a1e      	ldr	r2, [pc, #120]	@ (80012fc <displayRender+0x1e4>)
 8001284:	2301      	movs	r3, #1
 8001286:	ca06      	ldmia	r2, {r1, r2}
 8001288:	481e      	ldr	r0, [pc, #120]	@ (8001304 <displayRender+0x1ec>)
 800128a:	f00b f9ad 	bl	800c5e8 <ssd1306_WriteString>
			} else {
				ssd1306_WriteString(" NO   [YES]", Font_7x10, White);
			}
			break;
 800128e:	e01b      	b.n	80012c8 <displayRender+0x1b0>
				ssd1306_WriteString(" NO   [YES]", Font_7x10, White);
 8001290:	4a1a      	ldr	r2, [pc, #104]	@ (80012fc <displayRender+0x1e4>)
 8001292:	2301      	movs	r3, #1
 8001294:	ca06      	ldmia	r2, {r1, r2}
 8001296:	481c      	ldr	r0, [pc, #112]	@ (8001308 <displayRender+0x1f0>)
 8001298:	f00b f9a6 	bl	800c5e8 <ssd1306_WriteString>
			break;
 800129c:	e014      	b.n	80012c8 <displayRender+0x1b0>

		 case DONE:
			 ssd1306_SetCursor(0, 20);
 800129e:	2114      	movs	r1, #20
 80012a0:	2000      	movs	r0, #0
 80012a2:	f00b f9c7 	bl	800c634 <ssd1306_SetCursor>
			 ssd1306_WriteString("Success!", Font_11x18, White);
 80012a6:	4a0c      	ldr	r2, [pc, #48]	@ (80012d8 <displayRender+0x1c0>)
 80012a8:	2301      	movs	r3, #1
 80012aa:	ca06      	ldmia	r2, {r1, r2}
 80012ac:	4817      	ldr	r0, [pc, #92]	@ (800130c <displayRender+0x1f4>)
 80012ae:	f00b f99b 	bl	800c5e8 <ssd1306_WriteString>

		 case FAILED:
			 ssd1306_SetCursor(0, 20);
 80012b2:	2114      	movs	r1, #20
 80012b4:	2000      	movs	r0, #0
 80012b6:	f00b f9bd 	bl	800c634 <ssd1306_SetCursor>
			 ssd1306_WriteString("Failed", Font_11x18, White);
 80012ba:	4a07      	ldr	r2, [pc, #28]	@ (80012d8 <displayRender+0x1c0>)
 80012bc:	2301      	movs	r3, #1
 80012be:	ca06      	ldmia	r2, {r1, r2}
 80012c0:	4813      	ldr	r0, [pc, #76]	@ (8001310 <displayRender+0x1f8>)
 80012c2:	f00b f991 	bl	800c5e8 <ssd1306_WriteString>

		 default:
			 break;
 80012c6:	bf00      	nop

	 }

	 ssd1306_UpdateScreen(SSD1306_1);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f00b f871 	bl	800c3b0 <ssd1306_UpdateScreen>
}
 80012ce:	bf00      	nop
 80012d0:	3738      	adds	r7, #56	@ 0x38
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000014 	.word	0x20000014
 80012dc:	08014a44 	.word	0x08014a44
 80012e0:	08014a54 	.word	0x08014a54
 80012e4:	08014a60 	.word	0x08014a60
 80012e8:	08014a68 	.word	0x08014a68
 80012ec:	08014a74 	.word	0x08014a74
 80012f0:	08014a7c 	.word	0x08014a7c
 80012f4:	08014a84 	.word	0x08014a84
 80012f8:	08014a90 	.word	0x08014a90
 80012fc:	2000000c 	.word	0x2000000c
 8001300:	08014a9c 	.word	0x08014a9c
 8001304:	08014aac 	.word	0x08014aac
 8001308:	08014ab8 	.word	0x08014ab8
 800130c:	08014ac4 	.word	0x08014ac4
 8001310:	08014ad0 	.word	0x08014ad0

08001314 <DisplayDispatch>:


static void DisplayDispatch(Display * const me, Event const * const e){
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	switch(e->eventsig){
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b10      	cmp	r3, #16
 8001324:	f200 80f2 	bhi.w	800150c <DisplayDispatch+0x1f8>
 8001328:	a201      	add	r2, pc, #4	@ (adr r2, 8001330 <DisplayDispatch+0x1c>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	08001375 	.word	0x08001375
 8001334:	0800150d 	.word	0x0800150d
 8001338:	08001395 	.word	0x08001395
 800133c:	080013e9 	.word	0x080013e9
 8001340:	0800142d 	.word	0x0800142d
 8001344:	0800150d 	.word	0x0800150d
 8001348:	0800150d 	.word	0x0800150d
 800134c:	0800150d 	.word	0x0800150d
 8001350:	0800150d 	.word	0x0800150d
 8001354:	0800147d 	.word	0x0800147d
 8001358:	08001495 	.word	0x08001495
 800135c:	080014b5 	.word	0x080014b5
 8001360:	0800150d 	.word	0x0800150d
 8001364:	0800150d 	.word	0x0800150d
 8001368:	080014db 	.word	0x080014db
 800136c:	0800150d 	.word	0x0800150d
 8001370:	080014cd 	.word	0x080014cd
		case INIT_SIG:
			ssd1306_Init(SSD1306_1);
 8001374:	2000      	movs	r0, #0
 8001376:	f00a feb9 	bl	800c0ec <ssd1306_Init>
			me->page = DISTANCE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	731a      	strb	r2, [r3, #12]
			me->alert = 0;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	761a      	strb	r2, [r3, #24]
			me->unmountDone = 0;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	765a      	strb	r2, [r3, #25]

			displayRender(me);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fec3 	bl	8001118 <displayRender>
			break;
 8001392:	e0c4      	b.n	800151e <DisplayDispatch+0x20a>

		case LEFT_BUTTON_EVT:
			if(me->page == TURNED_OFF){
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7b1b      	ldrb	r3, [r3, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d103      	bne.n	80013a4 <DisplayDispatch+0x90>
				me->page = UNMOUNT_PAGE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2204      	movs	r2, #4
 80013a0:	731a      	strb	r2, [r3, #12]
 80013a2:	e01d      	b.n	80013e0 <DisplayDispatch+0xcc>
			}else if(me->page == UNMOUNT_PAGE){
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7b1b      	ldrb	r3, [r3, #12]
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d107      	bne.n	80013bc <DisplayDispatch+0xa8>
				me->unmountChoice ^= 1;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7e9b      	ldrb	r3, [r3, #26]
 80013b0:	f083 0301 	eor.w	r3, r3, #1
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	769a      	strb	r2, [r3, #26]
 80013ba:	e011      	b.n	80013e0 <DisplayDispatch+0xcc>
			}else if (me->page == DONE || me->page == FAILED) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7b1b      	ldrb	r3, [r3, #12]
 80013c0:	2b05      	cmp	r3, #5
 80013c2:	d003      	beq.n	80013cc <DisplayDispatch+0xb8>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7b1b      	ldrb	r3, [r3, #12]
 80013c8:	2b06      	cmp	r3, #6
 80013ca:	d103      	bne.n	80013d4 <DisplayDispatch+0xc0>
		        me->page = TURNED_OFF;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	731a      	strb	r2, [r3, #12]
 80013d2:	e005      	b.n	80013e0 <DisplayDispatch+0xcc>
			}
			else{
				me->page--;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7b1b      	ldrb	r3, [r3, #12]
 80013d8:	3b01      	subs	r3, #1
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	731a      	strb	r2, [r3, #12]
			}
			displayRender(me);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fe99 	bl	8001118 <displayRender>

			break;
 80013e6:	e09a      	b.n	800151e <DisplayDispatch+0x20a>
		case RIGHT_BUTTON_EVT:
			if(me->page == UNMOUNT_PAGE){
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7b1b      	ldrb	r3, [r3, #12]
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d107      	bne.n	8001400 <DisplayDispatch+0xec>
				me->unmountChoice ^= 1;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7e9b      	ldrb	r3, [r3, #26]
 80013f4:	f083 0301 	eor.w	r3, r3, #1
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	769a      	strb	r2, [r3, #26]
 80013fe:	e011      	b.n	8001424 <DisplayDispatch+0x110>

			}else  if (me->page == DONE || me->page == FAILED) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7b1b      	ldrb	r3, [r3, #12]
 8001404:	2b05      	cmp	r3, #5
 8001406:	d003      	beq.n	8001410 <DisplayDispatch+0xfc>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7b1b      	ldrb	r3, [r3, #12]
 800140c:	2b06      	cmp	r3, #6
 800140e:	d103      	bne.n	8001418 <DisplayDispatch+0x104>
		        me->page = TURNED_OFF;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	731a      	strb	r2, [r3, #12]
 8001416:	e005      	b.n	8001424 <DisplayDispatch+0x110>
			}
			else{
				me->page++;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7b1b      	ldrb	r3, [r3, #12]
 800141c:	3301      	adds	r3, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	731a      	strb	r2, [r3, #12]
			}
			displayRender(me);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fe77 	bl	8001118 <displayRender>

			break;
 800142a:	e078      	b.n	800151e <DisplayDispatch+0x20a>

		case CONFIRM_BUTTON_EVT:
			if (me->page == UNMOUNT_PAGE && me->unmountChoice == 1) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7b1b      	ldrb	r3, [r3, #12]
 8001430:	2b04      	cmp	r3, #4
 8001432:	d117      	bne.n	8001464 <DisplayDispatch+0x150>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7e9b      	ldrb	r3, [r3, #26]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d113      	bne.n	8001464 <DisplayDispatch+0x150>
				Event unmountEvt = {
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	230d      	movs	r3, #13
 800144e:	733b      	strb	r3, [r7, #12]
 8001450:	2303      	movs	r3, #3
 8001452:	737b      	strb	r3, [r7, #13]
					.eventsig = UNMOUNT_REQ,
					.dest = DATA_LOGGER
				};

				Active_post(&broker.super, &unmountEvt);
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	4619      	mov	r1, r3
 800145a:	4833      	ldr	r0, [pc, #204]	@ (8001528 <DisplayDispatch+0x214>)
 800145c:	f7ff fdb4 	bl	8000fc8 <Active_post>
			if (me->page == UNMOUNT_PAGE && me->unmountChoice == 1) {
 8001460:	bf00      	nop
				//TODO:Post event to broker

			}else if(me->page == UNMOUNT_PAGE && me->unmountChoice == 0){
				me->page = DISTANCE;
			}
			break;
 8001462:	e055      	b.n	8001510 <DisplayDispatch+0x1fc>
			}else if(me->page == UNMOUNT_PAGE && me->unmountChoice == 0){
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7b1b      	ldrb	r3, [r3, #12]
 8001468:	2b04      	cmp	r3, #4
 800146a:	d151      	bne.n	8001510 <DisplayDispatch+0x1fc>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7e9b      	ldrb	r3, [r3, #26]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d14d      	bne.n	8001510 <DisplayDispatch+0x1fc>
				me->page = DISTANCE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	731a      	strb	r2, [r3, #12]
			break;
 800147a:	e049      	b.n	8001510 <DisplayDispatch+0x1fc>

		case DIST_UPDATED:
			if(me->page == DISTANCE){
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7b1b      	ldrb	r3, [r3, #12]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d147      	bne.n	8001514 <DisplayDispatch+0x200>
				me->distance = e->payload.distance;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	615a      	str	r2, [r3, #20]
				displayRender(me);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fe43 	bl	8001118 <displayRender>
			}

			break;
 8001492:	e03f      	b.n	8001514 <DisplayDispatch+0x200>

		case TEMP_UPDATED:
			if(me->page == TEMP){
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7b1b      	ldrb	r3, [r3, #12]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d13d      	bne.n	8001518 <DisplayDispatch+0x204>
				me->temp = e->payload.temp;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	7a1a      	ldrb	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	735a      	strb	r2, [r3, #13]
				me->hum = e->payload.hum;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	7a5a      	ldrb	r2, [r3, #9]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	739a      	strb	r2, [r3, #14]
				displayRender(me);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fe33 	bl	8001118 <displayRender>
			}

			break;
 80014b2:	e031      	b.n	8001518 <DisplayDispatch+0x204>

		case PPM_UPDATED:
			me->ppm = e->payload.ppm;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	611a      	str	r2, [r3, #16]
			if(me->page == AIR){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7b1b      	ldrb	r3, [r3, #12]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d12b      	bne.n	800151c <DisplayDispatch+0x208>
				displayRender(me);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fe27 	bl	8001118 <displayRender>
			}
			break;
 80014ca:	e027      	b.n	800151c <DisplayDispatch+0x208>

		case ALERT_EVT:
			me->alert = 1;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	761a      	strb	r2, [r3, #24]

			displayRender(me);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fe20 	bl	8001118 <displayRender>

			break;
 80014d8:	e021      	b.n	800151e <DisplayDispatch+0x20a>
		case UNMOUNT_UPDATED:

			me->unmountDone = (e->payload.isUnmount) ? 1 : 0;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	7c1b      	ldrb	r3, [r3, #16]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf14      	ite	ne
 80014e2:	2301      	movne	r3, #1
 80014e4:	2300      	moveq	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	765a      	strb	r2, [r3, #25]

			if(me->unmountDone){
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7e5b      	ldrb	r3, [r3, #25]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <DisplayDispatch+0x1ea>
				me->page = DONE;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2205      	movs	r2, #5
 80014fa:	731a      	strb	r2, [r3, #12]
 80014fc:	e002      	b.n	8001504 <DisplayDispatch+0x1f0>
			}else{
				me->page = FAILED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2206      	movs	r2, #6
 8001502:	731a      	strb	r2, [r3, #12]
			}
			displayRender(me);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fe07 	bl	8001118 <displayRender>

			break;
 800150a:	e008      	b.n	800151e <DisplayDispatch+0x20a>
		default:
			break;
 800150c:	bf00      	nop
 800150e:	e006      	b.n	800151e <DisplayDispatch+0x20a>
			break;
 8001510:	bf00      	nop
 8001512:	e004      	b.n	800151e <DisplayDispatch+0x20a>
			break;
 8001514:	bf00      	nop
 8001516:	e002      	b.n	800151e <DisplayDispatch+0x20a>
			break;
 8001518:	bf00      	nop
 800151a:	e000      	b.n	800151e <DisplayDispatch+0x20a>
			break;
 800151c:	bf00      	nop
	}
}
 800151e:	bf00      	nop
 8001520:	3720      	adds	r7, #32
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20003094 	.word	0x20003094

0800152c <Display_Init>:

void Display_Init(Display * const me){
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	Active_ctor(&me->super, (DispatchHandler)&DisplayDispatch);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4904      	ldr	r1, [pc, #16]	@ (8001548 <Display_Init+0x1c>)
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fcfd 	bl	8000f38 <Active_ctor>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	08001315 	.word	0x08001315

0800154c <lightHelper>:
 */


#include "../Inc/ao_distance.h"

static void lightHelper(LedState state){
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	switch(state){
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d82f      	bhi.n	80015bc <lightHelper+0x70>
 800155c:	a201      	add	r2, pc, #4	@ (adr r2, 8001564 <lightHelper+0x18>)
 800155e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001562:	bf00      	nop
 8001564:	08001575 	.word	0x08001575
 8001568:	08001587 	.word	0x08001587
 800156c:	08001599 	.word	0x08001599
 8001570:	080015ab 	.word	0x080015ab
		case OFF:
			ws2812B_SetColor(0,0,0);
 8001574:	2200      	movs	r2, #0
 8001576:	2100      	movs	r1, #0
 8001578:	2000      	movs	r0, #0
 800157a:	f00a fcfd 	bl	800bf78 <ws2812B_SetColor>
			ws2812B_Show(&htim1);
 800157e:	4812      	ldr	r0, [pc, #72]	@ (80015c8 <lightHelper+0x7c>)
 8001580:	f00a fd2c 	bl	800bfdc <ws2812B_Show>
			break;
 8001584:	e01b      	b.n	80015be <lightHelper+0x72>
		case RED:
			ws2812B_SetColor(255,0,0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	20ff      	movs	r0, #255	@ 0xff
 800158c:	f00a fcf4 	bl	800bf78 <ws2812B_SetColor>
			ws2812B_Show(&htim1);
 8001590:	480d      	ldr	r0, [pc, #52]	@ (80015c8 <lightHelper+0x7c>)
 8001592:	f00a fd23 	bl	800bfdc <ws2812B_Show>
			break;
 8001596:	e012      	b.n	80015be <lightHelper+0x72>
		case YELLOW:
			ws2812B_SetColor(255,255,0);
 8001598:	2200      	movs	r2, #0
 800159a:	21ff      	movs	r1, #255	@ 0xff
 800159c:	20ff      	movs	r0, #255	@ 0xff
 800159e:	f00a fceb 	bl	800bf78 <ws2812B_SetColor>
			ws2812B_Show(&htim1);
 80015a2:	4809      	ldr	r0, [pc, #36]	@ (80015c8 <lightHelper+0x7c>)
 80015a4:	f00a fd1a 	bl	800bfdc <ws2812B_Show>
			break;
 80015a8:	e009      	b.n	80015be <lightHelper+0x72>
		case GREEN:
			ws2812B_SetColor(0,255,0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	21ff      	movs	r1, #255	@ 0xff
 80015ae:	2000      	movs	r0, #0
 80015b0:	f00a fce2 	bl	800bf78 <ws2812B_SetColor>
			ws2812B_Show(&htim1);
 80015b4:	4804      	ldr	r0, [pc, #16]	@ (80015c8 <lightHelper+0x7c>)
 80015b6:	f00a fd11 	bl	800bfdc <ws2812B_Show>
			break;
 80015ba:	e000      	b.n	80015be <lightHelper+0x72>
		default:
			break;
 80015bc:	bf00      	nop
	}
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000370 	.word	0x20000370

080015cc <DistanceSensorDispatch>:

static void DistanceSensorDispatch(DistanceSensor * const me, Event const * const e){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08c      	sub	sp, #48	@ 0x30
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
	switch(e->eventsig){
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b06      	cmp	r3, #6
 80015dc:	f200 8083 	bhi.w	80016e6 <DistanceSensorDispatch+0x11a>
 80015e0:	a201      	add	r2, pc, #4	@ (adr r2, 80015e8 <DistanceSensorDispatch+0x1c>)
 80015e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e6:	bf00      	nop
 80015e8:	08001605 	.word	0x08001605
 80015ec:	080016a5 	.word	0x080016a5
 80015f0:	080016e7 	.word	0x080016e7
 80015f4:	080016e7 	.word	0x080016e7
 80015f8:	080016e7 	.word	0x080016e7
 80015fc:	0800161f 	.word	0x0800161f
 8001600:	08001679 	.word	0x08001679
		case INIT_SIG:
			HCSR04_Init(HCSR04_SENSOR1,&htim2);
 8001604:	493a      	ldr	r1, [pc, #232]	@ (80016f0 <DistanceSensorDispatch+0x124>)
 8001606:	2000      	movs	r0, #0
 8001608:	f009 ff5c 	bl	800b4c4 <HCSR04_Init>
			me->Light = OFF;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	741a      	strb	r2, [r3, #16]
			lightHelper(me->Light);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7c1b      	ldrb	r3, [r3, #16]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff98 	bl	800154c <lightHelper>
			break;
 800161c:	e064      	b.n	80016e8 <DistanceSensorDispatch+0x11c>

		case UPDATE_LED:
			me->Distance = HCSR04_Read(HCSR04_SENSOR1);
 800161e:	2000      	movs	r0, #0
 8001620:	f00a fbbe 	bl	800bda0 <HCSR04_Read>
 8001624:	eef0 7a40 	vmov.f32	s15, s0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	edc3 7a03 	vstr	s15, [r3, #12]

			//Update LED state
			if(me->Distance < STOP_THRESHOLD){
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	edd3 7a03 	vldr	s15, [r3, #12]
 8001634:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	d503      	bpl.n	800164a <DistanceSensorDispatch+0x7e>
				me->Light = RED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	741a      	strb	r2, [r3, #16]
 8001648:	e010      	b.n	800166c <DistanceSensorDispatch+0xa0>
			}else if(me->Distance < WARNING_THRESHOLD){
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001650:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165c:	d503      	bpl.n	8001666 <DistanceSensorDispatch+0x9a>
				me->Light = YELLOW;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2202      	movs	r2, #2
 8001662:	741a      	strb	r2, [r3, #16]
 8001664:	e002      	b.n	800166c <DistanceSensorDispatch+0xa0>
			}else{
				me->Light = GREEN;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2203      	movs	r2, #3
 800166a:	741a      	strb	r2, [r3, #16]
			}

			lightHelper(me->Light);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7c1b      	ldrb	r3, [r3, #16]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff6b 	bl	800154c <lightHelper>

			break;
 8001676:	e037      	b.n	80016e8 <DistanceSensorDispatch+0x11c>
		case DIST_REQ:
			Event dispEvt = {
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
 8001688:	2309      	movs	r3, #9
 800168a:	773b      	strb	r3, [r7, #28]
 800168c:	2304      	movs	r3, #4
 800168e:	777b      	strb	r3, [r7, #29]
					.eventsig = DIST_UPDATED,
					.dest = DISPLAY,
					.payload.distance = me->Distance
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
			Event dispEvt = {
 8001694:	623b      	str	r3, [r7, #32]
			};

			Active_post(&broker.super, &dispEvt);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	4815      	ldr	r0, [pc, #84]	@ (80016f4 <DistanceSensorDispatch+0x128>)
 800169e:	f7ff fc93 	bl	8000fc8 <Active_post>
			//TODO: post to broker with destination display

			break;
 80016a2:	e021      	b.n	80016e8 <DistanceSensorDispatch+0x11c>
		case SENSOR_TIMER:

			if(me->Distance < STOP_THRESHOLD){
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80016aa:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80016ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	d400      	bmi.n	80016ba <DistanceSensorDispatch+0xee>

			//TODO: Post to sd card
				Active_post(&broker.super, &logEvt);
			}

			break;
 80016b8:	e016      	b.n	80016e8 <DistanceSensorDispatch+0x11c>
				 Event logEvt = {
 80016ba:	f107 0308 	add.w	r3, r7, #8
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	230c      	movs	r3, #12
 80016cc:	723b      	strb	r3, [r7, #8]
 80016ce:	2303      	movs	r3, #3
 80016d0:	727b      	strb	r3, [r7, #9]
					.payload.distance = me->Distance
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
				 Event logEvt = {
 80016d6:	60fb      	str	r3, [r7, #12]
				Active_post(&broker.super, &logEvt);
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	4619      	mov	r1, r3
 80016de:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <DistanceSensorDispatch+0x128>)
 80016e0:	f7ff fc72 	bl	8000fc8 <Active_post>
			break;
 80016e4:	e000      	b.n	80016e8 <DistanceSensorDispatch+0x11c>
		default:
			break;
 80016e6:	bf00      	nop
	}
}
 80016e8:	bf00      	nop
 80016ea:	3730      	adds	r7, #48	@ 0x30
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200003b8 	.word	0x200003b8
 80016f4:	20003094 	.word	0x20003094

080016f8 <DistanceSensor_Init>:

void DistanceSensor_Init(DistanceSensor * const me){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	Active_ctor(&me->super, (DispatchHandler)&DistanceSensorDispatch);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4904      	ldr	r1, [pc, #16]	@ (8001714 <DistanceSensor_Init+0x1c>)
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fc17 	bl	8000f38 <Active_ctor>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	080015cd 	.word	0x080015cd

08001718 <EnvMonitorDispatch>:
 */


#include "../Inc/ao_env.h"

static void EnvMonitorDispatch(EnvMonitor * const me, Event const * const e){
 8001718:	b580      	push	{r7, lr}
 800171a:	b09c      	sub	sp, #112	@ 0x70
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
	uint8_t rv;
	switch(e->eventsig){
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b08      	cmp	r3, #8
 8001728:	f200 80e9 	bhi.w	80018fe <EnvMonitorDispatch+0x1e6>
 800172c:	a201      	add	r2, pc, #4	@ (adr r2, 8001734 <EnvMonitorDispatch+0x1c>)
 800172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001732:	bf00      	nop
 8001734:	08001759 	.word	0x08001759
 8001738:	08001837 	.word	0x08001837
 800173c:	080018ff 	.word	0x080018ff
 8001740:	080018ff 	.word	0x080018ff
 8001744:	080018ff 	.word	0x080018ff
 8001748:	080018ff 	.word	0x080018ff
 800174c:	080018ff 	.word	0x080018ff
 8001750:	08001761 	.word	0x08001761
 8001754:	080017bd 	.word	0x080017bd
		case INIT_SIG:
			MQ135_Init(MQ135_1);
 8001758:	2000      	movs	r0, #0
 800175a:	f00a fb73 	bl	800be44 <MQ135_Init>
			break;
 800175e:	e0d1      	b.n	8001904 <EnvMonitorDispatch+0x1ec>

		case TEMP_REQ:
			rv = dht11_Read(DHT11_1,&me->temp,&me->hum);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f103 010c 	add.w	r1, r3, #12
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	330d      	adds	r3, #13
 800176a:	461a      	mov	r2, r3
 800176c:	2000      	movs	r0, #0
 800176e:	f009 fdc7 	bl	800b300 <dht11_Read>
 8001772:	4603      	mov	r3, r0
 8001774:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

			if(rv != DHT11_OK){
 8001778:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800177c:	2b00      	cmp	r3, #0
 800177e:	f040 80c0 	bne.w	8001902 <EnvMonitorDispatch+0x1ea>
				break;
			}

			Event dispEvt = {
 8001782:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]
 8001792:	230a      	movs	r3, #10
 8001794:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
 8001798:	2304      	movs	r3, #4
 800179a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
					.eventsig = TEMP_UPDATED,
					.dest = DISPLAY,
					.payload.temp = me->temp,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7b1b      	ldrb	r3, [r3, #12]
			Event dispEvt = {
 80017a2:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
					.payload.hum = me->hum
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7b5b      	ldrb	r3, [r3, #13]
			Event dispEvt = {
 80017aa:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
			};

			Active_post(&broker.super, &dispEvt);
 80017ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80017b2:	4619      	mov	r1, r3
 80017b4:	4855      	ldr	r0, [pc, #340]	@ (800190c <EnvMonitorDispatch+0x1f4>)
 80017b6:	f7ff fc07 	bl	8000fc8 <Active_post>
			//TODO: Post event to broker

			break;
 80017ba:	e0a3      	b.n	8001904 <EnvMonitorDispatch+0x1ec>
		case PPM_REQ:
			MQ135_StartMeasurement(0);
 80017bc:	2000      	movs	r0, #0
 80017be:	f00a fb59 	bl	800be74 <MQ135_StartMeasurement>
			me->ppm = MQ135_GetPPM();
 80017c2:	f00a fb97 	bl	800bef4 <MQ135_GetPPM>
 80017c6:	eef0 7a40 	vmov.f32	s15, s0
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	edc3 7a04 	vstr	s15, [r3, #16]

			if(MQ135_IsSmokeDetected()){
 80017d0:	f00a fbbe 	bl	800bf50 <MQ135_IsSmokeDetected>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d017      	beq.n	800180a <EnvMonitorDispatch+0xf2>

				Event alertEvt = {
 80017da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	2310      	movs	r3, #16
 80017ec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80017f0:	2304      	movs	r3, #4
 80017f2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
					.eventsig = ALERT_EVT,
					.dest = DISPLAY,
					.payload.ppm = me->ppm
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
				Event alertEvt = {
 80017fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
				};

				Active_post(&broker.super, &alertEvt);
 80017fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001800:	4619      	mov	r1, r3
 8001802:	4842      	ldr	r0, [pc, #264]	@ (800190c <EnvMonitorDispatch+0x1f4>)
 8001804:	f7ff fbe0 	bl	8000fc8 <Active_post>

				Active_post(&broker.super, &ppmEvt);
				//TODO: Post the ppm value to broker with dst display
			}

			break;
 8001808:	e07c      	b.n	8001904 <EnvMonitorDispatch+0x1ec>
				Event ppmEvt = {
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
 8001818:	611a      	str	r2, [r3, #16]
 800181a:	230b      	movs	r3, #11
 800181c:	773b      	strb	r3, [r7, #28]
 800181e:	2304      	movs	r3, #4
 8001820:	777b      	strb	r3, [r7, #29]
					.payload.ppm = me->ppm
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
				Event ppmEvt = {
 8001826:	62bb      	str	r3, [r7, #40]	@ 0x28
				Active_post(&broker.super, &ppmEvt);
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	4619      	mov	r1, r3
 800182e:	4837      	ldr	r0, [pc, #220]	@ (800190c <EnvMonitorDispatch+0x1f4>)
 8001830:	f7ff fbca 	bl	8000fc8 <Active_post>
			break;
 8001834:	e066      	b.n	8001904 <EnvMonitorDispatch+0x1ec>
		case SENSOR_TIMER:
			rv = dht11_Read(DHT11_1,&me->temp,&me->hum);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f103 010c 	add.w	r1, r3, #12
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	330d      	adds	r3, #13
 8001840:	461a      	mov	r2, r3
 8001842:	2000      	movs	r0, #0
 8001844:	f009 fd5c 	bl	800b300 <dht11_Read>
 8001848:	4603      	mov	r3, r0
 800184a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

			if(rv){
 800184e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <EnvMonitorDispatch+0x14a>
				me->temp = -99;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	229d      	movs	r2, #157	@ 0x9d
 800185a:	731a      	strb	r2, [r3, #12]
				me->hum = -1;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	22ff      	movs	r2, #255	@ 0xff
 8001860:	735a      	strb	r2, [r3, #13]
			}

			MQ135_StartMeasurement(0);
 8001862:	2000      	movs	r0, #0
 8001864:	f00a fb06 	bl	800be74 <MQ135_StartMeasurement>
			me->ppm = MQ135_GetPPM();
 8001868:	f00a fb44 	bl	800bef4 <MQ135_GetPPM>
 800186c:	eef0 7a40 	vmov.f32	s15, s0
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	edc3 7a04 	vstr	s15, [r3, #16]

			if(MQ135_IsSmokeDetected() || me->temp > TEMP_MAX || me->temp < TEMP_MIN){
 8001876:	f00a fb6b 	bl	800bf50 <MQ135_IsSmokeDetected>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d103      	bne.n	8001888 <EnvMonitorDispatch+0x170>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7b1b      	ldrb	r3, [r3, #12]
 8001884:	2b64      	cmp	r3, #100	@ 0x64
 8001886:	d91a      	bls.n	80018be <EnvMonitorDispatch+0x1a6>
				 Event alertEvt = {
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
 8001898:	2310      	movs	r3, #16
 800189a:	723b      	strb	r3, [r7, #8]
 800189c:	2303      	movs	r3, #3
 800189e:	727b      	strb	r3, [r7, #9]
					.eventsig = ALERT_EVT,
					.dest = DATA_LOGGER,
					.payload.temp = me->temp,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7b1b      	ldrb	r3, [r3, #12]
				 Event alertEvt = {
 80018a4:	743b      	strb	r3, [r7, #16]
					.payload.hum = me->hum,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7b5b      	ldrb	r3, [r3, #13]
				 Event alertEvt = {
 80018aa:	747b      	strb	r3, [r7, #17]
					.payload.ppm = me->ppm
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
				 Event alertEvt = {
 80018b0:	617b      	str	r3, [r7, #20]
				};
				 Active_post(&broker.super, &alertEvt);
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	4619      	mov	r1, r3
 80018b8:	4814      	ldr	r0, [pc, #80]	@ (800190c <EnvMonitorDispatch+0x1f4>)
 80018ba:	f7ff fb85 	bl	8000fc8 <Active_post>
				//TODO: Post an alert event with values to broker with dest sdcard
			}

			// Always log normal values
			Event logEvt = {
 80018be:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]
 80018ce:	230c      	movs	r3, #12
 80018d0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80018d4:	2303      	movs	r3, #3
 80018d6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
				.eventsig = LOG_DATA,
				.dest = DATA_LOGGER,
				.payload.temp = me->temp,
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7b1b      	ldrb	r3, [r3, #12]
			Event logEvt = {
 80018de:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
				.payload.hum = me->hum,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7b5b      	ldrb	r3, [r3, #13]
			Event logEvt = {
 80018e6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
				.payload.ppm = me->ppm
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
			Event logEvt = {
 80018ee:	653b      	str	r3, [r7, #80]	@ 0x50
			};
			Active_post(&broker.super, &logEvt);
 80018f0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80018f4:	4619      	mov	r1, r3
 80018f6:	4805      	ldr	r0, [pc, #20]	@ (800190c <EnvMonitorDispatch+0x1f4>)
 80018f8:	f7ff fb66 	bl	8000fc8 <Active_post>
			//TODO: Post an event with values to broker with dest sdcard

			break;
 80018fc:	e002      	b.n	8001904 <EnvMonitorDispatch+0x1ec>
		default:
			break;
 80018fe:	bf00      	nop
 8001900:	e000      	b.n	8001904 <EnvMonitorDispatch+0x1ec>
				break;
 8001902:	bf00      	nop
	}
}
 8001904:	bf00      	nop
 8001906:	3770      	adds	r7, #112	@ 0x70
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20003094 	.word	0x20003094

08001910 <EnvMonitor_Init>:

void EnvMonitor_Init(EnvMonitor * const me){
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	Active_ctor(&me->super, (DispatchHandler)&EnvMonitorDispatch);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4904      	ldr	r1, [pc, #16]	@ (800192c <EnvMonitor_Init+0x1c>)
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fb0b 	bl	8000f38 <Active_ctor>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	08001719 	.word	0x08001719

08001930 <HAL_UART_TxCpltCallback>:
DistanceSensor distance;
EnvMonitor envmonitor;
DataLogger logger;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a05      	ldr	r2, [pc, #20]	@ (8001954 <HAL_UART_TxCpltCallback+0x24>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d102      	bne.n	8001948 <HAL_UART_TxCpltCallback+0x18>
    {
    	tx_busy = 0;
 8001942:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_UART_TxCpltCallback+0x28>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
    }
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	40004800 	.word	0x40004800
 8001958:	2000308e 	.word	0x2000308e

0800195c <HAL_GPIO_EXTI_Callback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
	HAL_SPI_DMAStop(hspi);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	80fb      	strh	r3, [r7, #6]
	uint32_t now = osKernelGetTickCount();
 8001966:	f00c fe4d 	bl	800e604 <osKernelGetTickCount>
 800196a:	61f8      	str	r0, [r7, #28]


	if((now - last_press_ms) >= DEBOUNCE_MS){
 800196c:	4b24      	ldr	r3, [pc, #144]	@ (8001a00 <HAL_GPIO_EXTI_Callback+0xa4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b13      	cmp	r3, #19
 8001976:	d940      	bls.n	80019fa <HAL_GPIO_EXTI_Callback+0x9e>
		last_press_ms = now;
 8001978:	4a21      	ldr	r2, [pc, #132]	@ (8001a00 <HAL_GPIO_EXTI_Callback+0xa4>)
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	6013      	str	r3, [r2, #0]
		Event buttonEvt;
		switch(GPIO_Pin){
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	2b08      	cmp	r3, #8
 8001982:	d013      	beq.n	80019ac <HAL_GPIO_EXTI_Callback+0x50>
 8001984:	2b08      	cmp	r3, #8
 8001986:	dc37      	bgt.n	80019f8 <HAL_GPIO_EXTI_Callback+0x9c>
 8001988:	2b02      	cmp	r3, #2
 800198a:	d002      	beq.n	8001992 <HAL_GPIO_EXTI_Callback+0x36>
 800198c:	2b04      	cmp	r3, #4
 800198e:	d01a      	beq.n	80019c6 <HAL_GPIO_EXTI_Callback+0x6a>
					buttonEvt.eventsig = CONFIRM_BUTTON_EVT;
					buttonEvt.dest     = DISPLAY;
				}
				break;
			default:
				return;
 8001990:	e032      	b.n	80019f8 <HAL_GPIO_EXTI_Callback+0x9c>
				if (HAL_GPIO_ReadPin(GPIOD, GPIO_Pin) == GPIO_PIN_RESET) {
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	4619      	mov	r1, r3
 8001996:	481b      	ldr	r0, [pc, #108]	@ (8001a04 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001998:	f002 fe52 	bl	8004640 <HAL_GPIO_ReadPin>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d11e      	bne.n	80019e0 <HAL_GPIO_EXTI_Callback+0x84>
					buttonEvt.eventsig = RIGHT_BUTTON_EVT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	723b      	strb	r3, [r7, #8]
					buttonEvt.dest = DISPLAY;
 80019a6:	2304      	movs	r3, #4
 80019a8:	727b      	strb	r3, [r7, #9]
				break;
 80019aa:	e019      	b.n	80019e0 <HAL_GPIO_EXTI_Callback+0x84>
				if (HAL_GPIO_ReadPin(GPIOD, GPIO_Pin) == GPIO_PIN_RESET) {
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	4619      	mov	r1, r3
 80019b0:	4814      	ldr	r0, [pc, #80]	@ (8001a04 <HAL_GPIO_EXTI_Callback+0xa8>)
 80019b2:	f002 fe45 	bl	8004640 <HAL_GPIO_ReadPin>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d113      	bne.n	80019e4 <HAL_GPIO_EXTI_Callback+0x88>
					buttonEvt.eventsig = LEFT_BUTTON_EVT;
 80019bc:	2302      	movs	r3, #2
 80019be:	723b      	strb	r3, [r7, #8]
					buttonEvt.dest     = DISPLAY;
 80019c0:	2304      	movs	r3, #4
 80019c2:	727b      	strb	r3, [r7, #9]
				break;
 80019c4:	e00e      	b.n	80019e4 <HAL_GPIO_EXTI_Callback+0x88>
				if (HAL_GPIO_ReadPin(GPIOD, GPIO_Pin) == GPIO_PIN_RESET) {
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	4619      	mov	r1, r3
 80019ca:	480e      	ldr	r0, [pc, #56]	@ (8001a04 <HAL_GPIO_EXTI_Callback+0xa8>)
 80019cc:	f002 fe38 	bl	8004640 <HAL_GPIO_ReadPin>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d108      	bne.n	80019e8 <HAL_GPIO_EXTI_Callback+0x8c>
					buttonEvt.eventsig = CONFIRM_BUTTON_EVT;
 80019d6:	2304      	movs	r3, #4
 80019d8:	723b      	strb	r3, [r7, #8]
					buttonEvt.dest     = DISPLAY;
 80019da:	2304      	movs	r3, #4
 80019dc:	727b      	strb	r3, [r7, #9]
				break;
 80019de:	e003      	b.n	80019e8 <HAL_GPIO_EXTI_Callback+0x8c>
				break;
 80019e0:	bf00      	nop
 80019e2:	e002      	b.n	80019ea <HAL_GPIO_EXTI_Callback+0x8e>
				break;
 80019e4:	bf00      	nop
 80019e6:	e000      	b.n	80019ea <HAL_GPIO_EXTI_Callback+0x8e>
				break;
 80019e8:	bf00      	nop
		}
		Active_post(&broker.super, &buttonEvt);
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <HAL_GPIO_EXTI_Callback+0xac>)
 80019f2:	f7ff fae9 	bl	8000fc8 <Active_post>
 80019f6:	e000      	b.n	80019fa <HAL_GPIO_EXTI_Callback+0x9e>
				return;
 80019f8:	bf00      	nop
	}

}
 80019fa:	3720      	adds	r7, #32
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20003090 	.word	0x20003090
 8001a04:	40020c00 	.word	0x40020c00
 8001a08:	20003094 	.word	0x20003094

08001a0c <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a1c:	d114      	bne.n	8001a48 <HAL_TIM_IC_CaptureCallback+0x3c>
      HCSR04_TMR_IC_ISR(htim);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f009 ff76 	bl	800b910 <HCSR04_TMR_IC_ISR>
      Event distEvt = {.eventsig = UPDATE_LED, .dest = DIST_SENSOR};
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
 8001a34:	2305      	movs	r3, #5
 8001a36:	733b      	strb	r3, [r7, #12]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	737b      	strb	r3, [r7, #13]
      Active_post(&broker.super, &distEvt);
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	4619      	mov	r1, r3
 8001a42:	4803      	ldr	r0, [pc, #12]	@ (8001a50 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001a44:	f7ff fac0 	bl	8000fc8 <Active_post>
	 }
  }
 8001a48:	bf00      	nop
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20003094 	.word	0x20003094

08001a54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	 if (htim->Instance == TIM2) {
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a64:	d103      	bne.n	8001a6e <HAL_TIM_PeriodElapsedCallback+0x1a>
	        HCSR04_TMR_OVF_ISR(htim);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f009 ff16 	bl	800b898 <HCSR04_TMR_OVF_ISR>
	} else if (htim->Instance == TIM3) {
		HCSR04_Trigger(HCSR04_SENSOR1);
	}

}
 8001a6c:	e007      	b.n	8001a7e <HAL_TIM_PeriodElapsedCallback+0x2a>
	} else if (htim->Instance == TIM3) {
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a05      	ldr	r2, [pc, #20]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d102      	bne.n	8001a7e <HAL_TIM_PeriodElapsedCallback+0x2a>
		HCSR04_Trigger(HCSR04_SENSOR1);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f00a f9ab 	bl	800bdd4 <HCSR04_Trigger>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40000400 	.word	0x40000400

08001a8c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a05      	ldr	r2, [pc, #20]	@ (8001ab0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d103      	bne.n	8001aa6 <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
        HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f005 fedb 	bl	800785c <HAL_TIM_PWM_Stop_DMA>
    }
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40010000 	.word	0x40010000

08001ab4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a05      	ldr	r2, [pc, #20]	@ (8001ad8 <HAL_ADC_ConvCpltCallback+0x24>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d104      	bne.n	8001ad0 <HAL_ADC_ConvCpltCallback+0x1c>
	    {
		 MQ135_AverageRaw();
 8001ac6:	f00a f9ed 	bl	800bea4 <MQ135_AverageRaw>

	        // Stop DMA after one block
	        HAL_ADC_Stop_DMA(hadc);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f001 fbf4 	bl	80032b8 <HAL_ADC_Stop_DMA>
	    }
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40012000 	.word	0x40012000

08001adc <readEnvTimerCallback>:
//	Active_post(&broker.super, &e);
//}

/* readEnvTimerCallback function */
void readEnvTimerCallback(void *argument)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	@ 0x30
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

	Event tempEvt = {.eventsig = TEMP_REQ, .dest = ENV_MONITOR};
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
 8001af4:	2307      	movs	r3, #7
 8001af6:	773b      	strb	r3, [r7, #28]
 8001af8:	2302      	movs	r3, #2
 8001afa:	777b      	strb	r3, [r7, #29]
	Active_post(&broker.super, &tempEvt);
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	480c      	ldr	r0, [pc, #48]	@ (8001b34 <readEnvTimerCallback+0x58>)
 8001b04:	f7ff fa60 	bl	8000fc8 <Active_post>
	Event ppmEvt = {.eventsig = PPM_REQ, .dest = ENV_MONITOR};
 8001b08:	f107 0308 	add.w	r3, r7, #8
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
 8001b18:	2308      	movs	r3, #8
 8001b1a:	723b      	strb	r3, [r7, #8]
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	727b      	strb	r3, [r7, #9]
	Active_post(&broker.super, &ppmEvt);
 8001b20:	f107 0308 	add.w	r3, r7, #8
 8001b24:	4619      	mov	r1, r3
 8001b26:	4803      	ldr	r0, [pc, #12]	@ (8001b34 <readEnvTimerCallback+0x58>)
 8001b28:	f7ff fa4e 	bl	8000fc8 <Active_post>

}
 8001b2c:	bf00      	nop
 8001b2e:	3730      	adds	r7, #48	@ 0x30
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20003094 	.word	0x20003094

08001b38 <updateDisplayTimerCallback>:

/* updateDisplayTimerCallback function */
void updateDisplayTimerCallback(void *argument)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	Event distEvt = {.eventsig = DIST_REQ, .dest = DIST_SENSOR};
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
 8001b50:	2306      	movs	r3, #6
 8001b52:	733b      	strb	r3, [r7, #12]
 8001b54:	2301      	movs	r3, #1
 8001b56:	737b      	strb	r3, [r7, #13]
	Active_post(&broker.super, &distEvt);
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4803      	ldr	r0, [pc, #12]	@ (8001b6c <updateDisplayTimerCallback+0x34>)
 8001b60:	f7ff fa32 	bl	8000fc8 <Active_post>
}
 8001b64:	bf00      	nop
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20003094 	.word	0x20003094

08001b70 <App_TimerInit>:

static void App_TimerInit(osTimerId_t timerHandle,uint32_t ticks){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
	osTimerStart(timerHandle,ticks);
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f00c feb1 	bl	800e8e4 <osTimerStart>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b90:	f001 f9c8 	bl	8002f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b94:	f000 f8c2 	bl	8001d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b98:	f000 fbb2 	bl	8002300 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b9c:	f000 fb72 	bl	8002284 <MX_DMA_Init>
  MX_ADC1_Init();
 8001ba0:	f000 f926 	bl	8001df0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ba4:	f000 f976 	bl	8001e94 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001ba8:	f000 fb42 	bl	8002230 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001bac:	f000 f9d6 	bl	8001f5c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001bb0:	f000 fa56 	bl	8002060 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001bb4:	f000 f99c 	bl	8001ef0 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001bb8:	f00a fd54 	bl	800c664 <MX_FATFS_Init>
  MX_TIM3_Init();
 8001bbc:	f000 fac0 	bl	8002140 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001bc0:	f000 fb0c 	bl	80021dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8001bc4:	483b      	ldr	r0, [pc, #236]	@ (8001cb4 <main+0x128>)
 8001bc6:	f005 fbc1 	bl	800734c <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001bca:	f00c fcd1 	bl	800e570 <osKernelInitialize>

  /* creation of deleteTimer */
//  deleteTimerHandle = osTimerNew(DeleteLogCallback, osTimerPeriodic, NULL, &deleteTimer_attributes);

  /* creation of readEnvTimer */
  readEnvTimerHandle = osTimerNew(readEnvTimerCallback, osTimerPeriodic, NULL, &readEnvTimer_attributes);
 8001bce:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb8 <main+0x12c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	4839      	ldr	r0, [pc, #228]	@ (8001cbc <main+0x130>)
 8001bd6:	f00c fe09 	bl	800e7ec <osTimerNew>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a38      	ldr	r2, [pc, #224]	@ (8001cc0 <main+0x134>)
 8001bde:	6013      	str	r3, [r2, #0]

  /* creation of updateDisplayTimer */
  updateDisplayTimerHandle = osTimerNew(updateDisplayTimerCallback, osTimerPeriodic, NULL, &updateDisplayTimer_attributes);
 8001be0:	4b38      	ldr	r3, [pc, #224]	@ (8001cc4 <main+0x138>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	2101      	movs	r1, #1
 8001be6:	4838      	ldr	r0, [pc, #224]	@ (8001cc8 <main+0x13c>)
 8001be8:	f00c fe00 	bl	800e7ec <osTimerNew>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4a37      	ldr	r2, [pc, #220]	@ (8001ccc <main+0x140>)
 8001bf0:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of DistanceQueue */
  DistanceQueueHandle = osMessageQueueNew (16, sizeof(Event), &DistanceQueue_attributes);
 8001bf2:	4a37      	ldr	r2, [pc, #220]	@ (8001cd0 <main+0x144>)
 8001bf4:	2114      	movs	r1, #20
 8001bf6:	2010      	movs	r0, #16
 8001bf8:	f00c fea2 	bl	800e940 <osMessageQueueNew>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4a35      	ldr	r2, [pc, #212]	@ (8001cd4 <main+0x148>)
 8001c00:	6013      	str	r3, [r2, #0]

  /* creation of EnvMonitorQueue */
  EnvMonitorQueueHandle = osMessageQueueNew (16, sizeof(Event), &EnvMonitorQueue_attributes);
 8001c02:	4a35      	ldr	r2, [pc, #212]	@ (8001cd8 <main+0x14c>)
 8001c04:	2114      	movs	r1, #20
 8001c06:	2010      	movs	r0, #16
 8001c08:	f00c fe9a 	bl	800e940 <osMessageQueueNew>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4a33      	ldr	r2, [pc, #204]	@ (8001cdc <main+0x150>)
 8001c10:	6013      	str	r3, [r2, #0]

  /* creation of DataLoggerQueue */
//  DataLoggerQueueHandle = osMessageQueueNew (20, sizeof(Event), &DataLoggerQueue_attributes);

  /* creation of DisplayQueue */
  DisplayQueueHandle = osMessageQueueNew (30, sizeof(Event), &DisplayQueue_attributes);
 8001c12:	4a33      	ldr	r2, [pc, #204]	@ (8001ce0 <main+0x154>)
 8001c14:	2114      	movs	r1, #20
 8001c16:	201e      	movs	r0, #30
 8001c18:	f00c fe92 	bl	800e940 <osMessageQueueNew>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4a31      	ldr	r2, [pc, #196]	@ (8001ce4 <main+0x158>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* creation of BrokerQueue */
  BrokerQueueHandle = osMessageQueueNew (30, sizeof(Event), &BrokerQueue_attributes);
 8001c22:	4a31      	ldr	r2, [pc, #196]	@ (8001ce8 <main+0x15c>)
 8001c24:	2114      	movs	r1, #20
 8001c26:	201e      	movs	r0, #30
 8001c28:	f00c fe8a 	bl	800e940 <osMessageQueueNew>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4a2f      	ldr	r2, [pc, #188]	@ (8001cec <main+0x160>)
 8001c30:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */

  /* creation of Sysmonitor */
  SysmonitorHandle = osThreadNew(StartMonitor, NULL, &Sysmonitor_attributes);
 8001c32:	4a2f      	ldr	r2, [pc, #188]	@ (8001cf0 <main+0x164>)
 8001c34:	2100      	movs	r1, #0
 8001c36:	482f      	ldr	r0, [pc, #188]	@ (8001cf4 <main+0x168>)
 8001c38:	f00c fcf9 	bl	800e62e <osThreadNew>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4a2e      	ldr	r2, [pc, #184]	@ (8001cf8 <main+0x16c>)
 8001c40:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  	Broker_Init(&broker);
 8001c42:	482e      	ldr	r0, [pc, #184]	@ (8001cfc <main+0x170>)
 8001c44:	f7ff fa58 	bl	80010f8 <Broker_Init>
    Active_start(&broker.super, &Broker_attributes, BrokerQueueHandle);
 8001c48:	4b28      	ldr	r3, [pc, #160]	@ (8001cec <main+0x160>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	492c      	ldr	r1, [pc, #176]	@ (8001d00 <main+0x174>)
 8001c50:	482a      	ldr	r0, [pc, #168]	@ (8001cfc <main+0x170>)
 8001c52:	f7ff f9a1 	bl	8000f98 <Active_start>

    Display_Init(&display);
 8001c56:	482b      	ldr	r0, [pc, #172]	@ (8001d04 <main+0x178>)
 8001c58:	f7ff fc68 	bl	800152c <Display_Init>
	Active_start(&display.super, &Display_attributes, DisplayQueueHandle);
 8001c5c:	4b21      	ldr	r3, [pc, #132]	@ (8001ce4 <main+0x158>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4929      	ldr	r1, [pc, #164]	@ (8001d08 <main+0x17c>)
 8001c64:	4827      	ldr	r0, [pc, #156]	@ (8001d04 <main+0x178>)
 8001c66:	f7ff f997 	bl	8000f98 <Active_start>

	DistanceSensor_Init(&distance);
 8001c6a:	4828      	ldr	r0, [pc, #160]	@ (8001d0c <main+0x180>)
 8001c6c:	f7ff fd44 	bl	80016f8 <DistanceSensor_Init>
	Active_start(&distance.super, &DistanceSensor_attributes, DistanceQueueHandle);
 8001c70:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <main+0x148>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4926      	ldr	r1, [pc, #152]	@ (8001d10 <main+0x184>)
 8001c78:	4824      	ldr	r0, [pc, #144]	@ (8001d0c <main+0x180>)
 8001c7a:	f7ff f98d 	bl	8000f98 <Active_start>

	EnvMonitor_Init(&envmonitor);
 8001c7e:	4825      	ldr	r0, [pc, #148]	@ (8001d14 <main+0x188>)
 8001c80:	f7ff fe46 	bl	8001910 <EnvMonitor_Init>
	Active_start(&envmonitor.super, &EnvMonitor_attributes, EnvMonitorQueueHandle);
 8001c84:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <main+0x150>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4923      	ldr	r1, [pc, #140]	@ (8001d18 <main+0x18c>)
 8001c8c:	4821      	ldr	r0, [pc, #132]	@ (8001d14 <main+0x188>)
 8001c8e:	f7ff f983 	bl	8000f98 <Active_start>
//	DataLogger_Init(&logger);
//	Active_start(&logger.super, &DataLogger_attributes, DataLoggerQueueHandle);
//
//	App_TimerInit(logTimerHandle,600000);
//	App_TimerInit(deleteTimerHandle,1800000);
	App_TimerInit(readEnvTimerHandle,100);
 8001c92:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <main+0x134>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2164      	movs	r1, #100	@ 0x64
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff69 	bl	8001b70 <App_TimerInit>
	App_TimerInit(updateDisplayTimerHandle,50);
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <main+0x140>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2132      	movs	r1, #50	@ 0x32
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff63 	bl	8001b70 <App_TimerInit>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001caa:	f00c fc85 	bl	800e5b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cae:	bf00      	nop
 8001cb0:	e7fd      	b.n	8001cae <main+0x122>
 8001cb2:	bf00      	nop
 8001cb4:	20000400 	.word	0x20000400
 8001cb8:	08014cf8 	.word	0x08014cf8
 8001cbc:	08001add 	.word	0x08001add
 8001cc0:	20002f8c 	.word	0x20002f8c
 8001cc4:	08014d08 	.word	0x08014d08
 8001cc8:	08001b39 	.word	0x08001b39
 8001ccc:	20002f90 	.word	0x20002f90
 8001cd0:	08014c98 	.word	0x08014c98
 8001cd4:	2000270c 	.word	0x2000270c
 8001cd8:	08014cb0 	.word	0x08014cb0
 8001cdc:	200028a0 	.word	0x200028a0
 8001ce0:	08014cc8 	.word	0x08014cc8
 8001ce4:	20002a34 	.word	0x20002a34
 8001ce8:	08014ce0 	.word	0x08014ce0
 8001cec:	20002ce0 	.word	0x20002ce0
 8001cf0:	08014c74 	.word	0x08014c74
 8001cf4:	080025bd 	.word	0x080025bd
 8001cf8:	20002708 	.word	0x20002708
 8001cfc:	20003094 	.word	0x20003094
 8001d00:	08014c50 	.word	0x08014c50
 8001d04:	200030a4 	.word	0x200030a4
 8001d08:	08014c2c 	.word	0x08014c2c
 8001d0c:	200030c0 	.word	0x200030c0
 8001d10:	08014be4 	.word	0x08014be4
 8001d14:	200030d4 	.word	0x200030d4
 8001d18:	08014c08 	.word	0x08014c08

08001d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b094      	sub	sp, #80	@ 0x50
 8001d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d22:	f107 0320 	add.w	r3, r7, #32
 8001d26:	2230      	movs	r2, #48	@ 0x30
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f010 fd93 	bl	8012856 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	4b28      	ldr	r3, [pc, #160]	@ (8001de8 <SystemClock_Config+0xcc>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	4a27      	ldr	r2, [pc, #156]	@ (8001de8 <SystemClock_Config+0xcc>)
 8001d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d50:	4b25      	ldr	r3, [pc, #148]	@ (8001de8 <SystemClock_Config+0xcc>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	4b22      	ldr	r3, [pc, #136]	@ (8001dec <SystemClock_Config+0xd0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a21      	ldr	r2, [pc, #132]	@ (8001dec <SystemClock_Config+0xd0>)
 8001d66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dec <SystemClock_Config+0xd0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d82:	2302      	movs	r3, #2
 8001d84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d86:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 7;
 8001d8c:	2307      	movs	r3, #7
 8001d8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d90:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d94:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d96:	2304      	movs	r3, #4
 8001d98:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	4618      	mov	r0, r3
 8001da4:	f004 f998 	bl	80060d8 <HAL_RCC_OscConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001dae:	f000 fc47 	bl	8002640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db2:	230f      	movs	r3, #15
 8001db4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db6:	2302      	movs	r3, #2
 8001db8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dbe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001dc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001dca:	f107 030c 	add.w	r3, r7, #12
 8001dce:	2103      	movs	r1, #3
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f004 fbf9 	bl	80065c8 <HAL_RCC_ClockConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ddc:	f000 fc30 	bl	8002640 <Error_Handler>
  }
}
 8001de0:	bf00      	nop
 8001de2:	3750      	adds	r7, #80	@ 0x50
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40007000 	.word	0x40007000

08001df0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001df6:	463b      	mov	r3, r7
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e02:	4b21      	ldr	r3, [pc, #132]	@ (8001e88 <MX_ADC1_Init+0x98>)
 8001e04:	4a21      	ldr	r2, [pc, #132]	@ (8001e8c <MX_ADC1_Init+0x9c>)
 8001e06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e08:	4b1f      	ldr	r3, [pc, #124]	@ (8001e88 <MX_ADC1_Init+0x98>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e88 <MX_ADC1_Init+0x98>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e14:	4b1c      	ldr	r3, [pc, #112]	@ (8001e88 <MX_ADC1_Init+0x98>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <MX_ADC1_Init+0x98>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e20:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <MX_ADC1_Init+0x98>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e28:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <MX_ADC1_Init+0x98>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e2e:	4b16      	ldr	r3, [pc, #88]	@ (8001e88 <MX_ADC1_Init+0x98>)
 8001e30:	4a17      	ldr	r2, [pc, #92]	@ (8001e90 <MX_ADC1_Init+0xa0>)
 8001e32:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e34:	4b14      	ldr	r3, [pc, #80]	@ (8001e88 <MX_ADC1_Init+0x98>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e3a:	4b13      	ldr	r3, [pc, #76]	@ (8001e88 <MX_ADC1_Init+0x98>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <MX_ADC1_Init+0x98>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	@ (8001e88 <MX_ADC1_Init+0x98>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e4e:	480e      	ldr	r0, [pc, #56]	@ (8001e88 <MX_ADC1_Init+0x98>)
 8001e50:	f001 f8da 	bl	8003008 <HAL_ADC_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001e5a:	f000 fbf1 	bl	8002640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4806      	ldr	r0, [pc, #24]	@ (8001e88 <MX_ADC1_Init+0x98>)
 8001e70:	f001 fa90 	bl	8003394 <HAL_ADC_ConfigChannel>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001e7a:	f000 fbe1 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000021c 	.word	0x2000021c
 8001e8c:	40012000 	.word	0x40012000
 8001e90:	0f000001 	.word	0x0f000001

08001e94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e98:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <MX_I2C1_Init+0x50>)
 8001e9a:	4a13      	ldr	r2, [pc, #76]	@ (8001ee8 <MX_I2C1_Init+0x54>)
 8001e9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <MX_I2C1_Init+0x50>)
 8001ea0:	4a12      	ldr	r2, [pc, #72]	@ (8001eec <MX_I2C1_Init+0x58>)
 8001ea2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <MX_I2C1_Init+0x50>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee4 <MX_I2C1_Init+0x50>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <MX_I2C1_Init+0x50>)
 8001eb2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001eb6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <MX_I2C1_Init+0x50>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ebe:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <MX_I2C1_Init+0x50>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ec4:	4b07      	ldr	r3, [pc, #28]	@ (8001ee4 <MX_I2C1_Init+0x50>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <MX_I2C1_Init+0x50>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ed0:	4804      	ldr	r0, [pc, #16]	@ (8001ee4 <MX_I2C1_Init+0x50>)
 8001ed2:	f002 fbff 	bl	80046d4 <HAL_I2C_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001edc:	f000 fbb0 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	200002c4 	.word	0x200002c4
 8001ee8:	40005400 	.word	0x40005400
 8001eec:	000186a0 	.word	0x000186a0

08001ef0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ef4:	4b17      	ldr	r3, [pc, #92]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001ef6:	4a18      	ldr	r2, [pc, #96]	@ (8001f58 <MX_SPI1_Init+0x68>)
 8001ef8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001efa:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001efc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f02:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f22:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f28:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f34:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f3c:	220a      	movs	r2, #10
 8001f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f40:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <MX_SPI1_Init+0x64>)
 8001f42:	f004 fd61 	bl	8006a08 <HAL_SPI_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f4c:	f000 fb78 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000318 	.word	0x20000318
 8001f58:	40013000 	.word	0x40013000

08001f5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b092      	sub	sp, #72	@ 0x48
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f62:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
 8001f7c:	615a      	str	r2, [r3, #20]
 8001f7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	2220      	movs	r2, #32
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f010 fc65 	bl	8012856 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f8c:	4b32      	ldr	r3, [pc, #200]	@ (8002058 <MX_TIM1_Init+0xfc>)
 8001f8e:	4a33      	ldr	r2, [pc, #204]	@ (800205c <MX_TIM1_Init+0x100>)
 8001f90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f92:	4b31      	ldr	r3, [pc, #196]	@ (8002058 <MX_TIM1_Init+0xfc>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f98:	4b2f      	ldr	r3, [pc, #188]	@ (8002058 <MX_TIM1_Init+0xfc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 124;
 8001f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002058 <MX_TIM1_Init+0xfc>)
 8001fa0:	227c      	movs	r2, #124	@ 0x7c
 8001fa2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8002058 <MX_TIM1_Init+0xfc>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001faa:	4b2b      	ldr	r3, [pc, #172]	@ (8002058 <MX_TIM1_Init+0xfc>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fb0:	4b29      	ldr	r3, [pc, #164]	@ (8002058 <MX_TIM1_Init+0xfc>)
 8001fb2:	2280      	movs	r2, #128	@ 0x80
 8001fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fb6:	4828      	ldr	r0, [pc, #160]	@ (8002058 <MX_TIM1_Init+0xfc>)
 8001fb8:	f005 fa38 	bl	800742c <HAL_TIM_PWM_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001fc2:	f000 fb3d 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4820      	ldr	r0, [pc, #128]	@ (8002058 <MX_TIM1_Init+0xfc>)
 8001fd6:	f006 ff29 	bl	8008e2c <HAL_TIMEx_MasterConfigSynchronization>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001fe0:	f000 fb2e 	bl	8002640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe4:	2360      	movs	r3, #96	@ 0x60
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fec:	2300      	movs	r3, #0
 8001fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002004:	2200      	movs	r2, #0
 8002006:	4619      	mov	r1, r3
 8002008:	4813      	ldr	r0, [pc, #76]	@ (8002058 <MX_TIM1_Init+0xfc>)
 800200a:	f006 f807 	bl	800801c <HAL_TIM_PWM_ConfigChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002014:	f000 fb14 	bl	8002640 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800202c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002030:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	4619      	mov	r1, r3
 800203a:	4807      	ldr	r0, [pc, #28]	@ (8002058 <MX_TIM1_Init+0xfc>)
 800203c:	f006 ff72 	bl	8008f24 <HAL_TIMEx_ConfigBreakDeadTime>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002046:	f000 fafb 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800204a:	4803      	ldr	r0, [pc, #12]	@ (8002058 <MX_TIM1_Init+0xfc>)
 800204c:	f000 fcf0 	bl	8002a30 <HAL_TIM_MspPostInit>

}
 8002050:	bf00      	nop
 8002052:	3748      	adds	r7, #72	@ 0x48
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000370 	.word	0x20000370
 800205c:	40010000 	.word	0x40010000

08002060 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	@ 0x28
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002066:	f107 0318 	add.w	r3, r7, #24
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800207e:	463b      	mov	r3, r7
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800208a:	4b2c      	ldr	r3, [pc, #176]	@ (800213c <MX_TIM2_Init+0xdc>)
 800208c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002090:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002092:	4b2a      	ldr	r3, [pc, #168]	@ (800213c <MX_TIM2_Init+0xdc>)
 8002094:	2200      	movs	r2, #0
 8002096:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002098:	4b28      	ldr	r3, [pc, #160]	@ (800213c <MX_TIM2_Init+0xdc>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800209e:	4b27      	ldr	r3, [pc, #156]	@ (800213c <MX_TIM2_Init+0xdc>)
 80020a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a6:	4b25      	ldr	r3, [pc, #148]	@ (800213c <MX_TIM2_Init+0xdc>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ac:	4b23      	ldr	r3, [pc, #140]	@ (800213c <MX_TIM2_Init+0xdc>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020b2:	4822      	ldr	r0, [pc, #136]	@ (800213c <MX_TIM2_Init+0xdc>)
 80020b4:	f005 f8fa 	bl	80072ac <HAL_TIM_Base_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80020be:	f000 fabf 	bl	8002640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020c6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020c8:	f107 0318 	add.w	r3, r7, #24
 80020cc:	4619      	mov	r1, r3
 80020ce:	481b      	ldr	r0, [pc, #108]	@ (800213c <MX_TIM2_Init+0xdc>)
 80020d0:	f006 f866 	bl	80081a0 <HAL_TIM_ConfigClockSource>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80020da:	f000 fab1 	bl	8002640 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80020de:	4817      	ldr	r0, [pc, #92]	@ (800213c <MX_TIM2_Init+0xdc>)
 80020e0:	f005 fc8e 	bl	8007a00 <HAL_TIM_IC_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80020ea:	f000 faa9 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020f6:	f107 0310 	add.w	r3, r7, #16
 80020fa:	4619      	mov	r1, r3
 80020fc:	480f      	ldr	r0, [pc, #60]	@ (800213c <MX_TIM2_Init+0xdc>)
 80020fe:	f006 fe95 	bl	8008e2c <HAL_TIMEx_MasterConfigSynchronization>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002108:	f000 fa9a 	bl	8002640 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800210c:	2300      	movs	r3, #0
 800210e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002110:	2301      	movs	r3, #1
 8002112:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800211c:	463b      	mov	r3, r7
 800211e:	2200      	movs	r2, #0
 8002120:	4619      	mov	r1, r3
 8002122:	4806      	ldr	r0, [pc, #24]	@ (800213c <MX_TIM2_Init+0xdc>)
 8002124:	f005 fede 	bl	8007ee4 <HAL_TIM_IC_ConfigChannel>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800212e:	f000 fa87 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002132:	bf00      	nop
 8002134:	3728      	adds	r7, #40	@ 0x28
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200003b8 	.word	0x200003b8

08002140 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002154:	463b      	mov	r3, r7
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800215c:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <MX_TIM3_Init+0x94>)
 800215e:	4a1e      	ldr	r2, [pc, #120]	@ (80021d8 <MX_TIM3_Init+0x98>)
 8002160:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49;
 8002162:	4b1c      	ldr	r3, [pc, #112]	@ (80021d4 <MX_TIM3_Init+0x94>)
 8002164:	2231      	movs	r2, #49	@ 0x31
 8002166:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002168:	4b1a      	ldr	r3, [pc, #104]	@ (80021d4 <MX_TIM3_Init+0x94>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 800216e:	4b19      	ldr	r3, [pc, #100]	@ (80021d4 <MX_TIM3_Init+0x94>)
 8002170:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002174:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002176:	4b17      	ldr	r3, [pc, #92]	@ (80021d4 <MX_TIM3_Init+0x94>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217c:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <MX_TIM3_Init+0x94>)
 800217e:	2200      	movs	r2, #0
 8002180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002182:	4814      	ldr	r0, [pc, #80]	@ (80021d4 <MX_TIM3_Init+0x94>)
 8002184:	f005 f892 	bl	80072ac <HAL_TIM_Base_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800218e:	f000 fa57 	bl	8002640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002192:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002196:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002198:	f107 0308 	add.w	r3, r7, #8
 800219c:	4619      	mov	r1, r3
 800219e:	480d      	ldr	r0, [pc, #52]	@ (80021d4 <MX_TIM3_Init+0x94>)
 80021a0:	f005 fffe 	bl	80081a0 <HAL_TIM_ConfigClockSource>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80021aa:	f000 fa49 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021b6:	463b      	mov	r3, r7
 80021b8:	4619      	mov	r1, r3
 80021ba:	4806      	ldr	r0, [pc, #24]	@ (80021d4 <MX_TIM3_Init+0x94>)
 80021bc:	f006 fe36 	bl	8008e2c <HAL_TIMEx_MasterConfigSynchronization>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80021c6:	f000 fa3b 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000400 	.word	0x20000400
 80021d8:	40000400 	.word	0x40000400

080021dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021e0:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 80021e2:	4a12      	ldr	r2, [pc, #72]	@ (800222c <MX_USART2_UART_Init+0x50>)
 80021e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021e6:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 80021e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002200:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 8002202:	220c      	movs	r2, #12
 8002204:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002206:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002212:	4805      	ldr	r0, [pc, #20]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 8002214:	f006 feec 	bl	8008ff0 <HAL_UART_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800221e:	f000 fa0f 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200004a8 	.word	0x200004a8
 800222c:	40004400 	.word	0x40004400

08002230 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002234:	4b11      	ldr	r3, [pc, #68]	@ (800227c <MX_USART3_UART_Init+0x4c>)
 8002236:	4a12      	ldr	r2, [pc, #72]	@ (8002280 <MX_USART3_UART_Init+0x50>)
 8002238:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800223a:	4b10      	ldr	r3, [pc, #64]	@ (800227c <MX_USART3_UART_Init+0x4c>)
 800223c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002240:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002242:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <MX_USART3_UART_Init+0x4c>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002248:	4b0c      	ldr	r3, [pc, #48]	@ (800227c <MX_USART3_UART_Init+0x4c>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800224e:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <MX_USART3_UART_Init+0x4c>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002254:	4b09      	ldr	r3, [pc, #36]	@ (800227c <MX_USART3_UART_Init+0x4c>)
 8002256:	220c      	movs	r2, #12
 8002258:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800225a:	4b08      	ldr	r3, [pc, #32]	@ (800227c <MX_USART3_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <MX_USART3_UART_Init+0x4c>)
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002266:	4805      	ldr	r0, [pc, #20]	@ (800227c <MX_USART3_UART_Init+0x4c>)
 8002268:	f006 fec2 	bl	8008ff0 <HAL_UART_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002272:	f000 f9e5 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200004f0 	.word	0x200004f0
 8002280:	40004800 	.word	0x40004800

08002284 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <MX_DMA_Init+0x78>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	4a1a      	ldr	r2, [pc, #104]	@ (80022fc <MX_DMA_Init+0x78>)
 8002294:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002298:	6313      	str	r3, [r2, #48]	@ 0x30
 800229a:	4b18      	ldr	r3, [pc, #96]	@ (80022fc <MX_DMA_Init+0x78>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	4b14      	ldr	r3, [pc, #80]	@ (80022fc <MX_DMA_Init+0x78>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	4a13      	ldr	r2, [pc, #76]	@ (80022fc <MX_DMA_Init+0x78>)
 80022b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b6:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <MX_DMA_Init+0x78>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2105      	movs	r1, #5
 80022c6:	200e      	movs	r0, #14
 80022c8:	f001 fbdf 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80022cc:	200e      	movs	r0, #14
 80022ce:	f001 fbf8 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80022d2:	2200      	movs	r2, #0
 80022d4:	2105      	movs	r1, #5
 80022d6:	2038      	movs	r0, #56	@ 0x38
 80022d8:	f001 fbd7 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80022dc:	2038      	movs	r0, #56	@ 0x38
 80022de:	f001 fbf0 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2105      	movs	r1, #5
 80022e6:	2039      	movs	r0, #57	@ 0x39
 80022e8:	f001 fbcf 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80022ec:	2039      	movs	r0, #57	@ 0x39
 80022ee:	f001 fbe8 	bl	8003ac2 <HAL_NVIC_EnableIRQ>

}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800

08002300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	@ 0x30
 8002304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002306:	f107 031c 	add.w	r3, r7, #28
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
 8002314:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	4ba2      	ldr	r3, [pc, #648]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	4aa1      	ldr	r2, [pc, #644]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 8002320:	f043 0310 	orr.w	r3, r3, #16
 8002324:	6313      	str	r3, [r2, #48]	@ 0x30
 8002326:	4b9f      	ldr	r3, [pc, #636]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	61bb      	str	r3, [r7, #24]
 8002330:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	4b9b      	ldr	r3, [pc, #620]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	4a9a      	ldr	r2, [pc, #616]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	6313      	str	r3, [r2, #48]	@ 0x30
 8002342:	4b98      	ldr	r3, [pc, #608]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	4b94      	ldr	r3, [pc, #592]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	4a93      	ldr	r2, [pc, #588]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 8002358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800235c:	6313      	str	r3, [r2, #48]	@ 0x30
 800235e:	4b91      	ldr	r3, [pc, #580]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b8d      	ldr	r3, [pc, #564]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	4a8c      	ldr	r2, [pc, #560]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6313      	str	r3, [r2, #48]	@ 0x30
 800237a:	4b8a      	ldr	r3, [pc, #552]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	4b86      	ldr	r3, [pc, #536]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	4a85      	ldr	r2, [pc, #532]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	6313      	str	r3, [r2, #48]	@ 0x30
 8002396:	4b83      	ldr	r3, [pc, #524]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	4b7f      	ldr	r3, [pc, #508]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	4a7e      	ldr	r2, [pc, #504]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 80023ac:	f043 0308 	orr.w	r3, r3, #8
 80023b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b2:	4b7c      	ldr	r3, [pc, #496]	@ (80025a4 <MX_GPIO_Init+0x2a4>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80023be:	2200      	movs	r2, #0
 80023c0:	2108      	movs	r1, #8
 80023c2:	4879      	ldr	r0, [pc, #484]	@ (80025a8 <MX_GPIO_Init+0x2a8>)
 80023c4:	f002 f954 	bl	8004670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80023c8:	2201      	movs	r2, #1
 80023ca:	2101      	movs	r1, #1
 80023cc:	4877      	ldr	r0, [pc, #476]	@ (80025ac <MX_GPIO_Init+0x2ac>)
 80023ce:	f002 f94f 	bl	8004670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_pin_GPIO_Port, CS_pin_Pin, GPIO_PIN_RESET);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2110      	movs	r1, #16
 80023d6:	4875      	ldr	r0, [pc, #468]	@ (80025ac <MX_GPIO_Init+0x2ac>)
 80023d8:	f002 f94a 	bl	8004670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ultrasonic_Trigger_GPIO_Port, Ultrasonic_Trigger_Pin, GPIO_PIN_RESET);
 80023dc:	2200      	movs	r2, #0
 80023de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023e2:	4873      	ldr	r0, [pc, #460]	@ (80025b0 <MX_GPIO_Init+0x2b0>)
 80023e4:	f002 f944 	bl	8004670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80023e8:	2200      	movs	r2, #0
 80023ea:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80023ee:	4871      	ldr	r0, [pc, #452]	@ (80025b4 <MX_GPIO_Init+0x2b4>)
 80023f0:	f002 f93e 	bl	8004670 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80023f4:	2308      	movs	r3, #8
 80023f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f8:	2301      	movs	r3, #1
 80023fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	2300      	movs	r3, #0
 8002402:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	4619      	mov	r1, r3
 800240a:	4867      	ldr	r0, [pc, #412]	@ (80025a8 <MX_GPIO_Init+0x2a8>)
 800240c:	f001 ff7c 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_pin_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_pin_Pin;
 8002410:	2311      	movs	r3, #17
 8002412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002414:	2301      	movs	r3, #1
 8002416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002420:	f107 031c 	add.w	r3, r7, #28
 8002424:	4619      	mov	r1, r3
 8002426:	4861      	ldr	r0, [pc, #388]	@ (80025ac <MX_GPIO_Init+0x2ac>)
 8002428:	f001 ff6e 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800242c:	2308      	movs	r3, #8
 800242e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800243c:	2305      	movs	r3, #5
 800243e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002440:	f107 031c 	add.w	r3, r7, #28
 8002444:	4619      	mov	r1, r3
 8002446:	4859      	ldr	r0, [pc, #356]	@ (80025ac <MX_GPIO_Init+0x2ac>)
 8002448:	f001 ff5e 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800244c:	2301      	movs	r3, #1
 800244e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002450:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800245a:	f107 031c 	add.w	r3, r7, #28
 800245e:	4619      	mov	r1, r3
 8002460:	4855      	ldr	r0, [pc, #340]	@ (80025b8 <MX_GPIO_Init+0x2b8>)
 8002462:	f001 ff51 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002466:	2310      	movs	r3, #16
 8002468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	2300      	movs	r3, #0
 8002474:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002476:	2306      	movs	r3, #6
 8002478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800247a:	f107 031c 	add.w	r3, r7, #28
 800247e:	4619      	mov	r1, r3
 8002480:	484d      	ldr	r0, [pc, #308]	@ (80025b8 <MX_GPIO_Init+0x2b8>)
 8002482:	f001 ff41 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002486:	2304      	movs	r3, #4
 8002488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800248a:	2300      	movs	r3, #0
 800248c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002492:	f107 031c 	add.w	r3, r7, #28
 8002496:	4619      	mov	r1, r3
 8002498:	4845      	ldr	r0, [pc, #276]	@ (80025b0 <MX_GPIO_Init+0x2b0>)
 800249a:	f001 ff35 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_input_Pin */
  GPIO_InitStruct.Pin = DHT11_input_Pin;
 800249e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a4:	2300      	movs	r3, #0
 80024a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DHT11_input_GPIO_Port, &GPIO_InitStruct);
 80024ac:	f107 031c 	add.w	r3, r7, #28
 80024b0:	4619      	mov	r1, r3
 80024b2:	483d      	ldr	r0, [pc, #244]	@ (80025a8 <MX_GPIO_Init+0x2a8>)
 80024b4:	f001 ff28 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80024b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024be:	2302      	movs	r3, #2
 80024c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024ca:	2305      	movs	r3, #5
 80024cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80024ce:	f107 031c 	add.w	r3, r7, #28
 80024d2:	4619      	mov	r1, r3
 80024d4:	4836      	ldr	r0, [pc, #216]	@ (80025b0 <MX_GPIO_Init+0x2b0>)
 80024d6:	f001 ff17 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ultrasonic_Trigger_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_Trigger_Pin;
 80024da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e0:	2301      	movs	r3, #1
 80024e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Ultrasonic_Trigger_GPIO_Port, &GPIO_InitStruct);
 80024ec:	f107 031c 	add.w	r3, r7, #28
 80024f0:	4619      	mov	r1, r3
 80024f2:	482f      	ldr	r0, [pc, #188]	@ (80025b0 <MX_GPIO_Init+0x2b0>)
 80024f4:	f001 ff08 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80024f8:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80024fc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fe:	2301      	movs	r3, #1
 8002500:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800250a:	f107 031c 	add.w	r3, r7, #28
 800250e:	4619      	mov	r1, r3
 8002510:	4828      	ldr	r0, [pc, #160]	@ (80025b4 <MX_GPIO_Init+0x2b4>)
 8002512:	f001 fef9 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002516:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800251a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251c:	2302      	movs	r3, #2
 800251e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002524:	2300      	movs	r3, #0
 8002526:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002528:	2306      	movs	r3, #6
 800252a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	4619      	mov	r1, r3
 8002532:	481e      	ldr	r0, [pc, #120]	@ (80025ac <MX_GPIO_Init+0x2ac>)
 8002534:	f001 fee8 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_Button_Pin Center_Button_Pin Right_ButtonD3_Pin */
  GPIO_InitStruct.Pin = Right_Button_Pin|Center_Button_Pin|Right_ButtonD3_Pin;
 8002538:	230e      	movs	r3, #14
 800253a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800253c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002542:	2301      	movs	r3, #1
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002546:	f107 031c 	add.w	r3, r7, #28
 800254a:	4619      	mov	r1, r3
 800254c:	4819      	ldr	r0, [pc, #100]	@ (80025b4 <MX_GPIO_Init+0x2b4>)
 800254e:	f001 fedb 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002552:	2320      	movs	r3, #32
 8002554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800255e:	f107 031c 	add.w	r3, r7, #28
 8002562:	4619      	mov	r1, r3
 8002564:	4813      	ldr	r0, [pc, #76]	@ (80025b4 <MX_GPIO_Init+0x2b4>)
 8002566:	f001 fecf 	bl	8004308 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2105      	movs	r1, #5
 800256e:	2007      	movs	r0, #7
 8002570:	f001 fa8b 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002574:	2007      	movs	r0, #7
 8002576:	f001 faa4 	bl	8003ac2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2105      	movs	r1, #5
 800257e:	2008      	movs	r0, #8
 8002580:	f001 fa83 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002584:	2008      	movs	r0, #8
 8002586:	f001 fa9c 	bl	8003ac2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2105      	movs	r1, #5
 800258e:	2009      	movs	r0, #9
 8002590:	f001 fa7b 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002594:	2009      	movs	r0, #9
 8002596:	f001 fa94 	bl	8003ac2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800259a:	bf00      	nop
 800259c:	3730      	adds	r7, #48	@ 0x30
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40020800 	.word	0x40020800
 80025b0:	40020400 	.word	0x40020400
 80025b4:	40020c00 	.word	0x40020c00
 80025b8:	40020000 	.word	0x40020000

080025bc <StartMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMonitor */
void StartMonitor(void *argument)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMonitor */
  /* Infinite loop */
  for(;;)
  {

	  AO_ReportStack(&broker.super,    "Broker");
 80025c4:	4914      	ldr	r1, [pc, #80]	@ (8002618 <StartMonitor+0x5c>)
 80025c6:	4815      	ldr	r0, [pc, #84]	@ (800261c <StartMonitor+0x60>)
 80025c8:	f7fe fd10 	bl	8000fec <AO_ReportStack>
	  AO_ReportQueue(&broker.super, "Broker");
 80025cc:	4912      	ldr	r1, [pc, #72]	@ (8002618 <StartMonitor+0x5c>)
 80025ce:	4813      	ldr	r0, [pc, #76]	@ (800261c <StartMonitor+0x60>)
 80025d0:	f7fe fd28 	bl	8001024 <AO_ReportQueue>

	  AO_ReportStack(&distance.super,  "Distance");
 80025d4:	4912      	ldr	r1, [pc, #72]	@ (8002620 <StartMonitor+0x64>)
 80025d6:	4813      	ldr	r0, [pc, #76]	@ (8002624 <StartMonitor+0x68>)
 80025d8:	f7fe fd08 	bl	8000fec <AO_ReportStack>
	  AO_ReportQueue(&distance.super, "Distance");
 80025dc:	4910      	ldr	r1, [pc, #64]	@ (8002620 <StartMonitor+0x64>)
 80025de:	4811      	ldr	r0, [pc, #68]	@ (8002624 <StartMonitor+0x68>)
 80025e0:	f7fe fd20 	bl	8001024 <AO_ReportQueue>

	  AO_ReportStack(&envmonitor.super,"EnvMonitor");
 80025e4:	4910      	ldr	r1, [pc, #64]	@ (8002628 <StartMonitor+0x6c>)
 80025e6:	4811      	ldr	r0, [pc, #68]	@ (800262c <StartMonitor+0x70>)
 80025e8:	f7fe fd00 	bl	8000fec <AO_ReportStack>
	  AO_ReportQueue(&envmonitor.super, "EnvMonitor");
 80025ec:	490e      	ldr	r1, [pc, #56]	@ (8002628 <StartMonitor+0x6c>)
 80025ee:	480f      	ldr	r0, [pc, #60]	@ (800262c <StartMonitor+0x70>)
 80025f0:	f7fe fd18 	bl	8001024 <AO_ReportQueue>

	  AO_ReportStack(&logger.super,    "Logger");
 80025f4:	490e      	ldr	r1, [pc, #56]	@ (8002630 <StartMonitor+0x74>)
 80025f6:	480f      	ldr	r0, [pc, #60]	@ (8002634 <StartMonitor+0x78>)
 80025f8:	f7fe fcf8 	bl	8000fec <AO_ReportStack>
	  AO_ReportQueue(&logger.super, "Logger");
 80025fc:	490c      	ldr	r1, [pc, #48]	@ (8002630 <StartMonitor+0x74>)
 80025fe:	480d      	ldr	r0, [pc, #52]	@ (8002634 <StartMonitor+0x78>)
 8002600:	f7fe fd10 	bl	8001024 <AO_ReportQueue>

	  AO_ReportStack(&display.super,  "Display");
 8002604:	490c      	ldr	r1, [pc, #48]	@ (8002638 <StartMonitor+0x7c>)
 8002606:	480d      	ldr	r0, [pc, #52]	@ (800263c <StartMonitor+0x80>)
 8002608:	f7fe fcf0 	bl	8000fec <AO_ReportStack>
	  AO_ReportQueue(&display.super, "Display");
 800260c:	490a      	ldr	r1, [pc, #40]	@ (8002638 <StartMonitor+0x7c>)
 800260e:	480b      	ldr	r0, [pc, #44]	@ (800263c <StartMonitor+0x80>)
 8002610:	f7fe fd08 	bl	8001024 <AO_ReportQueue>
	  AO_ReportStack(&broker.super,    "Broker");
 8002614:	bf00      	nop
 8002616:	e7d5      	b.n	80025c4 <StartMonitor+0x8>
 8002618:	08014b08 	.word	0x08014b08
 800261c:	20003094 	.word	0x20003094
 8002620:	08014ba4 	.word	0x08014ba4
 8002624:	200030c0 	.word	0x200030c0
 8002628:	08014ae8 	.word	0x08014ae8
 800262c:	200030d4 	.word	0x200030d4
 8002630:	08014bb0 	.word	0x08014bb0
 8002634:	200030e8 	.word	0x200030e8
 8002638:	08014b00 	.word	0x08014b00
 800263c:	200030a4 	.word	0x200030a4

08002640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002644:	b672      	cpsid	i
}
 8002646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002648:	bf00      	nop
 800264a:	e7fd      	b.n	8002648 <Error_Handler+0x8>

0800264c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <HAL_MspInit+0x54>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	4a11      	ldr	r2, [pc, #68]	@ (80026a0 <HAL_MspInit+0x54>)
 800265c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002660:	6453      	str	r3, [r2, #68]	@ 0x44
 8002662:	4b0f      	ldr	r3, [pc, #60]	@ (80026a0 <HAL_MspInit+0x54>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	603b      	str	r3, [r7, #0]
 8002672:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <HAL_MspInit+0x54>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	4a0a      	ldr	r2, [pc, #40]	@ (80026a0 <HAL_MspInit+0x54>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	@ 0x40
 800267e:	4b08      	ldr	r3, [pc, #32]	@ (80026a0 <HAL_MspInit+0x54>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	210f      	movs	r1, #15
 800268e:	f06f 0001 	mvn.w	r0, #1
 8002692:	f001 f9fa 	bl	8003a8a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800

080026a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	@ 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a2e      	ldr	r2, [pc, #184]	@ (800277c <HAL_ADC_MspInit+0xd8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d156      	bne.n	8002774 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002780 <HAL_ADC_MspInit+0xdc>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002780 <HAL_ADC_MspInit+0xdc>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002780 <HAL_ADC_MspInit+0xdc>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	4b26      	ldr	r3, [pc, #152]	@ (8002780 <HAL_ADC_MspInit+0xdc>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	4a25      	ldr	r2, [pc, #148]	@ (8002780 <HAL_ADC_MspInit+0xdc>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f2:	4b23      	ldr	r3, [pc, #140]	@ (8002780 <HAL_ADC_MspInit+0xdc>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GAS_SENSOR_AO_IN_Pin;
 80026fe:	2302      	movs	r3, #2
 8002700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002702:	2303      	movs	r3, #3
 8002704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GAS_SENSOR_AO_IN_GPIO_Port, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	481c      	ldr	r0, [pc, #112]	@ (8002784 <HAL_ADC_MspInit+0xe0>)
 8002712:	f001 fdf9 	bl	8004308 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002716:	4b1c      	ldr	r3, [pc, #112]	@ (8002788 <HAL_ADC_MspInit+0xe4>)
 8002718:	4a1c      	ldr	r2, [pc, #112]	@ (800278c <HAL_ADC_MspInit+0xe8>)
 800271a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800271c:	4b1a      	ldr	r3, [pc, #104]	@ (8002788 <HAL_ADC_MspInit+0xe4>)
 800271e:	2200      	movs	r2, #0
 8002720:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002722:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <HAL_ADC_MspInit+0xe4>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002728:	4b17      	ldr	r3, [pc, #92]	@ (8002788 <HAL_ADC_MspInit+0xe4>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800272e:	4b16      	ldr	r3, [pc, #88]	@ (8002788 <HAL_ADC_MspInit+0xe4>)
 8002730:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002734:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002736:	4b14      	ldr	r3, [pc, #80]	@ (8002788 <HAL_ADC_MspInit+0xe4>)
 8002738:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800273c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800273e:	4b12      	ldr	r3, [pc, #72]	@ (8002788 <HAL_ADC_MspInit+0xe4>)
 8002740:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002744:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002746:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <HAL_ADC_MspInit+0xe4>)
 8002748:	2200      	movs	r2, #0
 800274a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800274c:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <HAL_ADC_MspInit+0xe4>)
 800274e:	2200      	movs	r2, #0
 8002750:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002752:	4b0d      	ldr	r3, [pc, #52]	@ (8002788 <HAL_ADC_MspInit+0xe4>)
 8002754:	2200      	movs	r2, #0
 8002756:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002758:	480b      	ldr	r0, [pc, #44]	@ (8002788 <HAL_ADC_MspInit+0xe4>)
 800275a:	f001 f9d3 	bl	8003b04 <HAL_DMA_Init>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002764:	f7ff ff6c 	bl	8002640 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a07      	ldr	r2, [pc, #28]	@ (8002788 <HAL_ADC_MspInit+0xe4>)
 800276c:	639a      	str	r2, [r3, #56]	@ 0x38
 800276e:	4a06      	ldr	r2, [pc, #24]	@ (8002788 <HAL_ADC_MspInit+0xe4>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002774:	bf00      	nop
 8002776:	3728      	adds	r7, #40	@ 0x28
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40012000 	.word	0x40012000
 8002780:	40023800 	.word	0x40023800
 8002784:	40020000 	.word	0x40020000
 8002788:	20000264 	.word	0x20000264
 800278c:	40026410 	.word	0x40026410

08002790 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	@ 0x28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a19      	ldr	r2, [pc, #100]	@ (8002814 <HAL_I2C_MspInit+0x84>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d12c      	bne.n	800280c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	4b18      	ldr	r3, [pc, #96]	@ (8002818 <HAL_I2C_MspInit+0x88>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	4a17      	ldr	r2, [pc, #92]	@ (8002818 <HAL_I2C_MspInit+0x88>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c2:	4b15      	ldr	r3, [pc, #84]	@ (8002818 <HAL_I2C_MspInit+0x88>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80027ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027d4:	2312      	movs	r3, #18
 80027d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027e0:	2304      	movs	r3, #4
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	4619      	mov	r1, r3
 80027ea:	480c      	ldr	r0, [pc, #48]	@ (800281c <HAL_I2C_MspInit+0x8c>)
 80027ec:	f001 fd8c 	bl	8004308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	4b08      	ldr	r3, [pc, #32]	@ (8002818 <HAL_I2C_MspInit+0x88>)
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	4a07      	ldr	r2, [pc, #28]	@ (8002818 <HAL_I2C_MspInit+0x88>)
 80027fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002800:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <HAL_I2C_MspInit+0x88>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800280c:	bf00      	nop
 800280e:	3728      	adds	r7, #40	@ 0x28
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40005400 	.word	0x40005400
 8002818:	40023800 	.word	0x40023800
 800281c:	40020400 	.word	0x40020400

08002820 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	@ 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a19      	ldr	r2, [pc, #100]	@ (80028a4 <HAL_SPI_MspInit+0x84>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d12b      	bne.n	800289a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	4b18      	ldr	r3, [pc, #96]	@ (80028a8 <HAL_SPI_MspInit+0x88>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	4a17      	ldr	r2, [pc, #92]	@ (80028a8 <HAL_SPI_MspInit+0x88>)
 800284c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002850:	6453      	str	r3, [r2, #68]	@ 0x44
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <HAL_SPI_MspInit+0x88>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <HAL_SPI_MspInit+0x88>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	4a10      	ldr	r2, [pc, #64]	@ (80028a8 <HAL_SPI_MspInit+0x88>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6313      	str	r3, [r2, #48]	@ 0x30
 800286e:	4b0e      	ldr	r3, [pc, #56]	@ (80028a8 <HAL_SPI_MspInit+0x88>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800287a:	23e0      	movs	r3, #224	@ 0xe0
 800287c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	2300      	movs	r3, #0
 8002888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800288a:	2305      	movs	r3, #5
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	4805      	ldr	r0, [pc, #20]	@ (80028ac <HAL_SPI_MspInit+0x8c>)
 8002896:	f001 fd37 	bl	8004308 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800289a:	bf00      	nop
 800289c:	3728      	adds	r7, #40	@ 0x28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40013000 	.word	0x40013000
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40020000 	.word	0x40020000

080028b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a22      	ldr	r2, [pc, #136]	@ (8002948 <HAL_TIM_PWM_MspInit+0x98>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d13e      	bne.n	8002940 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	4b21      	ldr	r3, [pc, #132]	@ (800294c <HAL_TIM_PWM_MspInit+0x9c>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ca:	4a20      	ldr	r2, [pc, #128]	@ (800294c <HAL_TIM_PWM_MspInit+0x9c>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028d2:	4b1e      	ldr	r3, [pc, #120]	@ (800294c <HAL_TIM_PWM_MspInit+0x9c>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80028de:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <HAL_TIM_PWM_MspInit+0xa0>)
 80028e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002954 <HAL_TIM_PWM_MspInit+0xa4>)
 80028e2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80028e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002950 <HAL_TIM_PWM_MspInit+0xa0>)
 80028e6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80028ea:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ec:	4b18      	ldr	r3, [pc, #96]	@ (8002950 <HAL_TIM_PWM_MspInit+0xa0>)
 80028ee:	2240      	movs	r2, #64	@ 0x40
 80028f0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028f2:	4b17      	ldr	r3, [pc, #92]	@ (8002950 <HAL_TIM_PWM_MspInit+0xa0>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80028f8:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <HAL_TIM_PWM_MspInit+0xa0>)
 80028fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028fe:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002900:	4b13      	ldr	r3, [pc, #76]	@ (8002950 <HAL_TIM_PWM_MspInit+0xa0>)
 8002902:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002906:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002908:	4b11      	ldr	r3, [pc, #68]	@ (8002950 <HAL_TIM_PWM_MspInit+0xa0>)
 800290a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800290e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002910:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <HAL_TIM_PWM_MspInit+0xa0>)
 8002912:	2200      	movs	r2, #0
 8002914:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002916:	4b0e      	ldr	r3, [pc, #56]	@ (8002950 <HAL_TIM_PWM_MspInit+0xa0>)
 8002918:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800291c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800291e:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <HAL_TIM_PWM_MspInit+0xa0>)
 8002920:	2200      	movs	r2, #0
 8002922:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002924:	480a      	ldr	r0, [pc, #40]	@ (8002950 <HAL_TIM_PWM_MspInit+0xa0>)
 8002926:	f001 f8ed 	bl	8003b04 <HAL_DMA_Init>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8002930:	f7ff fe86 	bl	8002640 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a06      	ldr	r2, [pc, #24]	@ (8002950 <HAL_TIM_PWM_MspInit+0xa0>)
 8002938:	625a      	str	r2, [r3, #36]	@ 0x24
 800293a:	4a05      	ldr	r2, [pc, #20]	@ (8002950 <HAL_TIM_PWM_MspInit+0xa0>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40010000 	.word	0x40010000
 800294c:	40023800 	.word	0x40023800
 8002950:	20000448 	.word	0x20000448
 8002954:	40026428 	.word	0x40026428

08002958 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	@ 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002978:	d135      	bne.n	80029e6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	4b29      	ldr	r3, [pc, #164]	@ (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	4a28      	ldr	r2, [pc, #160]	@ (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6413      	str	r3, [r2, #64]	@ 0x40
 800298a:	4b26      	ldr	r3, [pc, #152]	@ (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b22      	ldr	r3, [pc, #136]	@ (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	4a21      	ldr	r2, [pc, #132]	@ (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Ultrasonic_Echo_IC_Pin;
 80029b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c0:	2300      	movs	r3, #0
 80029c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029c4:	2301      	movs	r3, #1
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Ultrasonic_Echo_IC_GPIO_Port, &GPIO_InitStruct);
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	4619      	mov	r1, r3
 80029ce:	4816      	ldr	r0, [pc, #88]	@ (8002a28 <HAL_TIM_Base_MspInit+0xd0>)
 80029d0:	f001 fc9a 	bl	8004308 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80029d4:	2200      	movs	r2, #0
 80029d6:	2105      	movs	r1, #5
 80029d8:	201c      	movs	r0, #28
 80029da:	f001 f856 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029de:	201c      	movs	r0, #28
 80029e0:	f001 f86f 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029e4:	e01a      	b.n	8002a1c <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM3)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a10      	ldr	r2, [pc, #64]	@ (8002a2c <HAL_TIM_Base_MspInit+0xd4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d115      	bne.n	8002a1c <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029f0:	2300      	movs	r3, #0
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 80029fa:	f043 0302 	orr.w	r3, r3, #2
 80029fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a00:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2105      	movs	r1, #5
 8002a10:	201d      	movs	r0, #29
 8002a12:	f001 f83a 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a16:	201d      	movs	r0, #29
 8002a18:	f001 f853 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
}
 8002a1c:	bf00      	nop
 8002a1e:	3728      	adds	r7, #40	@ 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40020000 	.word	0x40020000
 8002a2c:	40000400 	.word	0x40000400

08002a30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 030c 	add.w	r3, r7, #12
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a12      	ldr	r2, [pc, #72]	@ (8002a98 <HAL_TIM_MspPostInit+0x68>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d11e      	bne.n	8002a90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <HAL_TIM_MspPostInit+0x6c>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	4a10      	ldr	r2, [pc, #64]	@ (8002a9c <HAL_TIM_MspPostInit+0x6c>)
 8002a5c:	f043 0310 	orr.w	r3, r3, #16
 8002a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a62:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <HAL_TIM_MspPostInit+0x6c>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8002a6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a74:	2302      	movs	r3, #2
 8002a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a80:	2301      	movs	r3, #1
 8002a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a84:	f107 030c 	add.w	r3, r7, #12
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4805      	ldr	r0, [pc, #20]	@ (8002aa0 <HAL_TIM_MspPostInit+0x70>)
 8002a8c:	f001 fc3c 	bl	8004308 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a90:	bf00      	nop
 8002a92:	3720      	adds	r7, #32
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40010000 	.word	0x40010000
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	@ 0x30
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a4d      	ldr	r2, [pc, #308]	@ (8002bf8 <HAL_UART_MspInit+0x154>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d12c      	bne.n	8002b20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	4b4c      	ldr	r3, [pc, #304]	@ (8002bfc <HAL_UART_MspInit+0x158>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	4a4b      	ldr	r2, [pc, #300]	@ (8002bfc <HAL_UART_MspInit+0x158>)
 8002ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ad6:	4b49      	ldr	r3, [pc, #292]	@ (8002bfc <HAL_UART_MspInit+0x158>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	4b45      	ldr	r3, [pc, #276]	@ (8002bfc <HAL_UART_MspInit+0x158>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	4a44      	ldr	r2, [pc, #272]	@ (8002bfc <HAL_UART_MspInit+0x158>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af2:	4b42      	ldr	r3, [pc, #264]	@ (8002bfc <HAL_UART_MspInit+0x158>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = ESP32_UART_TX_Pin|ESP32_UART_RX_Pin;
 8002afe:	230c      	movs	r3, #12
 8002b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	2302      	movs	r3, #2
 8002b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b0e:	2307      	movs	r3, #7
 8002b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b12:	f107 031c 	add.w	r3, r7, #28
 8002b16:	4619      	mov	r1, r3
 8002b18:	4839      	ldr	r0, [pc, #228]	@ (8002c00 <HAL_UART_MspInit+0x15c>)
 8002b1a:	f001 fbf5 	bl	8004308 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b1e:	e067      	b.n	8002bf0 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART3)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a37      	ldr	r2, [pc, #220]	@ (8002c04 <HAL_UART_MspInit+0x160>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d162      	bne.n	8002bf0 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	4b33      	ldr	r3, [pc, #204]	@ (8002bfc <HAL_UART_MspInit+0x158>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	4a32      	ldr	r2, [pc, #200]	@ (8002bfc <HAL_UART_MspInit+0x158>)
 8002b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b3a:	4b30      	ldr	r3, [pc, #192]	@ (8002bfc <HAL_UART_MspInit+0x158>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bfc <HAL_UART_MspInit+0x158>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	4a2b      	ldr	r2, [pc, #172]	@ (8002bfc <HAL_UART_MspInit+0x158>)
 8002b50:	f043 0308 	orr.w	r3, r3, #8
 8002b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b56:	4b29      	ldr	r3, [pc, #164]	@ (8002bfc <HAL_UART_MspInit+0x158>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GEN_UART_TX_Pin|GEN_UART_RX_Pin;
 8002b62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b70:	2303      	movs	r3, #3
 8002b72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b74:	2307      	movs	r3, #7
 8002b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b78:	f107 031c 	add.w	r3, r7, #28
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4822      	ldr	r0, [pc, #136]	@ (8002c08 <HAL_UART_MspInit+0x164>)
 8002b80:	f001 fbc2 	bl	8004308 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002b84:	4b21      	ldr	r3, [pc, #132]	@ (8002c0c <HAL_UART_MspInit+0x168>)
 8002b86:	4a22      	ldr	r2, [pc, #136]	@ (8002c10 <HAL_UART_MspInit+0x16c>)
 8002b88:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002b8a:	4b20      	ldr	r3, [pc, #128]	@ (8002c0c <HAL_UART_MspInit+0x168>)
 8002b8c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b90:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b92:	4b1e      	ldr	r3, [pc, #120]	@ (8002c0c <HAL_UART_MspInit+0x168>)
 8002b94:	2240      	movs	r2, #64	@ 0x40
 8002b96:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b98:	4b1c      	ldr	r3, [pc, #112]	@ (8002c0c <HAL_UART_MspInit+0x168>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <HAL_UART_MspInit+0x168>)
 8002ba0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ba4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ba6:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <HAL_UART_MspInit+0x168>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bac:	4b17      	ldr	r3, [pc, #92]	@ (8002c0c <HAL_UART_MspInit+0x168>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002bb2:	4b16      	ldr	r3, [pc, #88]	@ (8002c0c <HAL_UART_MspInit+0x168>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bb8:	4b14      	ldr	r3, [pc, #80]	@ (8002c0c <HAL_UART_MspInit+0x168>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <HAL_UART_MspInit+0x168>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002bc4:	4811      	ldr	r0, [pc, #68]	@ (8002c0c <HAL_UART_MspInit+0x168>)
 8002bc6:	f000 ff9d 	bl	8003b04 <HAL_DMA_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8002bd0:	f7ff fd36 	bl	8002640 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8002c0c <HAL_UART_MspInit+0x168>)
 8002bd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002bda:	4a0c      	ldr	r2, [pc, #48]	@ (8002c0c <HAL_UART_MspInit+0x168>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002be0:	2200      	movs	r2, #0
 8002be2:	2105      	movs	r1, #5
 8002be4:	2027      	movs	r0, #39	@ 0x27
 8002be6:	f000 ff50 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002bea:	2027      	movs	r0, #39	@ 0x27
 8002bec:	f000 ff69 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
}
 8002bf0:	bf00      	nop
 8002bf2:	3730      	adds	r7, #48	@ 0x30
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40004400 	.word	0x40004400
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40020000 	.word	0x40020000
 8002c04:	40004800 	.word	0x40004800
 8002c08:	40020c00 	.word	0x40020c00
 8002c0c:	20000538 	.word	0x20000538
 8002c10:	40026058 	.word	0x40026058

08002c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <NMI_Handler+0x4>

08002c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <HardFault_Handler+0x4>

08002c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <MemManage_Handler+0x4>

08002c2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <BusFault_Handler+0x4>

08002c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <UsageFault_Handler+0x4>

08002c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c4e:	f000 f9bb 	bl	8002fc8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002c52:	f00d fd15 	bl	8010680 <xTaskGetSchedulerState>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d001      	beq.n	8002c60 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002c5c:	f00e fbcc 	bl	80113f8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8002c60:	f000 ff49 	bl	8003af6 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002c64:	bf00      	nop
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_Button_Pin);
 8002c6c:	2002      	movs	r0, #2
 8002c6e:	f001 fd19 	bl	80046a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Center_Button_Pin);
 8002c7a:	2004      	movs	r0, #4
 8002c7c:	f001 fd12 	bl	80046a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_ButtonD3_Pin);
 8002c88:	2008      	movs	r0, #8
 8002c8a:	f001 fd0b 	bl	80046a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002c98:	4802      	ldr	r0, [pc, #8]	@ (8002ca4 <DMA1_Stream3_IRQHandler+0x10>)
 8002c9a:	f001 f8cb 	bl	8003e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000538 	.word	0x20000538

08002ca8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cac:	4802      	ldr	r0, [pc, #8]	@ (8002cb8 <TIM2_IRQHandler+0x10>)
 8002cae:	f005 f829 	bl	8007d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200003b8 	.word	0x200003b8

08002cbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cc0:	4802      	ldr	r0, [pc, #8]	@ (8002ccc <TIM3_IRQHandler+0x10>)
 8002cc2:	f005 f81f 	bl	8007d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000400 	.word	0x20000400

08002cd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002cd4:	4802      	ldr	r0, [pc, #8]	@ (8002ce0 <USART3_IRQHandler+0x10>)
 8002cd6:	f006 fa57 	bl	8009188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200004f0 	.word	0x200004f0

08002ce4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ce8:	4802      	ldr	r0, [pc, #8]	@ (8002cf4 <DMA2_Stream0_IRQHandler+0x10>)
 8002cea:	f001 f8a3 	bl	8003e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000264 	.word	0x20000264

08002cf8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002cfc:	4802      	ldr	r0, [pc, #8]	@ (8002d08 <DMA2_Stream1_IRQHandler+0x10>)
 8002cfe:	f001 f899 	bl	8003e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000448 	.word	0x20000448

08002d0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002d10:	4802      	ldr	r0, [pc, #8]	@ (8002d1c <OTG_FS_IRQHandler+0x10>)
 8002d12:	f002 f98c 	bl	800502e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20008910 	.word	0x20008910

08002d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return 1;
 8002d24:	2301      	movs	r3, #1
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_kill>:

int _kill(int pid, int sig)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d3a:	f00f fddf 	bl	80128fc <__errno>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2216      	movs	r2, #22
 8002d42:	601a      	str	r2, [r3, #0]
  return -1;
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <_exit>:

void _exit (int status)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d58:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ffe7 	bl	8002d30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d62:	bf00      	nop
 8002d64:	e7fd      	b.n	8002d62 <_exit+0x12>

08002d66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	e00a      	b.n	8002d8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d78:	f3af 8000 	nop.w
 8002d7c:	4601      	mov	r1, r0
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	60ba      	str	r2, [r7, #8]
 8002d84:	b2ca      	uxtb	r2, r1
 8002d86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	dbf0      	blt.n	8002d78 <_read+0x12>
  }

  return len;
 8002d96:	687b      	ldr	r3, [r7, #4]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	e009      	b.n	8002dc6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	60ba      	str	r2, [r7, #8]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	dbf1      	blt.n	8002db2 <_write+0x12>
  }
  return len;
 8002dce:	687b      	ldr	r3, [r7, #4]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <_close>:

int _close(int file)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e00:	605a      	str	r2, [r3, #4]
  return 0;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <_isatty>:

int _isatty(int file)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e18:	2301      	movs	r3, #1
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b085      	sub	sp, #20
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e48:	4a14      	ldr	r2, [pc, #80]	@ (8002e9c <_sbrk+0x5c>)
 8002e4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ea0 <_sbrk+0x60>)
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e54:	4b13      	ldr	r3, [pc, #76]	@ (8002ea4 <_sbrk+0x64>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <_sbrk+0x64>)
 8002e5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ea8 <_sbrk+0x68>)
 8002e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e62:	4b10      	ldr	r3, [pc, #64]	@ (8002ea4 <_sbrk+0x64>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d207      	bcs.n	8002e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e70:	f00f fd44 	bl	80128fc <__errno>
 8002e74:	4603      	mov	r3, r0
 8002e76:	220c      	movs	r2, #12
 8002e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	e009      	b.n	8002e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e80:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <_sbrk+0x64>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e86:	4b07      	ldr	r3, [pc, #28]	@ (8002ea4 <_sbrk+0x64>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ea4 <_sbrk+0x64>)
 8002e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e92:	68fb      	ldr	r3, [r7, #12]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20020000 	.word	0x20020000
 8002ea0:	00000400 	.word	0x00000400
 8002ea4:	20003138 	.word	0x20003138
 8002ea8:	20008f40 	.word	0x20008f40

08002eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <SystemInit+0x20>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb6:	4a05      	ldr	r2, [pc, #20]	@ (8002ecc <SystemInit+0x20>)
 8002eb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ebc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ed0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ed4:	f7ff ffea 	bl	8002eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ed8:	480c      	ldr	r0, [pc, #48]	@ (8002f0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eda:	490d      	ldr	r1, [pc, #52]	@ (8002f10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002edc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ee0:	e002      	b.n	8002ee8 <LoopCopyDataInit>

08002ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ee6:	3304      	adds	r3, #4

08002ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eec:	d3f9      	bcc.n	8002ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eee:	4a0a      	ldr	r2, [pc, #40]	@ (8002f18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ef0:	4c0a      	ldr	r4, [pc, #40]	@ (8002f1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ef4:	e001      	b.n	8002efa <LoopFillZerobss>

08002ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ef8:	3204      	adds	r2, #4

08002efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002efc:	d3fb      	bcc.n	8002ef6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002efe:	f00f fd03 	bl	8012908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f02:	f7fe fe43 	bl	8001b8c <main>
  bx  lr    
 8002f06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f10:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002f14:	080165b0 	.word	0x080165b0
  ldr r2, =_sbss
 8002f18:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002f1c:	20008f40 	.word	0x20008f40

08002f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f20:	e7fe      	b.n	8002f20 <ADC_IRQHandler>
	...

08002f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f28:	4b0e      	ldr	r3, [pc, #56]	@ (8002f64 <HAL_Init+0x40>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f64 <HAL_Init+0x40>)
 8002f2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f34:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <HAL_Init+0x40>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0a      	ldr	r2, [pc, #40]	@ (8002f64 <HAL_Init+0x40>)
 8002f3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f40:	4b08      	ldr	r3, [pc, #32]	@ (8002f64 <HAL_Init+0x40>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a07      	ldr	r2, [pc, #28]	@ (8002f64 <HAL_Init+0x40>)
 8002f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f4c:	2003      	movs	r0, #3
 8002f4e:	f000 fd91 	bl	8003a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f52:	200f      	movs	r0, #15
 8002f54:	f000 f808 	bl	8002f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f58:	f7ff fb78 	bl	800264c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40023c00 	.word	0x40023c00

08002f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f70:	4b12      	ldr	r3, [pc, #72]	@ (8002fbc <HAL_InitTick+0x54>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b12      	ldr	r3, [pc, #72]	@ (8002fc0 <HAL_InitTick+0x58>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fda9 	bl	8003ade <HAL_SYSTICK_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e00e      	b.n	8002fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b0f      	cmp	r3, #15
 8002f9a:	d80a      	bhi.n	8002fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa4:	f000 fd71 	bl	8003a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fa8:	4a06      	ldr	r2, [pc, #24]	@ (8002fc4 <HAL_InitTick+0x5c>)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e000      	b.n	8002fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	20000008 	.word	0x20000008
 8002fc4:	20000004 	.word	0x20000004

08002fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <HAL_IncTick+0x20>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <HAL_IncTick+0x24>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	4a04      	ldr	r2, [pc, #16]	@ (8002fec <HAL_IncTick+0x24>)
 8002fda:	6013      	str	r3, [r2, #0]
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000008 	.word	0x20000008
 8002fec:	2000313c 	.word	0x2000313c

08002ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff4:	4b03      	ldr	r3, [pc, #12]	@ (8003004 <HAL_GetTick+0x14>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	2000313c 	.word	0x2000313c

08003008 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e033      	b.n	8003086 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fb3c 	bl	80026a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b00      	cmp	r3, #0
 8003044:	d118      	bne.n	8003078 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800304e:	f023 0302 	bic.w	r3, r3, #2
 8003052:	f043 0202 	orr.w	r2, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fabc 	bl	80035d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	f023 0303 	bic.w	r3, r3, #3
 800306e:	f043 0201 	orr.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	@ 0x40
 8003076:	e001      	b.n	800307c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_ADC_Start_DMA+0x22>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e0eb      	b.n	800328a <HAL_ADC_Start_DMA+0x1fa>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d018      	beq.n	80030fa <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030d8:	4b6e      	ldr	r3, [pc, #440]	@ (8003294 <HAL_ADC_Start_DMA+0x204>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003298 <HAL_ADC_Start_DMA+0x208>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	0c9a      	lsrs	r2, r3, #18
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80030ec:	e002      	b.n	80030f4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f9      	bne.n	80030ee <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003108:	d107      	bne.n	800311a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003118:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	f040 80a3 	bne.w	8003270 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003132:	f023 0301 	bic.w	r3, r3, #1
 8003136:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003154:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003168:	d106      	bne.n	8003178 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316e:	f023 0206 	bic.w	r2, r3, #6
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	645a      	str	r2, [r3, #68]	@ 0x44
 8003176:	e002      	b.n	800317e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003186:	4b45      	ldr	r3, [pc, #276]	@ (800329c <HAL_ADC_Start_DMA+0x20c>)
 8003188:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	4a44      	ldr	r2, [pc, #272]	@ (80032a0 <HAL_ADC_Start_DMA+0x210>)
 8003190:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003196:	4a43      	ldr	r2, [pc, #268]	@ (80032a4 <HAL_ADC_Start_DMA+0x214>)
 8003198:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319e:	4a42      	ldr	r2, [pc, #264]	@ (80032a8 <HAL_ADC_Start_DMA+0x218>)
 80031a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80031aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80031ba:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031ca:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	334c      	adds	r3, #76	@ 0x4c
 80031d6:	4619      	mov	r1, r3
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f000 fd40 	bl	8003c60 <HAL_DMA_Start_IT>
 80031e0:	4603      	mov	r3, r0
 80031e2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d12a      	bne.n	8003246 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a2d      	ldr	r2, [pc, #180]	@ (80032ac <HAL_ADC_Start_DMA+0x21c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d015      	beq.n	8003226 <HAL_ADC_Start_DMA+0x196>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a2c      	ldr	r2, [pc, #176]	@ (80032b0 <HAL_ADC_Start_DMA+0x220>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d105      	bne.n	8003210 <HAL_ADC_Start_DMA+0x180>
 8003204:	4b25      	ldr	r3, [pc, #148]	@ (800329c <HAL_ADC_Start_DMA+0x20c>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 031f 	and.w	r3, r3, #31
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a27      	ldr	r2, [pc, #156]	@ (80032b4 <HAL_ADC_Start_DMA+0x224>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d136      	bne.n	8003288 <HAL_ADC_Start_DMA+0x1f8>
 800321a:	4b20      	ldr	r3, [pc, #128]	@ (800329c <HAL_ADC_Start_DMA+0x20c>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0310 	and.w	r3, r3, #16
 8003222:	2b00      	cmp	r3, #0
 8003224:	d130      	bne.n	8003288 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d129      	bne.n	8003288 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	e020      	b.n	8003288 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a18      	ldr	r2, [pc, #96]	@ (80032ac <HAL_ADC_Start_DMA+0x21c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d11b      	bne.n	8003288 <HAL_ADC_Start_DMA+0x1f8>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d114      	bne.n	8003288 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	e00b      	b.n	8003288 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	f043 0210 	orr.w	r2, r3, #16
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003288:	7ffb      	ldrb	r3, [r7, #31]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3720      	adds	r7, #32
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20000000 	.word	0x20000000
 8003298:	431bde83 	.word	0x431bde83
 800329c:	40012300 	.word	0x40012300
 80032a0:	080037d1 	.word	0x080037d1
 80032a4:	0800388b 	.word	0x0800388b
 80032a8:	080038a7 	.word	0x080038a7
 80032ac:	40012000 	.word	0x40012000
 80032b0:	40012100 	.word	0x40012100
 80032b4:	40012200 	.word	0x40012200

080032b8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_Stop_DMA+0x1a>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e048      	b.n	8003364 <HAL_ADC_Stop_DMA+0xac>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d130      	bne.n	800335a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003306:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d10f      	bne.n	8003336 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fcf8 	bl	8003d10 <HAL_DMA_Abort>
 8003320:	4603      	mov	r3, r0
 8003322:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003344:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	f043 0201 	orr.w	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x1c>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e105      	b.n	80035bc <HAL_ADC_ConfigChannel+0x228>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b09      	cmp	r3, #9
 80033be:	d925      	bls.n	800340c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68d9      	ldr	r1, [r3, #12]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	3b1e      	subs	r3, #30
 80033d6:	2207      	movs	r2, #7
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43da      	mvns	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	400a      	ands	r2, r1
 80033e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68d9      	ldr	r1, [r3, #12]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	4618      	mov	r0, r3
 80033f8:	4603      	mov	r3, r0
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4403      	add	r3, r0
 80033fe:	3b1e      	subs	r3, #30
 8003400:	409a      	lsls	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	e022      	b.n	8003452 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6919      	ldr	r1, [r3, #16]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	b29b      	uxth	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	2207      	movs	r2, #7
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43da      	mvns	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	400a      	ands	r2, r1
 800342e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6919      	ldr	r1, [r3, #16]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	4618      	mov	r0, r3
 8003442:	4603      	mov	r3, r0
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	4403      	add	r3, r0
 8003448:	409a      	lsls	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b06      	cmp	r3, #6
 8003458:	d824      	bhi.n	80034a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	3b05      	subs	r3, #5
 800346c:	221f      	movs	r2, #31
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43da      	mvns	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	400a      	ands	r2, r1
 800347a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	4618      	mov	r0, r3
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	3b05      	subs	r3, #5
 8003496:	fa00 f203 	lsl.w	r2, r0, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80034a2:	e04c      	b.n	800353e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b0c      	cmp	r3, #12
 80034aa:	d824      	bhi.n	80034f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	3b23      	subs	r3, #35	@ 0x23
 80034be:	221f      	movs	r2, #31
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43da      	mvns	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	400a      	ands	r2, r1
 80034cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	4618      	mov	r0, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	3b23      	subs	r3, #35	@ 0x23
 80034e8:	fa00 f203 	lsl.w	r2, r0, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80034f4:	e023      	b.n	800353e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	3b41      	subs	r3, #65	@ 0x41
 8003508:	221f      	movs	r2, #31
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43da      	mvns	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	400a      	ands	r2, r1
 8003516:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	b29b      	uxth	r3, r3
 8003524:	4618      	mov	r0, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	3b41      	subs	r3, #65	@ 0x41
 8003532:	fa00 f203 	lsl.w	r2, r0, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800353e:	4b22      	ldr	r3, [pc, #136]	@ (80035c8 <HAL_ADC_ConfigChannel+0x234>)
 8003540:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a21      	ldr	r2, [pc, #132]	@ (80035cc <HAL_ADC_ConfigChannel+0x238>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d109      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x1cc>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b12      	cmp	r3, #18
 8003552:	d105      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a19      	ldr	r2, [pc, #100]	@ (80035cc <HAL_ADC_ConfigChannel+0x238>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d123      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x21e>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b10      	cmp	r3, #16
 8003570:	d003      	beq.n	800357a <HAL_ADC_ConfigChannel+0x1e6>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b11      	cmp	r3, #17
 8003578:	d11b      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b10      	cmp	r3, #16
 800358c:	d111      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800358e:	4b10      	ldr	r3, [pc, #64]	@ (80035d0 <HAL_ADC_ConfigChannel+0x23c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a10      	ldr	r2, [pc, #64]	@ (80035d4 <HAL_ADC_ConfigChannel+0x240>)
 8003594:	fba2 2303 	umull	r2, r3, r2, r3
 8003598:	0c9a      	lsrs	r2, r3, #18
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035a4:	e002      	b.n	80035ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f9      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	40012300 	.word	0x40012300
 80035cc:	40012000 	.word	0x40012000
 80035d0:	20000000 	.word	0x20000000
 80035d4:	431bde83 	.word	0x431bde83

080035d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035e0:	4b79      	ldr	r3, [pc, #484]	@ (80037c8 <ADC_Init+0x1f0>)
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800360c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6859      	ldr	r1, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	021a      	lsls	r2, r3, #8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003652:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6899      	ldr	r1, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	4a58      	ldr	r2, [pc, #352]	@ (80037cc <ADC_Init+0x1f4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d022      	beq.n	80036b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800367e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6899      	ldr	r1, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6899      	ldr	r1, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	e00f      	b.n	80036d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0202 	bic.w	r2, r2, #2
 80036e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6899      	ldr	r1, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	7e1b      	ldrb	r3, [r3, #24]
 80036f0:	005a      	lsls	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01b      	beq.n	800373c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003712:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003722:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6859      	ldr	r1, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372e:	3b01      	subs	r3, #1
 8003730:	035a      	lsls	r2, r3, #13
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	e007      	b.n	800374c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800374a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800375a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	3b01      	subs	r3, #1
 8003768:	051a      	lsls	r2, r3, #20
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003780:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6899      	ldr	r1, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800378e:	025a      	lsls	r2, r3, #9
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6899      	ldr	r1, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	029a      	lsls	r2, r3, #10
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
}
 80037bc:	bf00      	nop
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	40012300 	.word	0x40012300
 80037cc:	0f000001 	.word	0x0f000001

080037d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d13c      	bne.n	8003864 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d12b      	bne.n	800385c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003808:	2b00      	cmp	r3, #0
 800380a:	d127      	bne.n	800385c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003812:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003816:	2b00      	cmp	r3, #0
 8003818:	d006      	beq.n	8003828 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003824:	2b00      	cmp	r3, #0
 8003826:	d119      	bne.n	800385c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0220 	bic.w	r2, r2, #32
 8003836:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d105      	bne.n	800385c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	f043 0201 	orr.w	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f7fe f929 	bl	8001ab4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003862:	e00e      	b.n	8003882 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f7ff fd85 	bl	8003380 <HAL_ADC_ErrorCallback>
}
 8003876:	e004      	b.n	8003882 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	4798      	blx	r3
}
 8003882:	bf00      	nop
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003896:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f7ff fd67 	bl	800336c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2240      	movs	r2, #64	@ 0x40
 80038b8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038be:	f043 0204 	orr.w	r2, r3, #4
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f7ff fd5a 	bl	8003380 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003918 <__NVIC_SetPriorityGrouping+0x44>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038f0:	4013      	ands	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003906:	4a04      	ldr	r2, [pc, #16]	@ (8003918 <__NVIC_SetPriorityGrouping+0x44>)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	60d3      	str	r3, [r2, #12]
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003920:	4b04      	ldr	r3, [pc, #16]	@ (8003934 <__NVIC_GetPriorityGrouping+0x18>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	0a1b      	lsrs	r3, r3, #8
 8003926:	f003 0307 	and.w	r3, r3, #7
}
 800392a:	4618      	mov	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	2b00      	cmp	r3, #0
 8003948:	db0b      	blt.n	8003962 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	f003 021f 	and.w	r2, r3, #31
 8003950:	4907      	ldr	r1, [pc, #28]	@ (8003970 <__NVIC_EnableIRQ+0x38>)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	2001      	movs	r0, #1
 800395a:	fa00 f202 	lsl.w	r2, r0, r2
 800395e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	e000e100 	.word	0xe000e100

08003974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003984:	2b00      	cmp	r3, #0
 8003986:	db0a      	blt.n	800399e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	b2da      	uxtb	r2, r3
 800398c:	490c      	ldr	r1, [pc, #48]	@ (80039c0 <__NVIC_SetPriority+0x4c>)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	0112      	lsls	r2, r2, #4
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	440b      	add	r3, r1
 8003998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800399c:	e00a      	b.n	80039b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4908      	ldr	r1, [pc, #32]	@ (80039c4 <__NVIC_SetPriority+0x50>)
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	3b04      	subs	r3, #4
 80039ac:	0112      	lsls	r2, r2, #4
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	440b      	add	r3, r1
 80039b2:	761a      	strb	r2, [r3, #24]
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000e100 	.word	0xe000e100
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	@ 0x24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f1c3 0307 	rsb	r3, r3, #7
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	bf28      	it	cs
 80039e6:	2304      	movcs	r3, #4
 80039e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3304      	adds	r3, #4
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	d902      	bls.n	80039f8 <NVIC_EncodePriority+0x30>
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3b03      	subs	r3, #3
 80039f6:	e000      	b.n	80039fa <NVIC_EncodePriority+0x32>
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43da      	mvns	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a10:	f04f 31ff 	mov.w	r1, #4294967295
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	43d9      	mvns	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a20:	4313      	orrs	r3, r2
         );
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3724      	adds	r7, #36	@ 0x24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a40:	d301      	bcc.n	8003a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a42:	2301      	movs	r3, #1
 8003a44:	e00f      	b.n	8003a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a46:	4a0a      	ldr	r2, [pc, #40]	@ (8003a70 <SysTick_Config+0x40>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a4e:	210f      	movs	r1, #15
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295
 8003a54:	f7ff ff8e 	bl	8003974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a58:	4b05      	ldr	r3, [pc, #20]	@ (8003a70 <SysTick_Config+0x40>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a5e:	4b04      	ldr	r3, [pc, #16]	@ (8003a70 <SysTick_Config+0x40>)
 8003a60:	2207      	movs	r2, #7
 8003a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	e000e010 	.word	0xe000e010

08003a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff29 	bl	80038d4 <__NVIC_SetPriorityGrouping>
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b086      	sub	sp, #24
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	4603      	mov	r3, r0
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a9c:	f7ff ff3e 	bl	800391c <__NVIC_GetPriorityGrouping>
 8003aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	6978      	ldr	r0, [r7, #20]
 8003aa8:	f7ff ff8e 	bl	80039c8 <NVIC_EncodePriority>
 8003aac:	4602      	mov	r2, r0
 8003aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff5d 	bl	8003974 <__NVIC_SetPriority>
}
 8003aba:	bf00      	nop
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	4603      	mov	r3, r0
 8003aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff31 	bl	8003938 <__NVIC_EnableIRQ>
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ffa2 	bl	8003a30 <SysTick_Config>
 8003aec:	4603      	mov	r3, r0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003af6:	b480      	push	{r7}
 8003af8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b10:	f7ff fa6e 	bl	8002ff0 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e099      	b.n	8003c54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b40:	e00f      	b.n	8003b62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b42:	f7ff fa55 	bl	8002ff0 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b05      	cmp	r3, #5
 8003b4e:	d908      	bls.n	8003b62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2203      	movs	r2, #3
 8003b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e078      	b.n	8003c54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e8      	bne.n	8003b42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4b38      	ldr	r3, [pc, #224]	@ (8003c5c <HAL_DMA_Init+0x158>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d107      	bne.n	8003bcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0307 	bic.w	r3, r3, #7
 8003be2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d117      	bne.n	8003c26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00e      	beq.n	8003c26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fb01 	bl	8004210 <DMA_CheckFifoParam>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2240      	movs	r2, #64	@ 0x40
 8003c18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c22:	2301      	movs	r3, #1
 8003c24:	e016      	b.n	8003c54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fab8 	bl	80041a4 <DMA_CalcBaseAndBitshift>
 8003c34:	4603      	mov	r3, r0
 8003c36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3c:	223f      	movs	r2, #63	@ 0x3f
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	f010803f 	.word	0xf010803f

08003c60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_DMA_Start_IT+0x26>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e040      	b.n	8003d08 <HAL_DMA_Start_IT+0xa8>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d12f      	bne.n	8003cfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fa4a 	bl	8004148 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb8:	223f      	movs	r2, #63	@ 0x3f
 8003cba:	409a      	lsls	r2, r3
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0216 	orr.w	r2, r2, #22
 8003cce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d007      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0208 	orr.w	r2, r2, #8
 8003ce6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e005      	b.n	8003d06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d02:	2302      	movs	r3, #2
 8003d04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d1e:	f7ff f967 	bl	8002ff0 <HAL_GetTick>
 8003d22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d008      	beq.n	8003d42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2280      	movs	r2, #128	@ 0x80
 8003d34:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e052      	b.n	8003de8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0216 	bic.w	r2, r2, #22
 8003d50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695a      	ldr	r2, [r3, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d103      	bne.n	8003d72 <HAL_DMA_Abort+0x62>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0208 	bic.w	r2, r2, #8
 8003d80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d92:	e013      	b.n	8003dbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d94:	f7ff f92c 	bl	8002ff0 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b05      	cmp	r3, #5
 8003da0:	d90c      	bls.n	8003dbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2203      	movs	r2, #3
 8003dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e015      	b.n	8003de8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e4      	bne.n	8003d94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dce:	223f      	movs	r2, #63	@ 0x3f
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d004      	beq.n	8003e0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2280      	movs	r2, #128	@ 0x80
 8003e08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e00c      	b.n	8003e28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2205      	movs	r2, #5
 8003e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e40:	4b8e      	ldr	r3, [pc, #568]	@ (800407c <HAL_DMA_IRQHandler+0x248>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a8e      	ldr	r2, [pc, #568]	@ (8004080 <HAL_DMA_IRQHandler+0x24c>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	0a9b      	lsrs	r3, r3, #10
 8003e4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5e:	2208      	movs	r2, #8
 8003e60:	409a      	lsls	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4013      	ands	r3, r2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d01a      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0204 	bic.w	r2, r2, #4
 8003e86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e98:	f043 0201 	orr.w	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d012      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00b      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ece:	f043 0202 	orr.w	r2, r3, #2
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eda:	2204      	movs	r2, #4
 8003edc:	409a      	lsls	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d012      	beq.n	8003f0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00b      	beq.n	8003f0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef8:	2204      	movs	r2, #4
 8003efa:	409a      	lsls	r2, r3
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f04:	f043 0204 	orr.w	r2, r3, #4
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f10:	2210      	movs	r2, #16
 8003f12:	409a      	lsls	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d043      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d03c      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2e:	2210      	movs	r2, #16
 8003f30:	409a      	lsls	r2, r3
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d018      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d108      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d024      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	4798      	blx	r3
 8003f62:	e01f      	b.n	8003fa4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01b      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
 8003f74:	e016      	b.n	8003fa4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d107      	bne.n	8003f94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0208 	bic.w	r2, r2, #8
 8003f92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa8:	2220      	movs	r2, #32
 8003faa:	409a      	lsls	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 808f 	beq.w	80040d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8087 	beq.w	80040d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fca:	2220      	movs	r2, #32
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b05      	cmp	r3, #5
 8003fdc:	d136      	bne.n	800404c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0216 	bic.w	r2, r2, #22
 8003fec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ffc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d103      	bne.n	800400e <HAL_DMA_IRQHandler+0x1da>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400a:	2b00      	cmp	r3, #0
 800400c:	d007      	beq.n	800401e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0208 	bic.w	r2, r2, #8
 800401c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004022:	223f      	movs	r2, #63	@ 0x3f
 8004024:	409a      	lsls	r2, r3
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800403e:	2b00      	cmp	r3, #0
 8004040:	d07e      	beq.n	8004140 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
        }
        return;
 800404a:	e079      	b.n	8004140 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01d      	beq.n	8004096 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10d      	bne.n	8004084 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406c:	2b00      	cmp	r3, #0
 800406e:	d031      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	4798      	blx	r3
 8004078:	e02c      	b.n	80040d4 <HAL_DMA_IRQHandler+0x2a0>
 800407a:	bf00      	nop
 800407c:	20000000 	.word	0x20000000
 8004080:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d023      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4798      	blx	r3
 8004094:	e01e      	b.n	80040d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10f      	bne.n	80040c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0210 	bic.w	r2, r2, #16
 80040b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d032      	beq.n	8004142 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d022      	beq.n	800412e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2205      	movs	r2, #5
 80040ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	3301      	adds	r3, #1
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	429a      	cmp	r2, r3
 800410a:	d307      	bcc.n	800411c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f2      	bne.n	8004100 <HAL_DMA_IRQHandler+0x2cc>
 800411a:	e000      	b.n	800411e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800411c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	4798      	blx	r3
 800413e:	e000      	b.n	8004142 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004140:	bf00      	nop
    }
  }
}
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004164:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b40      	cmp	r3, #64	@ 0x40
 8004174:	d108      	bne.n	8004188 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004186:	e007      	b.n	8004198 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	60da      	str	r2, [r3, #12]
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	3b10      	subs	r3, #16
 80041b4:	4a14      	ldr	r2, [pc, #80]	@ (8004208 <DMA_CalcBaseAndBitshift+0x64>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041be:	4a13      	ldr	r2, [pc, #76]	@ (800420c <DMA_CalcBaseAndBitshift+0x68>)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d909      	bls.n	80041e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041da:	f023 0303 	bic.w	r3, r3, #3
 80041de:	1d1a      	adds	r2, r3, #4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80041e4:	e007      	b.n	80041f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041ee:	f023 0303 	bic.w	r3, r3, #3
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	aaaaaaab 	.word	0xaaaaaaab
 800420c:	08014d30 	.word	0x08014d30

08004210 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004220:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d11f      	bne.n	800426a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d856      	bhi.n	80042de <DMA_CheckFifoParam+0xce>
 8004230:	a201      	add	r2, pc, #4	@ (adr r2, 8004238 <DMA_CheckFifoParam+0x28>)
 8004232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004236:	bf00      	nop
 8004238:	08004249 	.word	0x08004249
 800423c:	0800425b 	.word	0x0800425b
 8004240:	08004249 	.word	0x08004249
 8004244:	080042df 	.word	0x080042df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d046      	beq.n	80042e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004258:	e043      	b.n	80042e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004262:	d140      	bne.n	80042e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004268:	e03d      	b.n	80042e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004272:	d121      	bne.n	80042b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b03      	cmp	r3, #3
 8004278:	d837      	bhi.n	80042ea <DMA_CheckFifoParam+0xda>
 800427a:	a201      	add	r2, pc, #4	@ (adr r2, 8004280 <DMA_CheckFifoParam+0x70>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	08004291 	.word	0x08004291
 8004284:	08004297 	.word	0x08004297
 8004288:	08004291 	.word	0x08004291
 800428c:	080042a9 	.word	0x080042a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
      break;
 8004294:	e030      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d025      	beq.n	80042ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a6:	e022      	b.n	80042ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042b0:	d11f      	bne.n	80042f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042b6:	e01c      	b.n	80042f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d903      	bls.n	80042c6 <DMA_CheckFifoParam+0xb6>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d003      	beq.n	80042cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042c4:	e018      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
      break;
 80042ca:	e015      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00e      	beq.n	80042f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
      break;
 80042dc:	e00b      	b.n	80042f6 <DMA_CheckFifoParam+0xe6>
      break;
 80042de:	bf00      	nop
 80042e0:	e00a      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042e2:	bf00      	nop
 80042e4:	e008      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042e6:	bf00      	nop
 80042e8:	e006      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042ea:	bf00      	nop
 80042ec:	e004      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042ee:	bf00      	nop
 80042f0:	e002      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80042f2:	bf00      	nop
 80042f4:	e000      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042f6:	bf00      	nop
    }
  } 
  
  return status; 
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop

08004308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004308:	b480      	push	{r7}
 800430a:	b089      	sub	sp, #36	@ 0x24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800431a:	2300      	movs	r3, #0
 800431c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	e16b      	b.n	80045fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004324:	2201      	movs	r2, #1
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4013      	ands	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	429a      	cmp	r2, r3
 800433e:	f040 815a 	bne.w	80045f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	2b01      	cmp	r3, #1
 800434c:	d005      	beq.n	800435a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004356:	2b02      	cmp	r3, #2
 8004358:	d130      	bne.n	80043bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	2203      	movs	r2, #3
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4013      	ands	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4313      	orrs	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004390:	2201      	movs	r2, #1
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 0201 	and.w	r2, r3, #1
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 0303 	and.w	r3, r3, #3
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d017      	beq.n	80043f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	2203      	movs	r2, #3
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4013      	ands	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d123      	bne.n	800444c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	08da      	lsrs	r2, r3, #3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3208      	adds	r2, #8
 800440c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	220f      	movs	r2, #15
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4013      	ands	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	08da      	lsrs	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3208      	adds	r2, #8
 8004446:	69b9      	ldr	r1, [r7, #24]
 8004448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	2203      	movs	r2, #3
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	43db      	mvns	r3, r3
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	4013      	ands	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 0203 	and.w	r2, r3, #3
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4313      	orrs	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80b4 	beq.w	80045f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	4b60      	ldr	r3, [pc, #384]	@ (8004614 <HAL_GPIO_Init+0x30c>)
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	4a5f      	ldr	r2, [pc, #380]	@ (8004614 <HAL_GPIO_Init+0x30c>)
 8004498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800449c:	6453      	str	r3, [r2, #68]	@ 0x44
 800449e:	4b5d      	ldr	r3, [pc, #372]	@ (8004614 <HAL_GPIO_Init+0x30c>)
 80044a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004618 <HAL_GPIO_Init+0x310>)
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	089b      	lsrs	r3, r3, #2
 80044b0:	3302      	adds	r3, #2
 80044b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	220f      	movs	r2, #15
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43db      	mvns	r3, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4013      	ands	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a52      	ldr	r2, [pc, #328]	@ (800461c <HAL_GPIO_Init+0x314>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d02b      	beq.n	800452e <HAL_GPIO_Init+0x226>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a51      	ldr	r2, [pc, #324]	@ (8004620 <HAL_GPIO_Init+0x318>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d025      	beq.n	800452a <HAL_GPIO_Init+0x222>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a50      	ldr	r2, [pc, #320]	@ (8004624 <HAL_GPIO_Init+0x31c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01f      	beq.n	8004526 <HAL_GPIO_Init+0x21e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a4f      	ldr	r2, [pc, #316]	@ (8004628 <HAL_GPIO_Init+0x320>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d019      	beq.n	8004522 <HAL_GPIO_Init+0x21a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a4e      	ldr	r2, [pc, #312]	@ (800462c <HAL_GPIO_Init+0x324>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_GPIO_Init+0x216>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a4d      	ldr	r2, [pc, #308]	@ (8004630 <HAL_GPIO_Init+0x328>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00d      	beq.n	800451a <HAL_GPIO_Init+0x212>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a4c      	ldr	r2, [pc, #304]	@ (8004634 <HAL_GPIO_Init+0x32c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <HAL_GPIO_Init+0x20e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a4b      	ldr	r2, [pc, #300]	@ (8004638 <HAL_GPIO_Init+0x330>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d101      	bne.n	8004512 <HAL_GPIO_Init+0x20a>
 800450e:	2307      	movs	r3, #7
 8004510:	e00e      	b.n	8004530 <HAL_GPIO_Init+0x228>
 8004512:	2308      	movs	r3, #8
 8004514:	e00c      	b.n	8004530 <HAL_GPIO_Init+0x228>
 8004516:	2306      	movs	r3, #6
 8004518:	e00a      	b.n	8004530 <HAL_GPIO_Init+0x228>
 800451a:	2305      	movs	r3, #5
 800451c:	e008      	b.n	8004530 <HAL_GPIO_Init+0x228>
 800451e:	2304      	movs	r3, #4
 8004520:	e006      	b.n	8004530 <HAL_GPIO_Init+0x228>
 8004522:	2303      	movs	r3, #3
 8004524:	e004      	b.n	8004530 <HAL_GPIO_Init+0x228>
 8004526:	2302      	movs	r3, #2
 8004528:	e002      	b.n	8004530 <HAL_GPIO_Init+0x228>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <HAL_GPIO_Init+0x228>
 800452e:	2300      	movs	r3, #0
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	f002 0203 	and.w	r2, r2, #3
 8004536:	0092      	lsls	r2, r2, #2
 8004538:	4093      	lsls	r3, r2
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4313      	orrs	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004540:	4935      	ldr	r1, [pc, #212]	@ (8004618 <HAL_GPIO_Init+0x310>)
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	089b      	lsrs	r3, r3, #2
 8004546:	3302      	adds	r3, #2
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800454e:	4b3b      	ldr	r3, [pc, #236]	@ (800463c <HAL_GPIO_Init+0x334>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	43db      	mvns	r3, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4013      	ands	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004572:	4a32      	ldr	r2, [pc, #200]	@ (800463c <HAL_GPIO_Init+0x334>)
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004578:	4b30      	ldr	r3, [pc, #192]	@ (800463c <HAL_GPIO_Init+0x334>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800459c:	4a27      	ldr	r2, [pc, #156]	@ (800463c <HAL_GPIO_Init+0x334>)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045a2:	4b26      	ldr	r3, [pc, #152]	@ (800463c <HAL_GPIO_Init+0x334>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	43db      	mvns	r3, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4013      	ands	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045c6:	4a1d      	ldr	r2, [pc, #116]	@ (800463c <HAL_GPIO_Init+0x334>)
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045cc:	4b1b      	ldr	r3, [pc, #108]	@ (800463c <HAL_GPIO_Init+0x334>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4013      	ands	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045f0:	4a12      	ldr	r2, [pc, #72]	@ (800463c <HAL_GPIO_Init+0x334>)
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3301      	adds	r3, #1
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	2b0f      	cmp	r3, #15
 8004600:	f67f ae90 	bls.w	8004324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	3724      	adds	r7, #36	@ 0x24
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800
 8004618:	40013800 	.word	0x40013800
 800461c:	40020000 	.word	0x40020000
 8004620:	40020400 	.word	0x40020400
 8004624:	40020800 	.word	0x40020800
 8004628:	40020c00 	.word	0x40020c00
 800462c:	40021000 	.word	0x40021000
 8004630:	40021400 	.word	0x40021400
 8004634:	40021800 	.word	0x40021800
 8004638:	40021c00 	.word	0x40021c00
 800463c:	40013c00 	.word	0x40013c00

08004640 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	887b      	ldrh	r3, [r7, #2]
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
 800465c:	e001      	b.n	8004662 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800465e:	2300      	movs	r3, #0
 8004660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004662:	7bfb      	ldrb	r3, [r7, #15]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	807b      	strh	r3, [r7, #2]
 800467c:	4613      	mov	r3, r2
 800467e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004680:	787b      	ldrb	r3, [r7, #1]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004686:	887a      	ldrh	r2, [r7, #2]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800468c:	e003      	b.n	8004696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800468e:	887b      	ldrh	r3, [r7, #2]
 8004690:	041a      	lsls	r2, r3, #16
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	619a      	str	r2, [r3, #24]
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046ae:	4b08      	ldr	r3, [pc, #32]	@ (80046d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d006      	beq.n	80046c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046ba:	4a05      	ldr	r2, [pc, #20]	@ (80046d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046bc:	88fb      	ldrh	r3, [r7, #6]
 80046be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fd f94a 	bl	800195c <HAL_GPIO_EXTI_Callback>
  }
}
 80046c8:	bf00      	nop
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40013c00 	.word	0x40013c00

080046d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e12b      	b.n	800493e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fe f848 	bl	8002790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2224      	movs	r2, #36	@ 0x24
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0201 	bic.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004726:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004736:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004738:	f002 f93e 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 800473c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	4a81      	ldr	r2, [pc, #516]	@ (8004948 <HAL_I2C_Init+0x274>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d807      	bhi.n	8004758 <HAL_I2C_Init+0x84>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4a80      	ldr	r2, [pc, #512]	@ (800494c <HAL_I2C_Init+0x278>)
 800474c:	4293      	cmp	r3, r2
 800474e:	bf94      	ite	ls
 8004750:	2301      	movls	r3, #1
 8004752:	2300      	movhi	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e006      	b.n	8004766 <HAL_I2C_Init+0x92>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a7d      	ldr	r2, [pc, #500]	@ (8004950 <HAL_I2C_Init+0x27c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	bf94      	ite	ls
 8004760:	2301      	movls	r3, #1
 8004762:	2300      	movhi	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e0e7      	b.n	800493e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a78      	ldr	r2, [pc, #480]	@ (8004954 <HAL_I2C_Init+0x280>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	0c9b      	lsrs	r3, r3, #18
 8004778:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4a6a      	ldr	r2, [pc, #424]	@ (8004948 <HAL_I2C_Init+0x274>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d802      	bhi.n	80047a8 <HAL_I2C_Init+0xd4>
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	3301      	adds	r3, #1
 80047a6:	e009      	b.n	80047bc <HAL_I2C_Init+0xe8>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80047ae:	fb02 f303 	mul.w	r3, r2, r3
 80047b2:	4a69      	ldr	r2, [pc, #420]	@ (8004958 <HAL_I2C_Init+0x284>)
 80047b4:	fba2 2303 	umull	r2, r3, r2, r3
 80047b8:	099b      	lsrs	r3, r3, #6
 80047ba:	3301      	adds	r3, #1
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6812      	ldr	r2, [r2, #0]
 80047c0:	430b      	orrs	r3, r1
 80047c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80047ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	495c      	ldr	r1, [pc, #368]	@ (8004948 <HAL_I2C_Init+0x274>)
 80047d8:	428b      	cmp	r3, r1
 80047da:	d819      	bhi.n	8004810 <HAL_I2C_Init+0x13c>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	1e59      	subs	r1, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ea:	1c59      	adds	r1, r3, #1
 80047ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047f0:	400b      	ands	r3, r1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_I2C_Init+0x138>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1e59      	subs	r1, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	fbb1 f3f3 	udiv	r3, r1, r3
 8004804:	3301      	adds	r3, #1
 8004806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800480a:	e051      	b.n	80048b0 <HAL_I2C_Init+0x1dc>
 800480c:	2304      	movs	r3, #4
 800480e:	e04f      	b.n	80048b0 <HAL_I2C_Init+0x1dc>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d111      	bne.n	800483c <HAL_I2C_Init+0x168>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	1e58      	subs	r0, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6859      	ldr	r1, [r3, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	440b      	add	r3, r1
 8004826:	fbb0 f3f3 	udiv	r3, r0, r3
 800482a:	3301      	adds	r3, #1
 800482c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004830:	2b00      	cmp	r3, #0
 8004832:	bf0c      	ite	eq
 8004834:	2301      	moveq	r3, #1
 8004836:	2300      	movne	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	e012      	b.n	8004862 <HAL_I2C_Init+0x18e>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	1e58      	subs	r0, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6859      	ldr	r1, [r3, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	0099      	lsls	r1, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004852:	3301      	adds	r3, #1
 8004854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004858:	2b00      	cmp	r3, #0
 800485a:	bf0c      	ite	eq
 800485c:	2301      	moveq	r3, #1
 800485e:	2300      	movne	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_I2C_Init+0x196>
 8004866:	2301      	movs	r3, #1
 8004868:	e022      	b.n	80048b0 <HAL_I2C_Init+0x1dc>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10e      	bne.n	8004890 <HAL_I2C_Init+0x1bc>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1e58      	subs	r0, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6859      	ldr	r1, [r3, #4]
 800487a:	460b      	mov	r3, r1
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	440b      	add	r3, r1
 8004880:	fbb0 f3f3 	udiv	r3, r0, r3
 8004884:	3301      	adds	r3, #1
 8004886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800488e:	e00f      	b.n	80048b0 <HAL_I2C_Init+0x1dc>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1e58      	subs	r0, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6859      	ldr	r1, [r3, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	0099      	lsls	r1, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048a6:	3301      	adds	r3, #1
 80048a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	6809      	ldr	r1, [r1, #0]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69da      	ldr	r2, [r3, #28]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6911      	ldr	r1, [r2, #16]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68d2      	ldr	r2, [r2, #12]
 80048ea:	4311      	orrs	r1, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6812      	ldr	r2, [r2, #0]
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	000186a0 	.word	0x000186a0
 800494c:	001e847f 	.word	0x001e847f
 8004950:	003d08ff 	.word	0x003d08ff
 8004954:	431bde83 	.word	0x431bde83
 8004958:	10624dd3 	.word	0x10624dd3

0800495c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	4608      	mov	r0, r1
 8004966:	4611      	mov	r1, r2
 8004968:	461a      	mov	r2, r3
 800496a:	4603      	mov	r3, r0
 800496c:	817b      	strh	r3, [r7, #10]
 800496e:	460b      	mov	r3, r1
 8004970:	813b      	strh	r3, [r7, #8]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004976:	f7fe fb3b 	bl	8002ff0 <HAL_GetTick>
 800497a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b20      	cmp	r3, #32
 8004986:	f040 80d9 	bne.w	8004b3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	2319      	movs	r3, #25
 8004990:	2201      	movs	r2, #1
 8004992:	496d      	ldr	r1, [pc, #436]	@ (8004b48 <HAL_I2C_Mem_Write+0x1ec>)
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f971 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
 80049a2:	e0cc      	b.n	8004b3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_I2C_Mem_Write+0x56>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e0c5      	b.n	8004b3e <HAL_I2C_Mem_Write+0x1e2>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d007      	beq.n	80049d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2221      	movs	r2, #33	@ 0x21
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2240      	movs	r2, #64	@ 0x40
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a3a      	ldr	r2, [r7, #32]
 8004a02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4a4d      	ldr	r2, [pc, #308]	@ (8004b4c <HAL_I2C_Mem_Write+0x1f0>)
 8004a18:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a1a:	88f8      	ldrh	r0, [r7, #6]
 8004a1c:	893a      	ldrh	r2, [r7, #8]
 8004a1e:	8979      	ldrh	r1, [r7, #10]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	9301      	str	r3, [sp, #4]
 8004a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	4603      	mov	r3, r0
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f890 	bl	8004b50 <I2C_RequestMemoryWrite>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d052      	beq.n	8004adc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e081      	b.n	8004b3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fa36 	bl	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00d      	beq.n	8004a66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d107      	bne.n	8004a62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e06b      	b.n	8004b3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6a:	781a      	ldrb	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d11b      	bne.n	8004adc <HAL_I2C_Mem_Write+0x180>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d017      	beq.n	8004adc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1aa      	bne.n	8004a3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 fa29 	bl	8004f40 <I2C_WaitOnBTFFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00d      	beq.n	8004b10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d107      	bne.n	8004b0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e016      	b.n	8004b3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e000      	b.n	8004b3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
  }
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	00100002 	.word	0x00100002
 8004b4c:	ffff0000 	.word	0xffff0000

08004b50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	817b      	strh	r3, [r7, #10]
 8004b62:	460b      	mov	r3, r1
 8004b64:	813b      	strh	r3, [r7, #8]
 8004b66:	4613      	mov	r3, r2
 8004b68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f878 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00d      	beq.n	8004bae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ba0:	d103      	bne.n	8004baa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ba8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e05f      	b.n	8004c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bae:	897b      	ldrh	r3, [r7, #10]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004bbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	6a3a      	ldr	r2, [r7, #32]
 8004bc2:	492d      	ldr	r1, [pc, #180]	@ (8004c78 <I2C_RequestMemoryWrite+0x128>)
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f8d3 	bl	8004d70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e04c      	b.n	8004c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bec:	6a39      	ldr	r1, [r7, #32]
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f95e 	bl	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00d      	beq.n	8004c16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d107      	bne.n	8004c12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e02b      	b.n	8004c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c16:	88fb      	ldrh	r3, [r7, #6]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d105      	bne.n	8004c28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c1c:	893b      	ldrh	r3, [r7, #8]
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	611a      	str	r2, [r3, #16]
 8004c26:	e021      	b.n	8004c6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c28:	893b      	ldrh	r3, [r7, #8]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c38:	6a39      	ldr	r1, [r7, #32]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f938 	bl	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00d      	beq.n	8004c62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d107      	bne.n	8004c5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e005      	b.n	8004c6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c62:	893b      	ldrh	r3, [r7, #8]
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	00010002 	.word	0x00010002

08004c7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c8c:	e048      	b.n	8004d20 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d044      	beq.n	8004d20 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c96:	f7fe f9ab 	bl	8002ff0 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d139      	bne.n	8004d20 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	0c1b      	lsrs	r3, r3, #16
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d10d      	bne.n	8004cd2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	43da      	mvns	r2, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	bf0c      	ite	eq
 8004cc8:	2301      	moveq	r3, #1
 8004cca:	2300      	movne	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	461a      	mov	r2, r3
 8004cd0:	e00c      	b.n	8004cec <I2C_WaitOnFlagUntilTimeout+0x70>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	43da      	mvns	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	bf0c      	ite	eq
 8004ce4:	2301      	moveq	r3, #1
 8004ce6:	2300      	movne	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	461a      	mov	r2, r3
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d116      	bne.n	8004d20 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0c:	f043 0220 	orr.w	r2, r3, #32
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e023      	b.n	8004d68 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	0c1b      	lsrs	r3, r3, #16
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d10d      	bne.n	8004d46 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	43da      	mvns	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4013      	ands	r3, r2
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf0c      	ite	eq
 8004d3c:	2301      	moveq	r3, #1
 8004d3e:	2300      	movne	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	461a      	mov	r2, r3
 8004d44:	e00c      	b.n	8004d60 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	43da      	mvns	r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	4013      	ands	r3, r2
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	bf0c      	ite	eq
 8004d58:	2301      	moveq	r3, #1
 8004d5a:	2300      	movne	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	461a      	mov	r2, r3
 8004d60:	79fb      	ldrb	r3, [r7, #7]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d093      	beq.n	8004c8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d7e:	e071      	b.n	8004e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d8e:	d123      	bne.n	8004dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d9e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004da8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc4:	f043 0204 	orr.w	r2, r3, #4
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e067      	b.n	8004ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dde:	d041      	beq.n	8004e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de0:	f7fe f906 	bl	8002ff0 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d302      	bcc.n	8004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d136      	bne.n	8004e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	0c1b      	lsrs	r3, r3, #16
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d10c      	bne.n	8004e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	43da      	mvns	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	bf14      	ite	ne
 8004e12:	2301      	movne	r3, #1
 8004e14:	2300      	moveq	r3, #0
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	e00b      	b.n	8004e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	43da      	mvns	r2, r3
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	4013      	ands	r3, r2
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bf14      	ite	ne
 8004e2c:	2301      	movne	r3, #1
 8004e2e:	2300      	moveq	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d016      	beq.n	8004e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e50:	f043 0220 	orr.w	r2, r3, #32
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e021      	b.n	8004ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	0c1b      	lsrs	r3, r3, #16
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d10c      	bne.n	8004e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	43da      	mvns	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bf14      	ite	ne
 8004e80:	2301      	movne	r3, #1
 8004e82:	2300      	moveq	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	e00b      	b.n	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	43da      	mvns	r2, r3
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4013      	ands	r3, r2
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	bf14      	ite	ne
 8004e9a:	2301      	movne	r3, #1
 8004e9c:	2300      	moveq	r3, #0
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f47f af6d 	bne.w	8004d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ebc:	e034      	b.n	8004f28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 f886 	bl	8004fd0 <I2C_IsAcknowledgeFailed>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e034      	b.n	8004f38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d028      	beq.n	8004f28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed6:	f7fe f88b 	bl	8002ff0 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d302      	bcc.n	8004eec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d11d      	bne.n	8004f28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef6:	2b80      	cmp	r3, #128	@ 0x80
 8004ef8:	d016      	beq.n	8004f28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f14:	f043 0220 	orr.w	r2, r3, #32
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e007      	b.n	8004f38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f32:	2b80      	cmp	r3, #128	@ 0x80
 8004f34:	d1c3      	bne.n	8004ebe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f4c:	e034      	b.n	8004fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f83e 	bl	8004fd0 <I2C_IsAcknowledgeFailed>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e034      	b.n	8004fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f64:	d028      	beq.n	8004fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f66:	f7fe f843 	bl	8002ff0 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d302      	bcc.n	8004f7c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d11d      	bne.n	8004fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d016      	beq.n	8004fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa4:	f043 0220 	orr.w	r2, r3, #32
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e007      	b.n	8004fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d1c3      	bne.n	8004f4e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fe6:	d11b      	bne.n	8005020 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ff0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	f043 0204 	orr.w	r2, r3, #4
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800502e:	b590      	push	{r4, r7, lr}
 8005030:	b08d      	sub	sp, #52	@ 0x34
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f005 ff3a 	bl	800aebe <USB_GetMode>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	f040 848c 	bne.w	800596a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f005 fe9e 	bl	800ad98 <USB_ReadInterrupts>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 8482 	beq.w	8005968 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	0a1b      	lsrs	r3, r3, #8
 800506e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f005 fe8b 	bl	800ad98 <USB_ReadInterrupts>
 8005082:	4603      	mov	r3, r0
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b02      	cmp	r3, #2
 800508a:	d107      	bne.n	800509c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f002 0202 	and.w	r2, r2, #2
 800509a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f005 fe79 	bl	800ad98 <USB_ReadInterrupts>
 80050a6:	4603      	mov	r3, r0
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	2b10      	cmp	r3, #16
 80050ae:	d161      	bne.n	8005174 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0210 	bic.w	r2, r2, #16
 80050be:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	f003 020f 	and.w	r2, r3, #15
 80050cc:	4613      	mov	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	4413      	add	r3, r2
 80050dc:	3304      	adds	r3, #4
 80050de:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	0c5b      	lsrs	r3, r3, #17
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d124      	bne.n	8005136 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d035      	beq.n	8005164 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	091b      	lsrs	r3, r3, #4
 8005100:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005106:	b29b      	uxth	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	6a38      	ldr	r0, [r7, #32]
 800510c:	f005 fcf2 	bl	800aaf4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800511c:	441a      	add	r2, r3
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	695a      	ldr	r2, [r3, #20]
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	091b      	lsrs	r3, r3, #4
 800512a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800512e:	441a      	add	r2, r3
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	615a      	str	r2, [r3, #20]
 8005134:	e016      	b.n	8005164 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	0c5b      	lsrs	r3, r3, #17
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	2b06      	cmp	r3, #6
 8005140:	d110      	bne.n	8005164 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005148:	2208      	movs	r2, #8
 800514a:	4619      	mov	r1, r3
 800514c:	6a38      	ldr	r0, [r7, #32]
 800514e:	f005 fcd1 	bl	800aaf4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	695a      	ldr	r2, [r3, #20]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	091b      	lsrs	r3, r3, #4
 800515a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800515e:	441a      	add	r2, r3
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0210 	orr.w	r2, r2, #16
 8005172:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4618      	mov	r0, r3
 800517a:	f005 fe0d 	bl	800ad98 <USB_ReadInterrupts>
 800517e:	4603      	mov	r3, r0
 8005180:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005184:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005188:	f040 80a7 	bne.w	80052da <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f005 fe12 	bl	800adbe <USB_ReadDevAllOutEpInterrupt>
 800519a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800519c:	e099      	b.n	80052d2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800519e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 808e 	beq.w	80052c6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	4611      	mov	r1, r2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f005 fe36 	bl	800ae26 <USB_ReadDevOutEPInterrupt>
 80051ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00c      	beq.n	80051e0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d2:	461a      	mov	r2, r3
 80051d4:	2301      	movs	r3, #1
 80051d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80051d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fe42 	bl	8005e64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00c      	beq.n	8005204 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051f6:	461a      	mov	r2, r3
 80051f8:	2308      	movs	r3, #8
 80051fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80051fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 ff18 	bl	8006034 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	2b00      	cmp	r3, #0
 800520c:	d008      	beq.n	8005220 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521a:	461a      	mov	r2, r3
 800521c:	2310      	movs	r3, #16
 800521e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d030      	beq.n	800528c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005232:	2b80      	cmp	r3, #128	@ 0x80
 8005234:	d109      	bne.n	800524a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005244:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005248:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800524a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800524c:	4613      	mov	r3, r2
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	4413      	add	r3, r2
 800525c:	3304      	adds	r3, #4
 800525e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	78db      	ldrb	r3, [r3, #3]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d108      	bne.n	800527a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2200      	movs	r2, #0
 800526c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	b2db      	uxtb	r3, r3
 8005272:	4619      	mov	r1, r3
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f00c fbf1 	bl	8011a5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005286:	461a      	mov	r2, r3
 8005288:	2302      	movs	r3, #2
 800528a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	d008      	beq.n	80052a8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052a2:	461a      	mov	r2, r3
 80052a4:	2320      	movs	r3, #32
 80052a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d009      	beq.n	80052c6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052be:	461a      	mov	r2, r3
 80052c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	3301      	adds	r3, #1
 80052ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80052cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80052d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f47f af62 	bne.w	800519e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f005 fd5a 	bl	800ad98 <USB_ReadInterrupts>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052ee:	f040 80db 	bne.w	80054a8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f005 fd7b 	bl	800adf2 <USB_ReadDevAllInEpInterrupt>
 80052fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005302:	e0cd      	b.n	80054a0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 80c2 	beq.w	8005494 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	4611      	mov	r1, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f005 fda1 	bl	800ae62 <USB_ReadDevInEPInterrupt>
 8005320:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d057      	beq.n	80053dc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	2201      	movs	r2, #1
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005340:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	43db      	mvns	r3, r3
 8005346:	69f9      	ldr	r1, [r7, #28]
 8005348:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800534c:	4013      	ands	r3, r2
 800534e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800535c:	461a      	mov	r2, r3
 800535e:	2301      	movs	r3, #1
 8005360:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	799b      	ldrb	r3, [r3, #6]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d132      	bne.n	80053d0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800536e:	4613      	mov	r3, r2
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	3320      	adds	r3, #32
 800537a:	6819      	ldr	r1, [r3, #0]
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005380:	4613      	mov	r3, r2
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4403      	add	r3, r0
 800538a:	331c      	adds	r3, #28
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4419      	add	r1, r3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005394:	4613      	mov	r3, r2
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4403      	add	r3, r0
 800539e:	3320      	adds	r3, #32
 80053a0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d113      	bne.n	80053d0 <HAL_PCD_IRQHandler+0x3a2>
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ac:	4613      	mov	r3, r2
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	3324      	adds	r3, #36	@ 0x24
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d108      	bne.n	80053d0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80053c8:	461a      	mov	r2, r3
 80053ca:	2101      	movs	r1, #1
 80053cc:	f005 fda8 	bl	800af20 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f00c fabb 	bl	8011952 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d008      	beq.n	80053f8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f2:	461a      	mov	r2, r3
 80053f4:	2308      	movs	r3, #8
 80053f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d008      	beq.n	8005414 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800540e:	461a      	mov	r2, r3
 8005410:	2310      	movs	r3, #16
 8005412:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d008      	beq.n	8005430 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800542a:	461a      	mov	r2, r3
 800542c:	2340      	movs	r3, #64	@ 0x40
 800542e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d023      	beq.n	8005482 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800543a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800543c:	6a38      	ldr	r0, [r7, #32]
 800543e:	f004 fef5 	bl	800a22c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	3310      	adds	r3, #16
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	4413      	add	r3, r2
 8005452:	3304      	adds	r3, #4
 8005454:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	78db      	ldrb	r3, [r3, #3]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d108      	bne.n	8005470 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2200      	movs	r2, #0
 8005462:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005466:	b2db      	uxtb	r3, r3
 8005468:	4619      	mov	r1, r3
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f00c fb08 	bl	8011a80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800547c:	461a      	mov	r2, r3
 800547e:	2302      	movs	r3, #2
 8005480:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800548c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fc5b 	bl	8005d4a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005496:	3301      	adds	r3, #1
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800549a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549c:	085b      	lsrs	r3, r3, #1
 800549e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80054a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f47f af2e 	bne.w	8005304 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f005 fc73 	bl	800ad98 <USB_ReadInterrupts>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054bc:	d122      	bne.n	8005504 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054cc:	f023 0301 	bic.w	r3, r3, #1
 80054d0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d108      	bne.n	80054ee <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80054e4:	2100      	movs	r1, #0
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fdea 	bl	80060c0 <HAL_PCDEx_LPM_Callback>
 80054ec:	e002      	b.n	80054f4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f00c faa6 	bl	8011a40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695a      	ldr	r2, [r3, #20]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005502:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f005 fc45 	bl	800ad98 <USB_ReadInterrupts>
 800550e:	4603      	mov	r3, r0
 8005510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005518:	d112      	bne.n	8005540 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b01      	cmp	r3, #1
 8005528:	d102      	bne.n	8005530 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f00c fa62 	bl	80119f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695a      	ldr	r2, [r3, #20]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800553e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4618      	mov	r0, r3
 8005546:	f005 fc27 	bl	800ad98 <USB_ReadInterrupts>
 800554a:	4603      	mov	r3, r0
 800554c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005554:	f040 80b7 	bne.w	80056c6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	69fa      	ldr	r2, [r7, #28]
 8005562:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005566:	f023 0301 	bic.w	r3, r3, #1
 800556a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2110      	movs	r1, #16
 8005572:	4618      	mov	r0, r3
 8005574:	f004 fe5a 	bl	800a22c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005578:	2300      	movs	r3, #0
 800557a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800557c:	e046      	b.n	800560c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800557e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800558a:	461a      	mov	r2, r3
 800558c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005590:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055a2:	0151      	lsls	r1, r2, #5
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	440a      	add	r2, r1
 80055a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80055b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055be:	461a      	mov	r2, r3
 80055c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055c4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055f6:	0151      	lsls	r1, r2, #5
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	440a      	add	r2, r1
 80055fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005600:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005604:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005608:	3301      	adds	r3, #1
 800560a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	791b      	ldrb	r3, [r3, #4]
 8005610:	461a      	mov	r2, r3
 8005612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005614:	4293      	cmp	r3, r2
 8005616:	d3b2      	bcc.n	800557e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	69fa      	ldr	r2, [r7, #28]
 8005622:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005626:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800562a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	7bdb      	ldrb	r3, [r3, #15]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d016      	beq.n	8005662 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800563a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005644:	f043 030b 	orr.w	r3, r3, #11
 8005648:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800565a:	f043 030b 	orr.w	r3, r3, #11
 800565e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005660:	e015      	b.n	800568e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005670:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005674:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005678:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005688:	f043 030b 	orr.w	r3, r3, #11
 800568c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800569c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80056a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056b0:	461a      	mov	r2, r3
 80056b2:	f005 fc35 	bl	800af20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695a      	ldr	r2, [r3, #20]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80056c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f005 fb64 	bl	800ad98 <USB_ReadInterrupts>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056da:	d123      	bne.n	8005724 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f005 fbfa 	bl	800aeda <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f004 fdd0 	bl	800a290 <USB_GetDevSpeed>
 80056f0:	4603      	mov	r3, r0
 80056f2:	461a      	mov	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681c      	ldr	r4, [r3, #0]
 80056fc:	f001 f950 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 8005700:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005706:	461a      	mov	r2, r3
 8005708:	4620      	mov	r0, r4
 800570a:	f004 fced 	bl	800a0e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f00c f947 	bl	80119a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695a      	ldr	r2, [r3, #20]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005722:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f005 fb35 	bl	800ad98 <USB_ReadInterrupts>
 800572e:	4603      	mov	r3, r0
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b08      	cmp	r3, #8
 8005736:	d10a      	bne.n	800574e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f00c f924 	bl	8011986 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695a      	ldr	r2, [r3, #20]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f002 0208 	and.w	r2, r2, #8
 800574c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f005 fb20 	bl	800ad98 <USB_ReadInterrupts>
 8005758:	4603      	mov	r3, r0
 800575a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800575e:	2b80      	cmp	r3, #128	@ 0x80
 8005760:	d123      	bne.n	80057aa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800576e:	2301      	movs	r3, #1
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
 8005772:	e014      	b.n	800579e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005778:	4613      	mov	r3, r2
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d105      	bne.n	8005798 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	b2db      	uxtb	r3, r3
 8005790:	4619      	mov	r1, r3
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 faa8 	bl	8005ce8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579a:	3301      	adds	r3, #1
 800579c:	627b      	str	r3, [r7, #36]	@ 0x24
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	791b      	ldrb	r3, [r3, #4]
 80057a2:	461a      	mov	r2, r3
 80057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d3e4      	bcc.n	8005774 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f005 faf2 	bl	800ad98 <USB_ReadInterrupts>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057be:	d13c      	bne.n	800583a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057c0:	2301      	movs	r3, #1
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c4:	e02b      	b.n	800581e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057da:	4613      	mov	r3, r2
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	3318      	adds	r3, #24
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d115      	bne.n	8005818 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80057ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	da12      	bge.n	8005818 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f6:	4613      	mov	r3, r2
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	440b      	add	r3, r1
 8005800:	3317      	adds	r3, #23
 8005802:	2201      	movs	r2, #1
 8005804:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	b2db      	uxtb	r3, r3
 800580a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800580e:	b2db      	uxtb	r3, r3
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fa68 	bl	8005ce8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581a:	3301      	adds	r3, #1
 800581c:	627b      	str	r3, [r7, #36]	@ 0x24
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	791b      	ldrb	r3, [r3, #4]
 8005822:	461a      	mov	r2, r3
 8005824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005826:	4293      	cmp	r3, r2
 8005828:	d3cd      	bcc.n	80057c6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695a      	ldr	r2, [r3, #20]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005838:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f005 faaa 	bl	800ad98 <USB_ReadInterrupts>
 8005844:	4603      	mov	r3, r0
 8005846:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800584a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800584e:	d156      	bne.n	80058fe <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005850:	2301      	movs	r3, #1
 8005852:	627b      	str	r3, [r7, #36]	@ 0x24
 8005854:	e045      	b.n	80058e2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800586a:	4613      	mov	r3, r2
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	440b      	add	r3, r1
 8005874:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d12e      	bne.n	80058dc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800587e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005880:	2b00      	cmp	r3, #0
 8005882:	da2b      	bge.n	80058dc <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	0c1a      	lsrs	r2, r3, #16
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800588e:	4053      	eors	r3, r2
 8005890:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005894:	2b00      	cmp	r3, #0
 8005896:	d121      	bne.n	80058dc <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800589c:	4613      	mov	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80058aa:	2201      	movs	r2, #1
 80058ac:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058d8:	6053      	str	r3, [r2, #4]
            break;
 80058da:	e008      	b.n	80058ee <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	3301      	adds	r3, #1
 80058e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	791b      	ldrb	r3, [r3, #4]
 80058e6:	461a      	mov	r2, r3
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d3b3      	bcc.n	8005856 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695a      	ldr	r2, [r3, #20]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80058fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f005 fa48 	bl	800ad98 <USB_ReadInterrupts>
 8005908:	4603      	mov	r3, r0
 800590a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800590e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005912:	d10a      	bne.n	800592a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f00c f8c5 	bl	8011aa4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695a      	ldr	r2, [r3, #20]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005928:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f005 fa32 	bl	800ad98 <USB_ReadInterrupts>
 8005934:	4603      	mov	r3, r0
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b04      	cmp	r3, #4
 800593c:	d115      	bne.n	800596a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f00c f8b5 	bl	8011ac0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6859      	ldr	r1, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	430a      	orrs	r2, r1
 8005964:	605a      	str	r2, [r3, #4]
 8005966:	e000      	b.n	800596a <HAL_PCD_IRQHandler+0x93c>
      return;
 8005968:	bf00      	nop
    }
  }
}
 800596a:	3734      	adds	r7, #52	@ 0x34
 800596c:	46bd      	mov	sp, r7
 800596e:	bd90      	pop	{r4, r7, pc}

08005970 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <HAL_PCD_SetAddress+0x1a>
 8005986:	2302      	movs	r3, #2
 8005988:	e012      	b.n	80059b0 <HAL_PCD_SetAddress+0x40>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	78fa      	ldrb	r2, [r7, #3]
 8005996:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	78fa      	ldrb	r2, [r7, #3]
 800599e:	4611      	mov	r1, r2
 80059a0:	4618      	mov	r0, r3
 80059a2:	f005 f9d3 	bl	800ad4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	4608      	mov	r0, r1
 80059c2:	4611      	mov	r1, r2
 80059c4:	461a      	mov	r2, r3
 80059c6:	4603      	mov	r3, r0
 80059c8:	70fb      	strb	r3, [r7, #3]
 80059ca:	460b      	mov	r3, r1
 80059cc:	803b      	strh	r3, [r7, #0]
 80059ce:	4613      	mov	r3, r2
 80059d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	da0f      	bge.n	80059fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	f003 020f 	and.w	r2, r3, #15
 80059e4:	4613      	mov	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	4413      	add	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	3310      	adds	r3, #16
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	4413      	add	r3, r2
 80059f2:	3304      	adds	r3, #4
 80059f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2201      	movs	r2, #1
 80059fa:	705a      	strb	r2, [r3, #1]
 80059fc:	e00f      	b.n	8005a1e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	f003 020f 	and.w	r2, r3, #15
 8005a04:	4613      	mov	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	4413      	add	r3, r2
 8005a14:	3304      	adds	r3, #4
 8005a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005a2a:	883b      	ldrh	r3, [r7, #0]
 8005a2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	78ba      	ldrb	r2, [r7, #2]
 8005a38:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	785b      	ldrb	r3, [r3, #1]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d004      	beq.n	8005a4c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a4c:	78bb      	ldrb	r3, [r7, #2]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d102      	bne.n	8005a58 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_PCD_EP_Open+0xae>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e00e      	b.n	8005a84 <HAL_PCD_EP_Open+0xcc>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68f9      	ldr	r1, [r7, #12]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f004 fc30 	bl	800a2da <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005a82:	7afb      	ldrb	r3, [r7, #11]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	607a      	str	r2, [r7, #4]
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a9c:	7afb      	ldrb	r3, [r7, #11]
 8005a9e:	f003 020f 	and.w	r2, r3, #15
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2200      	movs	r2, #0
 8005acc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ace:	7afb      	ldrb	r3, [r7, #11]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	799b      	ldrb	r3, [r3, #6]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d102      	bne.n	8005ae8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	799b      	ldrb	r3, [r3, #6]
 8005af0:	461a      	mov	r2, r3
 8005af2:	6979      	ldr	r1, [r7, #20]
 8005af4:	f004 fc78 	bl	800a3e8 <USB_EPStartXfer>

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b086      	sub	sp, #24
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b12:	7afb      	ldrb	r3, [r7, #11]
 8005b14:	f003 020f 	and.w	r2, r3, #15
 8005b18:	4613      	mov	r3, r2
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	3310      	adds	r3, #16
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4413      	add	r3, r2
 8005b26:	3304      	adds	r3, #4
 8005b28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b42:	7afb      	ldrb	r3, [r7, #11]
 8005b44:	f003 030f 	and.w	r3, r3, #15
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	799b      	ldrb	r3, [r3, #6]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d102      	bne.n	8005b5c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6818      	ldr	r0, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	799b      	ldrb	r3, [r3, #6]
 8005b64:	461a      	mov	r2, r3
 8005b66:	6979      	ldr	r1, [r7, #20]
 8005b68:	f004 fc3e 	bl	800a3e8 <USB_EPStartXfer>

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	7912      	ldrb	r2, [r2, #4]
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d901      	bls.n	8005b94 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e04f      	b.n	8005c34 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	da0f      	bge.n	8005bbc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	f003 020f 	and.w	r2, r3, #15
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	3310      	adds	r3, #16
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	4413      	add	r3, r2
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	705a      	strb	r2, [r3, #1]
 8005bba:	e00d      	b.n	8005bd8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005bbc:	78fa      	ldrb	r2, [r7, #3]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	4413      	add	r3, r2
 8005bce:	3304      	adds	r3, #4
 8005bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_PCD_EP_SetStall+0x82>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e01d      	b.n	8005c34 <HAL_PCD_EP_SetStall+0xbe>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68f9      	ldr	r1, [r7, #12]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f004 ffcc 	bl	800aba4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c0c:	78fb      	ldrb	r3, [r7, #3]
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6818      	ldr	r0, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	7999      	ldrb	r1, [r3, #6]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c24:	461a      	mov	r2, r3
 8005c26:	f005 f97b 	bl	800af20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005c48:	78fb      	ldrb	r3, [r7, #3]
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	7912      	ldrb	r2, [r2, #4]
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d901      	bls.n	8005c5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e042      	b.n	8005ce0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	da0f      	bge.n	8005c82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	f003 020f 	and.w	r2, r3, #15
 8005c68:	4613      	mov	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	3310      	adds	r3, #16
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	4413      	add	r3, r2
 8005c76:	3304      	adds	r3, #4
 8005c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	705a      	strb	r2, [r3, #1]
 8005c80:	e00f      	b.n	8005ca2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	f003 020f 	and.w	r2, r3, #15
 8005c88:	4613      	mov	r3, r2
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	4413      	add	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	4413      	add	r3, r2
 8005c98:	3304      	adds	r3, #4
 8005c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_PCD_EP_ClrStall+0x86>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e00e      	b.n	8005ce0 <HAL_PCD_EP_ClrStall+0xa4>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68f9      	ldr	r1, [r7, #12]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f004 ffd5 	bl	800ac80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005cf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	da0c      	bge.n	8005d16 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	f003 020f 	and.w	r2, r3, #15
 8005d02:	4613      	mov	r3, r2
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	3310      	adds	r3, #16
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	4413      	add	r3, r2
 8005d10:	3304      	adds	r3, #4
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	e00c      	b.n	8005d30 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d16:	78fb      	ldrb	r3, [r7, #3]
 8005d18:	f003 020f 	and.w	r2, r3, #15
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	4413      	add	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68f9      	ldr	r1, [r7, #12]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f004 fdf4 	bl	800a924 <USB_EPStopXfer>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005d40:	7afb      	ldrb	r3, [r7, #11]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b08a      	sub	sp, #40	@ 0x28
 8005d4e:	af02      	add	r7, sp, #8
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	4613      	mov	r3, r2
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	3310      	adds	r3, #16
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	3304      	adds	r3, #4
 8005d70:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	695a      	ldr	r2, [r3, #20]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d901      	bls.n	8005d82 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e06b      	b.n	8005e5a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	69fa      	ldr	r2, [r7, #28]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d902      	bls.n	8005d9e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	3303      	adds	r3, #3
 8005da2:	089b      	lsrs	r3, r3, #2
 8005da4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005da6:	e02a      	b.n	8005dfe <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d902      	bls.n	8005dc4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	3303      	adds	r3, #3
 8005dc8:	089b      	lsrs	r3, r3, #2
 8005dca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	68d9      	ldr	r1, [r3, #12]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	4603      	mov	r3, r0
 8005de0:	6978      	ldr	r0, [r7, #20]
 8005de2:	f004 fe49 	bl	800aa78 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	441a      	add	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	695a      	ldr	r2, [r3, #20]
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	441a      	add	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d809      	bhi.n	8005e28 <PCD_WriteEmptyTxFifo+0xde>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	695a      	ldr	r2, [r3, #20]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d203      	bcs.n	8005e28 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1bf      	bne.n	8005da8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d811      	bhi.n	8005e58 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	6939      	ldr	r1, [r7, #16]
 8005e50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e54:	4013      	ands	r3, r2
 8005e56:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3720      	adds	r7, #32
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	333c      	adds	r3, #60	@ 0x3c
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	799b      	ldrb	r3, [r3, #6]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d17b      	bne.n	8005f92 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d015      	beq.n	8005ed0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	4a61      	ldr	r2, [pc, #388]	@ (800602c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	f240 80b9 	bls.w	8006020 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 80b3 	beq.w	8006020 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ecc:	6093      	str	r3, [r2, #8]
 8005ece:	e0a7      	b.n	8006020 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	2320      	movs	r3, #32
 8005eea:	6093      	str	r3, [r2, #8]
 8005eec:	e098      	b.n	8006020 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f040 8093 	bne.w	8006020 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	4a4b      	ldr	r2, [pc, #300]	@ (800602c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d90f      	bls.n	8005f22 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f1e:	6093      	str	r3, [r2, #8]
 8005f20:	e07e      	b.n	8006020 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	4613      	mov	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	4413      	add	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	4413      	add	r3, r2
 8005f34:	3304      	adds	r3, #4
 8005f36:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a1a      	ldr	r2, [r3, #32]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	0159      	lsls	r1, r3, #5
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	440b      	add	r3, r1
 8005f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f4e:	1ad2      	subs	r2, r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d114      	bne.n	8005f84 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	2101      	movs	r1, #1
 8005f70:	f004 ffd6 	bl	800af20 <USB_EP0_OutStart>
 8005f74:	e006      	b.n	8005f84 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	441a      	add	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f00b fcc6 	bl	801191c <HAL_PCD_DataOutStageCallback>
 8005f90:	e046      	b.n	8006020 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	4a26      	ldr	r2, [pc, #152]	@ (8006030 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d124      	bne.n	8005fe4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fb6:	6093      	str	r3, [r2, #8]
 8005fb8:	e032      	b.n	8006020 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f003 0320 	and.w	r3, r3, #32
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d008      	beq.n	8005fd6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	2320      	movs	r3, #32
 8005fd4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f00b fc9d 	bl	801191c <HAL_PCD_DataOutStageCallback>
 8005fe2:	e01d      	b.n	8006020 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d114      	bne.n	8006014 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	440b      	add	r3, r1
 8005ff8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d108      	bne.n	8006014 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800600c:	461a      	mov	r2, r3
 800600e:	2100      	movs	r1, #0
 8006010:	f004 ff86 	bl	800af20 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	b2db      	uxtb	r3, r3
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f00b fc7e 	bl	801191c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3720      	adds	r7, #32
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	4f54300a 	.word	0x4f54300a
 8006030:	4f54310a 	.word	0x4f54310a

08006034 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	333c      	adds	r3, #60	@ 0x3c
 800604c:	3304      	adds	r3, #4
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4a15      	ldr	r2, [pc, #84]	@ (80060bc <PCD_EP_OutSetupPacket_int+0x88>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d90e      	bls.n	8006088 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006080:	461a      	mov	r2, r3
 8006082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006086:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f00b fc35 	bl	80118f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4a0a      	ldr	r2, [pc, #40]	@ (80060bc <PCD_EP_OutSetupPacket_int+0x88>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d90c      	bls.n	80060b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	799b      	ldrb	r3, [r3, #6]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d108      	bne.n	80060b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80060a8:	461a      	mov	r2, r3
 80060aa:	2101      	movs	r1, #1
 80060ac:	f004 ff38 	bl	800af20 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	4f54300a 	.word	0x4f54300a

080060c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e267      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d075      	beq.n	80061e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80060f6:	4b88      	ldr	r3, [pc, #544]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 030c 	and.w	r3, r3, #12
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d00c      	beq.n	800611c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006102:	4b85      	ldr	r3, [pc, #532]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800610a:	2b08      	cmp	r3, #8
 800610c:	d112      	bne.n	8006134 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800610e:	4b82      	ldr	r3, [pc, #520]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006116:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800611a:	d10b      	bne.n	8006134 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800611c:	4b7e      	ldr	r3, [pc, #504]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d05b      	beq.n	80061e0 <HAL_RCC_OscConfig+0x108>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d157      	bne.n	80061e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e242      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800613c:	d106      	bne.n	800614c <HAL_RCC_OscConfig+0x74>
 800613e:	4b76      	ldr	r3, [pc, #472]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a75      	ldr	r2, [pc, #468]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 8006144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	e01d      	b.n	8006188 <HAL_RCC_OscConfig+0xb0>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006154:	d10c      	bne.n	8006170 <HAL_RCC_OscConfig+0x98>
 8006156:	4b70      	ldr	r3, [pc, #448]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a6f      	ldr	r2, [pc, #444]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 800615c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006160:	6013      	str	r3, [r2, #0]
 8006162:	4b6d      	ldr	r3, [pc, #436]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a6c      	ldr	r2, [pc, #432]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 8006168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	e00b      	b.n	8006188 <HAL_RCC_OscConfig+0xb0>
 8006170:	4b69      	ldr	r3, [pc, #420]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a68      	ldr	r2, [pc, #416]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 8006176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	4b66      	ldr	r3, [pc, #408]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a65      	ldr	r2, [pc, #404]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 8006182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d013      	beq.n	80061b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006190:	f7fc ff2e 	bl	8002ff0 <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006198:	f7fc ff2a 	bl	8002ff0 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b64      	cmp	r3, #100	@ 0x64
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e207      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061aa:	4b5b      	ldr	r3, [pc, #364]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f0      	beq.n	8006198 <HAL_RCC_OscConfig+0xc0>
 80061b6:	e014      	b.n	80061e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b8:	f7fc ff1a 	bl	8002ff0 <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061c0:	f7fc ff16 	bl	8002ff0 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b64      	cmp	r3, #100	@ 0x64
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e1f3      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061d2:	4b51      	ldr	r3, [pc, #324]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1f0      	bne.n	80061c0 <HAL_RCC_OscConfig+0xe8>
 80061de:	e000      	b.n	80061e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d063      	beq.n	80062b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80061ee:	4b4a      	ldr	r3, [pc, #296]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 030c 	and.w	r3, r3, #12
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00b      	beq.n	8006212 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061fa:	4b47      	ldr	r3, [pc, #284]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006202:	2b08      	cmp	r3, #8
 8006204:	d11c      	bne.n	8006240 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006206:	4b44      	ldr	r3, [pc, #272]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d116      	bne.n	8006240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006212:	4b41      	ldr	r3, [pc, #260]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <HAL_RCC_OscConfig+0x152>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d001      	beq.n	800622a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e1c7      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800622a:	4b3b      	ldr	r3, [pc, #236]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	4937      	ldr	r1, [pc, #220]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 800623a:	4313      	orrs	r3, r2
 800623c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800623e:	e03a      	b.n	80062b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d020      	beq.n	800628a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006248:	4b34      	ldr	r3, [pc, #208]	@ (800631c <HAL_RCC_OscConfig+0x244>)
 800624a:	2201      	movs	r2, #1
 800624c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800624e:	f7fc fecf 	bl	8002ff0 <HAL_GetTick>
 8006252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006256:	f7fc fecb 	bl	8002ff0 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e1a8      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006268:	4b2b      	ldr	r3, [pc, #172]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0f0      	beq.n	8006256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006274:	4b28      	ldr	r3, [pc, #160]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	4925      	ldr	r1, [pc, #148]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 8006284:	4313      	orrs	r3, r2
 8006286:	600b      	str	r3, [r1, #0]
 8006288:	e015      	b.n	80062b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800628a:	4b24      	ldr	r3, [pc, #144]	@ (800631c <HAL_RCC_OscConfig+0x244>)
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006290:	f7fc feae 	bl	8002ff0 <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006298:	f7fc feaa 	bl	8002ff0 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e187      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1f0      	bne.n	8006298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d036      	beq.n	8006330 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d016      	beq.n	80062f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ca:	4b15      	ldr	r3, [pc, #84]	@ (8006320 <HAL_RCC_OscConfig+0x248>)
 80062cc:	2201      	movs	r2, #1
 80062ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d0:	f7fc fe8e 	bl	8002ff0 <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062d8:	f7fc fe8a 	bl	8002ff0 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e167      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006318 <HAL_RCC_OscConfig+0x240>)
 80062ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0f0      	beq.n	80062d8 <HAL_RCC_OscConfig+0x200>
 80062f6:	e01b      	b.n	8006330 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062f8:	4b09      	ldr	r3, [pc, #36]	@ (8006320 <HAL_RCC_OscConfig+0x248>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062fe:	f7fc fe77 	bl	8002ff0 <HAL_GetTick>
 8006302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006304:	e00e      	b.n	8006324 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006306:	f7fc fe73 	bl	8002ff0 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d907      	bls.n	8006324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e150      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
 8006318:	40023800 	.word	0x40023800
 800631c:	42470000 	.word	0x42470000
 8006320:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006324:	4b88      	ldr	r3, [pc, #544]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 8006326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1ea      	bne.n	8006306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0304 	and.w	r3, r3, #4
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 8097 	beq.w	800646c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800633e:	2300      	movs	r3, #0
 8006340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006342:	4b81      	ldr	r3, [pc, #516]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 8006344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10f      	bne.n	800636e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800634e:	2300      	movs	r3, #0
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	4b7d      	ldr	r3, [pc, #500]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 8006354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006356:	4a7c      	ldr	r2, [pc, #496]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 8006358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800635c:	6413      	str	r3, [r2, #64]	@ 0x40
 800635e:	4b7a      	ldr	r3, [pc, #488]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 8006360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006366:	60bb      	str	r3, [r7, #8]
 8006368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800636a:	2301      	movs	r3, #1
 800636c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800636e:	4b77      	ldr	r3, [pc, #476]	@ (800654c <HAL_RCC_OscConfig+0x474>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006376:	2b00      	cmp	r3, #0
 8006378:	d118      	bne.n	80063ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800637a:	4b74      	ldr	r3, [pc, #464]	@ (800654c <HAL_RCC_OscConfig+0x474>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a73      	ldr	r2, [pc, #460]	@ (800654c <HAL_RCC_OscConfig+0x474>)
 8006380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006386:	f7fc fe33 	bl	8002ff0 <HAL_GetTick>
 800638a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800638c:	e008      	b.n	80063a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800638e:	f7fc fe2f 	bl	8002ff0 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d901      	bls.n	80063a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e10c      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063a0:	4b6a      	ldr	r3, [pc, #424]	@ (800654c <HAL_RCC_OscConfig+0x474>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0f0      	beq.n	800638e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d106      	bne.n	80063c2 <HAL_RCC_OscConfig+0x2ea>
 80063b4:	4b64      	ldr	r3, [pc, #400]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 80063b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b8:	4a63      	ldr	r2, [pc, #396]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	6713      	str	r3, [r2, #112]	@ 0x70
 80063c0:	e01c      	b.n	80063fc <HAL_RCC_OscConfig+0x324>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	2b05      	cmp	r3, #5
 80063c8:	d10c      	bne.n	80063e4 <HAL_RCC_OscConfig+0x30c>
 80063ca:	4b5f      	ldr	r3, [pc, #380]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 80063cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ce:	4a5e      	ldr	r2, [pc, #376]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 80063d0:	f043 0304 	orr.w	r3, r3, #4
 80063d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80063d6:	4b5c      	ldr	r3, [pc, #368]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 80063d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063da:	4a5b      	ldr	r2, [pc, #364]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80063e2:	e00b      	b.n	80063fc <HAL_RCC_OscConfig+0x324>
 80063e4:	4b58      	ldr	r3, [pc, #352]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 80063e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e8:	4a57      	ldr	r2, [pc, #348]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 80063ea:	f023 0301 	bic.w	r3, r3, #1
 80063ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80063f0:	4b55      	ldr	r3, [pc, #340]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 80063f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f4:	4a54      	ldr	r2, [pc, #336]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 80063f6:	f023 0304 	bic.w	r3, r3, #4
 80063fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d015      	beq.n	8006430 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006404:	f7fc fdf4 	bl	8002ff0 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800640a:	e00a      	b.n	8006422 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800640c:	f7fc fdf0 	bl	8002ff0 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800641a:	4293      	cmp	r3, r2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e0cb      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006422:	4b49      	ldr	r3, [pc, #292]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 8006424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0ee      	beq.n	800640c <HAL_RCC_OscConfig+0x334>
 800642e:	e014      	b.n	800645a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006430:	f7fc fdde 	bl	8002ff0 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006436:	e00a      	b.n	800644e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006438:	f7fc fdda 	bl	8002ff0 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006446:	4293      	cmp	r3, r2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e0b5      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800644e:	4b3e      	ldr	r3, [pc, #248]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 8006450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1ee      	bne.n	8006438 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800645a:	7dfb      	ldrb	r3, [r7, #23]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d105      	bne.n	800646c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006460:	4b39      	ldr	r3, [pc, #228]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 8006462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006464:	4a38      	ldr	r2, [pc, #224]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 8006466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800646a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 80a1 	beq.w	80065b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006476:	4b34      	ldr	r3, [pc, #208]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 030c 	and.w	r3, r3, #12
 800647e:	2b08      	cmp	r3, #8
 8006480:	d05c      	beq.n	800653c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d141      	bne.n	800650e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800648a:	4b31      	ldr	r3, [pc, #196]	@ (8006550 <HAL_RCC_OscConfig+0x478>)
 800648c:	2200      	movs	r2, #0
 800648e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006490:	f7fc fdae 	bl	8002ff0 <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006498:	f7fc fdaa 	bl	8002ff0 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e087      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064aa:	4b27      	ldr	r3, [pc, #156]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f0      	bne.n	8006498 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69da      	ldr	r2, [r3, #28]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c4:	019b      	lsls	r3, r3, #6
 80064c6:	431a      	orrs	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	3b01      	subs	r3, #1
 80064d0:	041b      	lsls	r3, r3, #16
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d8:	061b      	lsls	r3, r3, #24
 80064da:	491b      	ldr	r1, [pc, #108]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006550 <HAL_RCC_OscConfig+0x478>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e6:	f7fc fd83 	bl	8002ff0 <HAL_GetTick>
 80064ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ec:	e008      	b.n	8006500 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ee:	f7fc fd7f 	bl	8002ff0 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d901      	bls.n	8006500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e05c      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006500:	4b11      	ldr	r3, [pc, #68]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0f0      	beq.n	80064ee <HAL_RCC_OscConfig+0x416>
 800650c:	e054      	b.n	80065b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800650e:	4b10      	ldr	r3, [pc, #64]	@ (8006550 <HAL_RCC_OscConfig+0x478>)
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006514:	f7fc fd6c 	bl	8002ff0 <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800651c:	f7fc fd68 	bl	8002ff0 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e045      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800652e:	4b06      	ldr	r3, [pc, #24]	@ (8006548 <HAL_RCC_OscConfig+0x470>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1f0      	bne.n	800651c <HAL_RCC_OscConfig+0x444>
 800653a:	e03d      	b.n	80065b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d107      	bne.n	8006554 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e038      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
 8006548:	40023800 	.word	0x40023800
 800654c:	40007000 	.word	0x40007000
 8006550:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006554:	4b1b      	ldr	r3, [pc, #108]	@ (80065c4 <HAL_RCC_OscConfig+0x4ec>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d028      	beq.n	80065b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800656c:	429a      	cmp	r2, r3
 800656e:	d121      	bne.n	80065b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800657a:	429a      	cmp	r2, r3
 800657c:	d11a      	bne.n	80065b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006584:	4013      	ands	r3, r2
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800658a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800658c:	4293      	cmp	r3, r2
 800658e:	d111      	bne.n	80065b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659a:	085b      	lsrs	r3, r3, #1
 800659c:	3b01      	subs	r3, #1
 800659e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d107      	bne.n	80065b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d001      	beq.n	80065b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	40023800 	.word	0x40023800

080065c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e0cc      	b.n	8006776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065dc:	4b68      	ldr	r3, [pc, #416]	@ (8006780 <HAL_RCC_ClockConfig+0x1b8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0307 	and.w	r3, r3, #7
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d90c      	bls.n	8006604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ea:	4b65      	ldr	r3, [pc, #404]	@ (8006780 <HAL_RCC_ClockConfig+0x1b8>)
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065f2:	4b63      	ldr	r3, [pc, #396]	@ (8006780 <HAL_RCC_ClockConfig+0x1b8>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d001      	beq.n	8006604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e0b8      	b.n	8006776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d020      	beq.n	8006652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	d005      	beq.n	8006628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800661c:	4b59      	ldr	r3, [pc, #356]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	4a58      	ldr	r2, [pc, #352]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 8006622:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006626:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0308 	and.w	r3, r3, #8
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006634:	4b53      	ldr	r3, [pc, #332]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	4a52      	ldr	r2, [pc, #328]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 800663a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800663e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006640:	4b50      	ldr	r3, [pc, #320]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	494d      	ldr	r1, [pc, #308]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 800664e:	4313      	orrs	r3, r2
 8006650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d044      	beq.n	80066e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d107      	bne.n	8006676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006666:	4b47      	ldr	r3, [pc, #284]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d119      	bne.n	80066a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e07f      	b.n	8006776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d003      	beq.n	8006686 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006682:	2b03      	cmp	r3, #3
 8006684:	d107      	bne.n	8006696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006686:	4b3f      	ldr	r3, [pc, #252]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d109      	bne.n	80066a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e06f      	b.n	8006776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006696:	4b3b      	ldr	r3, [pc, #236]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e067      	b.n	8006776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066a6:	4b37      	ldr	r3, [pc, #220]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f023 0203 	bic.w	r2, r3, #3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	4934      	ldr	r1, [pc, #208]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066b8:	f7fc fc9a 	bl	8002ff0 <HAL_GetTick>
 80066bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066be:	e00a      	b.n	80066d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066c0:	f7fc fc96 	bl	8002ff0 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e04f      	b.n	8006776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066d6:	4b2b      	ldr	r3, [pc, #172]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 020c 	and.w	r2, r3, #12
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d1eb      	bne.n	80066c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066e8:	4b25      	ldr	r3, [pc, #148]	@ (8006780 <HAL_RCC_ClockConfig+0x1b8>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d20c      	bcs.n	8006710 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066f6:	4b22      	ldr	r3, [pc, #136]	@ (8006780 <HAL_RCC_ClockConfig+0x1b8>)
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066fe:	4b20      	ldr	r3, [pc, #128]	@ (8006780 <HAL_RCC_ClockConfig+0x1b8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d001      	beq.n	8006710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e032      	b.n	8006776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d008      	beq.n	800672e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800671c:	4b19      	ldr	r3, [pc, #100]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	4916      	ldr	r1, [pc, #88]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	4313      	orrs	r3, r2
 800672c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	2b00      	cmp	r3, #0
 8006738:	d009      	beq.n	800674e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800673a:	4b12      	ldr	r3, [pc, #72]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	00db      	lsls	r3, r3, #3
 8006748:	490e      	ldr	r1, [pc, #56]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 800674a:	4313      	orrs	r3, r2
 800674c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800674e:	f000 f821 	bl	8006794 <HAL_RCC_GetSysClockFreq>
 8006752:	4602      	mov	r2, r0
 8006754:	4b0b      	ldr	r3, [pc, #44]	@ (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	091b      	lsrs	r3, r3, #4
 800675a:	f003 030f 	and.w	r3, r3, #15
 800675e:	490a      	ldr	r1, [pc, #40]	@ (8006788 <HAL_RCC_ClockConfig+0x1c0>)
 8006760:	5ccb      	ldrb	r3, [r1, r3]
 8006762:	fa22 f303 	lsr.w	r3, r2, r3
 8006766:	4a09      	ldr	r2, [pc, #36]	@ (800678c <HAL_RCC_ClockConfig+0x1c4>)
 8006768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800676a:	4b09      	ldr	r3, [pc, #36]	@ (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4618      	mov	r0, r3
 8006770:	f7fc fbfa 	bl	8002f68 <HAL_InitTick>

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	40023c00 	.word	0x40023c00
 8006784:	40023800 	.word	0x40023800
 8006788:	08014d18 	.word	0x08014d18
 800678c:	20000000 	.word	0x20000000
 8006790:	20000004 	.word	0x20000004

08006794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006798:	b094      	sub	sp, #80	@ 0x50
 800679a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067ac:	4b79      	ldr	r3, [pc, #484]	@ (8006994 <HAL_RCC_GetSysClockFreq+0x200>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f003 030c 	and.w	r3, r3, #12
 80067b4:	2b08      	cmp	r3, #8
 80067b6:	d00d      	beq.n	80067d4 <HAL_RCC_GetSysClockFreq+0x40>
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	f200 80e1 	bhi.w	8006980 <HAL_RCC_GetSysClockFreq+0x1ec>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <HAL_RCC_GetSysClockFreq+0x34>
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d003      	beq.n	80067ce <HAL_RCC_GetSysClockFreq+0x3a>
 80067c6:	e0db      	b.n	8006980 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067c8:	4b73      	ldr	r3, [pc, #460]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x204>)
 80067ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067cc:	e0db      	b.n	8006986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067ce:	4b73      	ldr	r3, [pc, #460]	@ (800699c <HAL_RCC_GetSysClockFreq+0x208>)
 80067d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067d2:	e0d8      	b.n	8006986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067d4:	4b6f      	ldr	r3, [pc, #444]	@ (8006994 <HAL_RCC_GetSysClockFreq+0x200>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067de:	4b6d      	ldr	r3, [pc, #436]	@ (8006994 <HAL_RCC_GetSysClockFreq+0x200>)
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d063      	beq.n	80068b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ea:	4b6a      	ldr	r3, [pc, #424]	@ (8006994 <HAL_RCC_GetSysClockFreq+0x200>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	099b      	lsrs	r3, r3, #6
 80067f0:	2200      	movs	r2, #0
 80067f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80067f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80067fe:	2300      	movs	r3, #0
 8006800:	637b      	str	r3, [r7, #52]	@ 0x34
 8006802:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006806:	4622      	mov	r2, r4
 8006808:	462b      	mov	r3, r5
 800680a:	f04f 0000 	mov.w	r0, #0
 800680e:	f04f 0100 	mov.w	r1, #0
 8006812:	0159      	lsls	r1, r3, #5
 8006814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006818:	0150      	lsls	r0, r2, #5
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4621      	mov	r1, r4
 8006820:	1a51      	subs	r1, r2, r1
 8006822:	6139      	str	r1, [r7, #16]
 8006824:	4629      	mov	r1, r5
 8006826:	eb63 0301 	sbc.w	r3, r3, r1
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006838:	4659      	mov	r1, fp
 800683a:	018b      	lsls	r3, r1, #6
 800683c:	4651      	mov	r1, sl
 800683e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006842:	4651      	mov	r1, sl
 8006844:	018a      	lsls	r2, r1, #6
 8006846:	4651      	mov	r1, sl
 8006848:	ebb2 0801 	subs.w	r8, r2, r1
 800684c:	4659      	mov	r1, fp
 800684e:	eb63 0901 	sbc.w	r9, r3, r1
 8006852:	f04f 0200 	mov.w	r2, #0
 8006856:	f04f 0300 	mov.w	r3, #0
 800685a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800685e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006866:	4690      	mov	r8, r2
 8006868:	4699      	mov	r9, r3
 800686a:	4623      	mov	r3, r4
 800686c:	eb18 0303 	adds.w	r3, r8, r3
 8006870:	60bb      	str	r3, [r7, #8]
 8006872:	462b      	mov	r3, r5
 8006874:	eb49 0303 	adc.w	r3, r9, r3
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	f04f 0200 	mov.w	r2, #0
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006886:	4629      	mov	r1, r5
 8006888:	024b      	lsls	r3, r1, #9
 800688a:	4621      	mov	r1, r4
 800688c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006890:	4621      	mov	r1, r4
 8006892:	024a      	lsls	r2, r1, #9
 8006894:	4610      	mov	r0, r2
 8006896:	4619      	mov	r1, r3
 8006898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800689a:	2200      	movs	r2, #0
 800689c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800689e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068a4:	f7fa f9d0 	bl	8000c48 <__aeabi_uldivmod>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4613      	mov	r3, r2
 80068ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068b0:	e058      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068b2:	4b38      	ldr	r3, [pc, #224]	@ (8006994 <HAL_RCC_GetSysClockFreq+0x200>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	099b      	lsrs	r3, r3, #6
 80068b8:	2200      	movs	r2, #0
 80068ba:	4618      	mov	r0, r3
 80068bc:	4611      	mov	r1, r2
 80068be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80068c2:	623b      	str	r3, [r7, #32]
 80068c4:	2300      	movs	r3, #0
 80068c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80068c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80068cc:	4642      	mov	r2, r8
 80068ce:	464b      	mov	r3, r9
 80068d0:	f04f 0000 	mov.w	r0, #0
 80068d4:	f04f 0100 	mov.w	r1, #0
 80068d8:	0159      	lsls	r1, r3, #5
 80068da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068de:	0150      	lsls	r0, r2, #5
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4641      	mov	r1, r8
 80068e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80068ea:	4649      	mov	r1, r9
 80068ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	f04f 0300 	mov.w	r3, #0
 80068f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80068fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006900:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006904:	ebb2 040a 	subs.w	r4, r2, sl
 8006908:	eb63 050b 	sbc.w	r5, r3, fp
 800690c:	f04f 0200 	mov.w	r2, #0
 8006910:	f04f 0300 	mov.w	r3, #0
 8006914:	00eb      	lsls	r3, r5, #3
 8006916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800691a:	00e2      	lsls	r2, r4, #3
 800691c:	4614      	mov	r4, r2
 800691e:	461d      	mov	r5, r3
 8006920:	4643      	mov	r3, r8
 8006922:	18e3      	adds	r3, r4, r3
 8006924:	603b      	str	r3, [r7, #0]
 8006926:	464b      	mov	r3, r9
 8006928:	eb45 0303 	adc.w	r3, r5, r3
 800692c:	607b      	str	r3, [r7, #4]
 800692e:	f04f 0200 	mov.w	r2, #0
 8006932:	f04f 0300 	mov.w	r3, #0
 8006936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800693a:	4629      	mov	r1, r5
 800693c:	028b      	lsls	r3, r1, #10
 800693e:	4621      	mov	r1, r4
 8006940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006944:	4621      	mov	r1, r4
 8006946:	028a      	lsls	r2, r1, #10
 8006948:	4610      	mov	r0, r2
 800694a:	4619      	mov	r1, r3
 800694c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800694e:	2200      	movs	r2, #0
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	61fa      	str	r2, [r7, #28]
 8006954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006958:	f7fa f976 	bl	8000c48 <__aeabi_uldivmod>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4613      	mov	r3, r2
 8006962:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006964:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <HAL_RCC_GetSysClockFreq+0x200>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	0c1b      	lsrs	r3, r3, #16
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	3301      	adds	r3, #1
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006974:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006978:	fbb2 f3f3 	udiv	r3, r2, r3
 800697c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800697e:	e002      	b.n	8006986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006980:	4b05      	ldr	r3, [pc, #20]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x204>)
 8006982:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006988:	4618      	mov	r0, r3
 800698a:	3750      	adds	r7, #80	@ 0x50
 800698c:	46bd      	mov	sp, r7
 800698e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006992:	bf00      	nop
 8006994:	40023800 	.word	0x40023800
 8006998:	00f42400 	.word	0x00f42400
 800699c:	007a1200 	.word	0x007a1200

080069a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069a4:	4b03      	ldr	r3, [pc, #12]	@ (80069b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80069a6:	681b      	ldr	r3, [r3, #0]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000000 	.word	0x20000000

080069b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069bc:	f7ff fff0 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069c0:	4602      	mov	r2, r0
 80069c2:	4b05      	ldr	r3, [pc, #20]	@ (80069d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	0a9b      	lsrs	r3, r3, #10
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	4903      	ldr	r1, [pc, #12]	@ (80069dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ce:	5ccb      	ldrb	r3, [r1, r3]
 80069d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40023800 	.word	0x40023800
 80069dc:	08014d28 	.word	0x08014d28

080069e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069e4:	f7ff ffdc 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069e8:	4602      	mov	r2, r0
 80069ea:	4b05      	ldr	r3, [pc, #20]	@ (8006a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	0b5b      	lsrs	r3, r3, #13
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	4903      	ldr	r1, [pc, #12]	@ (8006a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069f6:	5ccb      	ldrb	r3, [r1, r3]
 80069f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	40023800 	.word	0x40023800
 8006a04:	08014d28 	.word	0x08014d28

08006a08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e07b      	b.n	8006b12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d108      	bne.n	8006a34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a2a:	d009      	beq.n	8006a40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	61da      	str	r2, [r3, #28]
 8006a32:	e005      	b.n	8006a40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d106      	bne.n	8006a60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7fb fee0 	bl	8002820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ac4:	ea42 0103 	orr.w	r1, r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006acc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	0c1b      	lsrs	r3, r3, #16
 8006ade:	f003 0104 	and.w	r1, r3, #4
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae6:	f003 0210 	and.w	r2, r3, #16
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69da      	ldr	r2, [r3, #28]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b088      	sub	sp, #32
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	603b      	str	r3, [r7, #0]
 8006b26:	4613      	mov	r3, r2
 8006b28:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b2a:	f7fc fa61 	bl	8002ff0 <HAL_GetTick>
 8006b2e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006b30:	88fb      	ldrh	r3, [r7, #6]
 8006b32:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d001      	beq.n	8006b44 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006b40:	2302      	movs	r3, #2
 8006b42:	e12a      	b.n	8006d9a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <HAL_SPI_Transmit+0x36>
 8006b4a:	88fb      	ldrh	r3, [r7, #6]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e122      	b.n	8006d9a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d101      	bne.n	8006b62 <HAL_SPI_Transmit+0x48>
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e11b      	b.n	8006d9a <HAL_SPI_Transmit+0x280>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2203      	movs	r2, #3
 8006b6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	88fa      	ldrh	r2, [r7, #6]
 8006b82:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	88fa      	ldrh	r2, [r7, #6]
 8006b88:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bb0:	d10f      	bne.n	8006bd2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bdc:	2b40      	cmp	r3, #64	@ 0x40
 8006bde:	d007      	beq.n	8006bf0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bf8:	d152      	bne.n	8006ca0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <HAL_SPI_Transmit+0xee>
 8006c02:	8b7b      	ldrh	r3, [r7, #26]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d145      	bne.n	8006c94 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0c:	881a      	ldrh	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c18:	1c9a      	adds	r2, r3, #2
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c2c:	e032      	b.n	8006c94 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d112      	bne.n	8006c62 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c40:	881a      	ldrh	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4c:	1c9a      	adds	r2, r3, #2
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006c60:	e018      	b.n	8006c94 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c62:	f7fc f9c5 	bl	8002ff0 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d803      	bhi.n	8006c7a <HAL_SPI_Transmit+0x160>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c78:	d102      	bne.n	8006c80 <HAL_SPI_Transmit+0x166>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d109      	bne.n	8006c94 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e082      	b.n	8006d9a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1c7      	bne.n	8006c2e <HAL_SPI_Transmit+0x114>
 8006c9e:	e053      	b.n	8006d48 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <HAL_SPI_Transmit+0x194>
 8006ca8:	8b7b      	ldrh	r3, [r7, #26]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d147      	bne.n	8006d3e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	330c      	adds	r3, #12
 8006cb8:	7812      	ldrb	r2, [r2, #0]
 8006cba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006cd4:	e033      	b.n	8006d3e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d113      	bne.n	8006d0c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	330c      	adds	r3, #12
 8006cee:	7812      	ldrb	r2, [r2, #0]
 8006cf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	3b01      	subs	r3, #1
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006d0a:	e018      	b.n	8006d3e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d0c:	f7fc f970 	bl	8002ff0 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d803      	bhi.n	8006d24 <HAL_SPI_Transmit+0x20a>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d22:	d102      	bne.n	8006d2a <HAL_SPI_Transmit+0x210>
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d109      	bne.n	8006d3e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e02d      	b.n	8006d9a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1c6      	bne.n	8006cd6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d48:	69fa      	ldr	r2, [r7, #28]
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 fa59 	bl	8007204 <SPI_EndRxTxTransaction>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10a      	bne.n	8006d7c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d66:	2300      	movs	r3, #0
 8006d68:	617b      	str	r3, [r7, #20]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e000      	b.n	8006d9a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006d98:	2300      	movs	r3, #0
  }
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3720      	adds	r7, #32
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b08a      	sub	sp, #40	@ 0x28
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	60f8      	str	r0, [r7, #12]
 8006daa:	60b9      	str	r1, [r7, #8]
 8006dac:	607a      	str	r2, [r7, #4]
 8006dae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006db0:	2301      	movs	r3, #1
 8006db2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006db4:	f7fc f91c 	bl	8002ff0 <HAL_GetTick>
 8006db8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006dc0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006dc8:	887b      	ldrh	r3, [r7, #2]
 8006dca:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006dcc:	7ffb      	ldrb	r3, [r7, #31]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d00c      	beq.n	8006dec <HAL_SPI_TransmitReceive+0x4a>
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dd8:	d106      	bne.n	8006de8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d102      	bne.n	8006de8 <HAL_SPI_TransmitReceive+0x46>
 8006de2:	7ffb      	ldrb	r3, [r7, #31]
 8006de4:	2b04      	cmp	r3, #4
 8006de6:	d001      	beq.n	8006dec <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006de8:	2302      	movs	r3, #2
 8006dea:	e17f      	b.n	80070ec <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d005      	beq.n	8006dfe <HAL_SPI_TransmitReceive+0x5c>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <HAL_SPI_TransmitReceive+0x5c>
 8006df8:	887b      	ldrh	r3, [r7, #2]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e174      	b.n	80070ec <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d101      	bne.n	8006e10 <HAL_SPI_TransmitReceive+0x6e>
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	e16d      	b.n	80070ec <HAL_SPI_TransmitReceive+0x34a>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d003      	beq.n	8006e2c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2205      	movs	r2, #5
 8006e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	887a      	ldrh	r2, [r7, #2]
 8006e3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	887a      	ldrh	r2, [r7, #2]
 8006e42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	887a      	ldrh	r2, [r7, #2]
 8006e4e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	887a      	ldrh	r2, [r7, #2]
 8006e54:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e6c:	2b40      	cmp	r3, #64	@ 0x40
 8006e6e:	d007      	beq.n	8006e80 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e88:	d17e      	bne.n	8006f88 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d002      	beq.n	8006e98 <HAL_SPI_TransmitReceive+0xf6>
 8006e92:	8afb      	ldrh	r3, [r7, #22]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d16c      	bne.n	8006f72 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e9c:	881a      	ldrh	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea8:	1c9a      	adds	r2, r3, #2
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ebc:	e059      	b.n	8006f72 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d11b      	bne.n	8006f04 <HAL_SPI_TransmitReceive+0x162>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d016      	beq.n	8006f04 <HAL_SPI_TransmitReceive+0x162>
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d113      	bne.n	8006f04 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee0:	881a      	ldrh	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eec:	1c9a      	adds	r2, r3, #2
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d119      	bne.n	8006f46 <HAL_SPI_TransmitReceive+0x1a4>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d014      	beq.n	8006f46 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f26:	b292      	uxth	r2, r2
 8006f28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2e:	1c9a      	adds	r2, r3, #2
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f42:	2301      	movs	r3, #1
 8006f44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f46:	f7fc f853 	bl	8002ff0 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d80d      	bhi.n	8006f72 <HAL_SPI_TransmitReceive+0x1d0>
 8006f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5c:	d009      	beq.n	8006f72 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e0bc      	b.n	80070ec <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1a0      	bne.n	8006ebe <HAL_SPI_TransmitReceive+0x11c>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d19b      	bne.n	8006ebe <HAL_SPI_TransmitReceive+0x11c>
 8006f86:	e082      	b.n	800708e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <HAL_SPI_TransmitReceive+0x1f4>
 8006f90:	8afb      	ldrh	r3, [r7, #22]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d171      	bne.n	800707a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	330c      	adds	r3, #12
 8006fa0:	7812      	ldrb	r2, [r2, #0]
 8006fa2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fbc:	e05d      	b.n	800707a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d11c      	bne.n	8007006 <HAL_SPI_TransmitReceive+0x264>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d017      	beq.n	8007006 <HAL_SPI_TransmitReceive+0x264>
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d114      	bne.n	8007006 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	7812      	ldrb	r2, [r2, #0]
 8006fe8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007002:	2300      	movs	r3, #0
 8007004:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b01      	cmp	r3, #1
 8007012:	d119      	bne.n	8007048 <HAL_SPI_TransmitReceive+0x2a6>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007018:	b29b      	uxth	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d014      	beq.n	8007048 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68da      	ldr	r2, [r3, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007028:	b2d2      	uxtb	r2, r2
 800702a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007030:	1c5a      	adds	r2, r3, #1
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800703a:	b29b      	uxth	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	b29a      	uxth	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007044:	2301      	movs	r3, #1
 8007046:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007048:	f7fb ffd2 	bl	8002ff0 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007054:	429a      	cmp	r2, r3
 8007056:	d803      	bhi.n	8007060 <HAL_SPI_TransmitReceive+0x2be>
 8007058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705e:	d102      	bne.n	8007066 <HAL_SPI_TransmitReceive+0x2c4>
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	2b00      	cmp	r3, #0
 8007064:	d109      	bne.n	800707a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e038      	b.n	80070ec <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800707e:	b29b      	uxth	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	d19c      	bne.n	8006fbe <HAL_SPI_TransmitReceive+0x21c>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007088:	b29b      	uxth	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d197      	bne.n	8006fbe <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800708e:	6a3a      	ldr	r2, [r7, #32]
 8007090:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f000 f8b6 	bl	8007204 <SPI_EndRxTxTransaction>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d008      	beq.n	80070b0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2220      	movs	r2, #32
 80070a2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e01d      	b.n	80070ec <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10a      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070b8:	2300      	movs	r3, #0
 80070ba:	613b      	str	r3, [r7, #16]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	613b      	str	r3, [r7, #16]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	613b      	str	r3, [r7, #16]
 80070cc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e000      	b.n	80070ec <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80070ea:	2300      	movs	r3, #0
  }
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3728      	adds	r7, #40	@ 0x28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	4613      	mov	r3, r2
 8007102:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007104:	f7fb ff74 	bl	8002ff0 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710c:	1a9b      	subs	r3, r3, r2
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	4413      	add	r3, r2
 8007112:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007114:	f7fb ff6c 	bl	8002ff0 <HAL_GetTick>
 8007118:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800711a:	4b39      	ldr	r3, [pc, #228]	@ (8007200 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	015b      	lsls	r3, r3, #5
 8007120:	0d1b      	lsrs	r3, r3, #20
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	fb02 f303 	mul.w	r3, r2, r3
 8007128:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800712a:	e055      	b.n	80071d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007132:	d051      	beq.n	80071d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007134:	f7fb ff5c 	bl	8002ff0 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	429a      	cmp	r2, r3
 8007142:	d902      	bls.n	800714a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d13d      	bne.n	80071c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007158:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007162:	d111      	bne.n	8007188 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800716c:	d004      	beq.n	8007178 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007176:	d107      	bne.n	8007188 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007186:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800718c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007190:	d10f      	bne.n	80071b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e018      	b.n	80071f8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d102      	bne.n	80071d2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	61fb      	str	r3, [r7, #28]
 80071d0:	e002      	b.n	80071d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	689a      	ldr	r2, [r3, #8]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	4013      	ands	r3, r2
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	bf0c      	ite	eq
 80071e8:	2301      	moveq	r3, #1
 80071ea:	2300      	movne	r3, #0
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	461a      	mov	r2, r3
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d19a      	bne.n	800712c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3720      	adds	r7, #32
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20000000 	.word	0x20000000

08007204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b088      	sub	sp, #32
 8007208:	af02      	add	r7, sp, #8
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2201      	movs	r2, #1
 8007218:	2102      	movs	r1, #2
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f7ff ff6a 	bl	80070f4 <SPI_WaitFlagStateUntilTimeout>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d007      	beq.n	8007236 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800722a:	f043 0220 	orr.w	r2, r3, #32
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e032      	b.n	800729c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007236:	4b1b      	ldr	r3, [pc, #108]	@ (80072a4 <SPI_EndRxTxTransaction+0xa0>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a1b      	ldr	r2, [pc, #108]	@ (80072a8 <SPI_EndRxTxTransaction+0xa4>)
 800723c:	fba2 2303 	umull	r2, r3, r2, r3
 8007240:	0d5b      	lsrs	r3, r3, #21
 8007242:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007246:	fb02 f303 	mul.w	r3, r2, r3
 800724a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007254:	d112      	bne.n	800727c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2200      	movs	r2, #0
 800725e:	2180      	movs	r1, #128	@ 0x80
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f7ff ff47 	bl	80070f4 <SPI_WaitFlagStateUntilTimeout>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d016      	beq.n	800729a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007270:	f043 0220 	orr.w	r2, r3, #32
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e00f      	b.n	800729c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	3b01      	subs	r3, #1
 8007286:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007292:	2b80      	cmp	r3, #128	@ 0x80
 8007294:	d0f2      	beq.n	800727c <SPI_EndRxTxTransaction+0x78>
 8007296:	e000      	b.n	800729a <SPI_EndRxTxTransaction+0x96>
        break;
 8007298:	bf00      	nop
  }

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	20000000 	.word	0x20000000
 80072a8:	165e9f81 	.word	0x165e9f81

080072ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e041      	b.n	8007342 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d106      	bne.n	80072d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7fb fb40 	bl	8002958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3304      	adds	r3, #4
 80072e8:	4619      	mov	r1, r3
 80072ea:	4610      	mov	r0, r2
 80072ec:	f001 f95e 	bl	80085ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b01      	cmp	r3, #1
 800735e:	d001      	beq.n	8007364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e04e      	b.n	8007402 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f042 0201 	orr.w	r2, r2, #1
 800737a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a23      	ldr	r2, [pc, #140]	@ (8007410 <HAL_TIM_Base_Start_IT+0xc4>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d022      	beq.n	80073cc <HAL_TIM_Base_Start_IT+0x80>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800738e:	d01d      	beq.n	80073cc <HAL_TIM_Base_Start_IT+0x80>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a1f      	ldr	r2, [pc, #124]	@ (8007414 <HAL_TIM_Base_Start_IT+0xc8>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d018      	beq.n	80073cc <HAL_TIM_Base_Start_IT+0x80>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a1e      	ldr	r2, [pc, #120]	@ (8007418 <HAL_TIM_Base_Start_IT+0xcc>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d013      	beq.n	80073cc <HAL_TIM_Base_Start_IT+0x80>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a1c      	ldr	r2, [pc, #112]	@ (800741c <HAL_TIM_Base_Start_IT+0xd0>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d00e      	beq.n	80073cc <HAL_TIM_Base_Start_IT+0x80>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a1b      	ldr	r2, [pc, #108]	@ (8007420 <HAL_TIM_Base_Start_IT+0xd4>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d009      	beq.n	80073cc <HAL_TIM_Base_Start_IT+0x80>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a19      	ldr	r2, [pc, #100]	@ (8007424 <HAL_TIM_Base_Start_IT+0xd8>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d004      	beq.n	80073cc <HAL_TIM_Base_Start_IT+0x80>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a18      	ldr	r2, [pc, #96]	@ (8007428 <HAL_TIM_Base_Start_IT+0xdc>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d111      	bne.n	80073f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f003 0307 	and.w	r3, r3, #7
 80073d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b06      	cmp	r3, #6
 80073dc:	d010      	beq.n	8007400 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f042 0201 	orr.w	r2, r2, #1
 80073ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ee:	e007      	b.n	8007400 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0201 	orr.w	r2, r2, #1
 80073fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	40010000 	.word	0x40010000
 8007414:	40000400 	.word	0x40000400
 8007418:	40000800 	.word	0x40000800
 800741c:	40000c00 	.word	0x40000c00
 8007420:	40010400 	.word	0x40010400
 8007424:	40014000 	.word	0x40014000
 8007428:	40001800 	.word	0x40001800

0800742c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e041      	b.n	80074c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d106      	bne.n	8007458 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fb fa2c 	bl	80028b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3304      	adds	r3, #4
 8007468:	4619      	mov	r1, r3
 800746a:	4610      	mov	r0, r2
 800746c:	f001 f89e 	bl	80085ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d109      	bne.n	80074f8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	bf0c      	ite	eq
 80074f0:	2301      	moveq	r3, #1
 80074f2:	2300      	movne	r3, #0
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	e022      	b.n	800753e <HAL_TIM_PWM_Start_DMA+0x72>
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d109      	bne.n	8007512 <HAL_TIM_PWM_Start_DMA+0x46>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	bf0c      	ite	eq
 800750a:	2301      	moveq	r3, #1
 800750c:	2300      	movne	r3, #0
 800750e:	b2db      	uxtb	r3, r3
 8007510:	e015      	b.n	800753e <HAL_TIM_PWM_Start_DMA+0x72>
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b08      	cmp	r3, #8
 8007516:	d109      	bne.n	800752c <HAL_TIM_PWM_Start_DMA+0x60>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b02      	cmp	r3, #2
 8007522:	bf0c      	ite	eq
 8007524:	2301      	moveq	r3, #1
 8007526:	2300      	movne	r3, #0
 8007528:	b2db      	uxtb	r3, r3
 800752a:	e008      	b.n	800753e <HAL_TIM_PWM_Start_DMA+0x72>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	bf0c      	ite	eq
 8007538:	2301      	moveq	r3, #1
 800753a:	2300      	movne	r3, #0
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8007542:	2302      	movs	r3, #2
 8007544:	e171      	b.n	800782a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d109      	bne.n	8007560 <HAL_TIM_PWM_Start_DMA+0x94>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b01      	cmp	r3, #1
 8007556:	bf0c      	ite	eq
 8007558:	2301      	moveq	r3, #1
 800755a:	2300      	movne	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	e022      	b.n	80075a6 <HAL_TIM_PWM_Start_DMA+0xda>
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	2b04      	cmp	r3, #4
 8007564:	d109      	bne.n	800757a <HAL_TIM_PWM_Start_DMA+0xae>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b01      	cmp	r3, #1
 8007570:	bf0c      	ite	eq
 8007572:	2301      	moveq	r3, #1
 8007574:	2300      	movne	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	e015      	b.n	80075a6 <HAL_TIM_PWM_Start_DMA+0xda>
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2b08      	cmp	r3, #8
 800757e:	d109      	bne.n	8007594 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b01      	cmp	r3, #1
 800758a:	bf0c      	ite	eq
 800758c:	2301      	moveq	r3, #1
 800758e:	2300      	movne	r3, #0
 8007590:	b2db      	uxtb	r3, r3
 8007592:	e008      	b.n	80075a6 <HAL_TIM_PWM_Start_DMA+0xda>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b01      	cmp	r3, #1
 800759e:	bf0c      	ite	eq
 80075a0:	2301      	moveq	r3, #1
 80075a2:	2300      	movne	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d024      	beq.n	80075f4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <HAL_TIM_PWM_Start_DMA+0xea>
 80075b0:	887b      	ldrh	r3, [r7, #2]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e137      	b.n	800782a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d104      	bne.n	80075ca <HAL_TIM_PWM_Start_DMA+0xfe>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075c8:	e016      	b.n	80075f8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d104      	bne.n	80075da <HAL_TIM_PWM_Start_DMA+0x10e>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075d8:	e00e      	b.n	80075f8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d104      	bne.n	80075ea <HAL_TIM_PWM_Start_DMA+0x11e>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075e8:	e006      	b.n	80075f8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2202      	movs	r2, #2
 80075ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075f2:	e001      	b.n	80075f8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e118      	b.n	800782a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b0c      	cmp	r3, #12
 80075fc:	f200 80ae 	bhi.w	800775c <HAL_TIM_PWM_Start_DMA+0x290>
 8007600:	a201      	add	r2, pc, #4	@ (adr r2, 8007608 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8007602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007606:	bf00      	nop
 8007608:	0800763d 	.word	0x0800763d
 800760c:	0800775d 	.word	0x0800775d
 8007610:	0800775d 	.word	0x0800775d
 8007614:	0800775d 	.word	0x0800775d
 8007618:	08007685 	.word	0x08007685
 800761c:	0800775d 	.word	0x0800775d
 8007620:	0800775d 	.word	0x0800775d
 8007624:	0800775d 	.word	0x0800775d
 8007628:	080076cd 	.word	0x080076cd
 800762c:	0800775d 	.word	0x0800775d
 8007630:	0800775d 	.word	0x0800775d
 8007634:	0800775d 	.word	0x0800775d
 8007638:	08007715 	.word	0x08007715
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007640:	4a7c      	ldr	r2, [pc, #496]	@ (8007834 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007642:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007648:	4a7b      	ldr	r2, [pc, #492]	@ (8007838 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800764a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007650:	4a7a      	ldr	r2, [pc, #488]	@ (800783c <HAL_TIM_PWM_Start_DMA+0x370>)
 8007652:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007658:	6879      	ldr	r1, [r7, #4]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3334      	adds	r3, #52	@ 0x34
 8007660:	461a      	mov	r2, r3
 8007662:	887b      	ldrh	r3, [r7, #2]
 8007664:	f7fc fafc 	bl	8003c60 <HAL_DMA_Start_IT>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e0db      	b.n	800782a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68da      	ldr	r2, [r3, #12]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007680:	60da      	str	r2, [r3, #12]
      break;
 8007682:	e06e      	b.n	8007762 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007688:	4a6a      	ldr	r2, [pc, #424]	@ (8007834 <HAL_TIM_PWM_Start_DMA+0x368>)
 800768a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007690:	4a69      	ldr	r2, [pc, #420]	@ (8007838 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007692:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007698:	4a68      	ldr	r2, [pc, #416]	@ (800783c <HAL_TIM_PWM_Start_DMA+0x370>)
 800769a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80076a0:	6879      	ldr	r1, [r7, #4]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3338      	adds	r3, #56	@ 0x38
 80076a8:	461a      	mov	r2, r3
 80076aa:	887b      	ldrh	r3, [r7, #2]
 80076ac:	f7fc fad8 	bl	8003c60 <HAL_DMA_Start_IT>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e0b7      	b.n	800782a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68da      	ldr	r2, [r3, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80076c8:	60da      	str	r2, [r3, #12]
      break;
 80076ca:	e04a      	b.n	8007762 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d0:	4a58      	ldr	r2, [pc, #352]	@ (8007834 <HAL_TIM_PWM_Start_DMA+0x368>)
 80076d2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d8:	4a57      	ldr	r2, [pc, #348]	@ (8007838 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80076da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e0:	4a56      	ldr	r2, [pc, #344]	@ (800783c <HAL_TIM_PWM_Start_DMA+0x370>)
 80076e2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80076e8:	6879      	ldr	r1, [r7, #4]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	333c      	adds	r3, #60	@ 0x3c
 80076f0:	461a      	mov	r2, r3
 80076f2:	887b      	ldrh	r3, [r7, #2]
 80076f4:	f7fc fab4 	bl	8003c60 <HAL_DMA_Start_IT>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e093      	b.n	800782a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68da      	ldr	r2, [r3, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007710:	60da      	str	r2, [r3, #12]
      break;
 8007712:	e026      	b.n	8007762 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007718:	4a46      	ldr	r2, [pc, #280]	@ (8007834 <HAL_TIM_PWM_Start_DMA+0x368>)
 800771a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007720:	4a45      	ldr	r2, [pc, #276]	@ (8007838 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007722:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007728:	4a44      	ldr	r2, [pc, #272]	@ (800783c <HAL_TIM_PWM_Start_DMA+0x370>)
 800772a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007730:	6879      	ldr	r1, [r7, #4]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3340      	adds	r3, #64	@ 0x40
 8007738:	461a      	mov	r2, r3
 800773a:	887b      	ldrh	r3, [r7, #2]
 800773c:	f7fc fa90 	bl	8003c60 <HAL_DMA_Start_IT>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e06f      	b.n	800782a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007758:	60da      	str	r2, [r3, #12]
      break;
 800775a:	e002      	b.n	8007762 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	75fb      	strb	r3, [r7, #23]
      break;
 8007760:	bf00      	nop
  }

  if (status == HAL_OK)
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d15f      	bne.n	8007828 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2201      	movs	r2, #1
 800776e:	68b9      	ldr	r1, [r7, #8]
 8007770:	4618      	mov	r0, r3
 8007772:	f001 fb35 	bl	8008de0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a31      	ldr	r2, [pc, #196]	@ (8007840 <HAL_TIM_PWM_Start_DMA+0x374>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d004      	beq.n	800778a <HAL_TIM_PWM_Start_DMA+0x2be>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a2f      	ldr	r2, [pc, #188]	@ (8007844 <HAL_TIM_PWM_Start_DMA+0x378>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d101      	bne.n	800778e <HAL_TIM_PWM_Start_DMA+0x2c2>
 800778a:	2301      	movs	r3, #1
 800778c:	e000      	b.n	8007790 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800778e:	2300      	movs	r3, #0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d007      	beq.n	80077a4 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a25      	ldr	r2, [pc, #148]	@ (8007840 <HAL_TIM_PWM_Start_DMA+0x374>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d022      	beq.n	80077f4 <HAL_TIM_PWM_Start_DMA+0x328>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077b6:	d01d      	beq.n	80077f4 <HAL_TIM_PWM_Start_DMA+0x328>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a22      	ldr	r2, [pc, #136]	@ (8007848 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d018      	beq.n	80077f4 <HAL_TIM_PWM_Start_DMA+0x328>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a21      	ldr	r2, [pc, #132]	@ (800784c <HAL_TIM_PWM_Start_DMA+0x380>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d013      	beq.n	80077f4 <HAL_TIM_PWM_Start_DMA+0x328>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a1f      	ldr	r2, [pc, #124]	@ (8007850 <HAL_TIM_PWM_Start_DMA+0x384>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d00e      	beq.n	80077f4 <HAL_TIM_PWM_Start_DMA+0x328>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a1a      	ldr	r2, [pc, #104]	@ (8007844 <HAL_TIM_PWM_Start_DMA+0x378>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d009      	beq.n	80077f4 <HAL_TIM_PWM_Start_DMA+0x328>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007854 <HAL_TIM_PWM_Start_DMA+0x388>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d004      	beq.n	80077f4 <HAL_TIM_PWM_Start_DMA+0x328>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a1a      	ldr	r2, [pc, #104]	@ (8007858 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d111      	bne.n	8007818 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	2b06      	cmp	r3, #6
 8007804:	d010      	beq.n	8007828 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f042 0201 	orr.w	r2, r2, #1
 8007814:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007816:	e007      	b.n	8007828 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0201 	orr.w	r2, r2, #1
 8007826:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007828:	7dfb      	ldrb	r3, [r7, #23]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	0800849b 	.word	0x0800849b
 8007838:	08008543 	.word	0x08008543
 800783c:	08008409 	.word	0x08008409
 8007840:	40010000 	.word	0x40010000
 8007844:	40010400 	.word	0x40010400
 8007848:	40000400 	.word	0x40000400
 800784c:	40000800 	.word	0x40000800
 8007850:	40000c00 	.word	0x40000c00
 8007854:	40014000 	.word	0x40014000
 8007858:	40001800 	.word	0x40001800

0800785c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b0c      	cmp	r3, #12
 800786e:	d855      	bhi.n	800791c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007870:	a201      	add	r2, pc, #4	@ (adr r2, 8007878 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007876:	bf00      	nop
 8007878:	080078ad 	.word	0x080078ad
 800787c:	0800791d 	.word	0x0800791d
 8007880:	0800791d 	.word	0x0800791d
 8007884:	0800791d 	.word	0x0800791d
 8007888:	080078c9 	.word	0x080078c9
 800788c:	0800791d 	.word	0x0800791d
 8007890:	0800791d 	.word	0x0800791d
 8007894:	0800791d 	.word	0x0800791d
 8007898:	080078e5 	.word	0x080078e5
 800789c:	0800791d 	.word	0x0800791d
 80078a0:	0800791d 	.word	0x0800791d
 80078a4:	0800791d 	.word	0x0800791d
 80078a8:	08007901 	.word	0x08007901
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80078ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fc fa95 	bl	8003df0 <HAL_DMA_Abort_IT>
      break;
 80078c6:	e02c      	b.n	8007922 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fc fa87 	bl	8003df0 <HAL_DMA_Abort_IT>
      break;
 80078e2:	e01e      	b.n	8007922 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fc fa79 	bl	8003df0 <HAL_DMA_Abort_IT>
      break;
 80078fe:	e010      	b.n	8007922 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800790e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007914:	4618      	mov	r0, r3
 8007916:	f7fc fa6b 	bl	8003df0 <HAL_DMA_Abort_IT>
      break;
 800791a:	e002      	b.n	8007922 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	73fb      	strb	r3, [r7, #15]
      break;
 8007920:	bf00      	nop
  }

  if (status == HAL_OK)
 8007922:	7bfb      	ldrb	r3, [r7, #15]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d161      	bne.n	80079ec <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2200      	movs	r2, #0
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	4618      	mov	r0, r3
 8007932:	f001 fa55 	bl	8008de0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a2f      	ldr	r2, [pc, #188]	@ (80079f8 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d004      	beq.n	800794a <HAL_TIM_PWM_Stop_DMA+0xee>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a2d      	ldr	r2, [pc, #180]	@ (80079fc <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d101      	bne.n	800794e <HAL_TIM_PWM_Stop_DMA+0xf2>
 800794a:	2301      	movs	r3, #1
 800794c:	e000      	b.n	8007950 <HAL_TIM_PWM_Stop_DMA+0xf4>
 800794e:	2300      	movs	r3, #0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d017      	beq.n	8007984 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6a1a      	ldr	r2, [r3, #32]
 800795a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800795e:	4013      	ands	r3, r2
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10f      	bne.n	8007984 <HAL_TIM_PWM_Stop_DMA+0x128>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6a1a      	ldr	r2, [r3, #32]
 800796a:	f240 4344 	movw	r3, #1092	@ 0x444
 800796e:	4013      	ands	r3, r2
 8007970:	2b00      	cmp	r3, #0
 8007972:	d107      	bne.n	8007984 <HAL_TIM_PWM_Stop_DMA+0x128>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007982:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6a1a      	ldr	r2, [r3, #32]
 800798a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800798e:	4013      	ands	r3, r2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10f      	bne.n	80079b4 <HAL_TIM_PWM_Stop_DMA+0x158>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6a1a      	ldr	r2, [r3, #32]
 800799a:	f240 4344 	movw	r3, #1092	@ 0x444
 800799e:	4013      	ands	r3, r2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d107      	bne.n	80079b4 <HAL_TIM_PWM_Stop_DMA+0x158>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 0201 	bic.w	r2, r2, #1
 80079b2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d104      	bne.n	80079c4 <HAL_TIM_PWM_Stop_DMA+0x168>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079c2:	e013      	b.n	80079ec <HAL_TIM_PWM_Stop_DMA+0x190>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d104      	bne.n	80079d4 <HAL_TIM_PWM_Stop_DMA+0x178>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079d2:	e00b      	b.n	80079ec <HAL_TIM_PWM_Stop_DMA+0x190>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b08      	cmp	r3, #8
 80079d8:	d104      	bne.n	80079e4 <HAL_TIM_PWM_Stop_DMA+0x188>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079e2:	e003      	b.n	80079ec <HAL_TIM_PWM_Stop_DMA+0x190>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	40010000 	.word	0x40010000
 80079fc:	40010400 	.word	0x40010400

08007a00 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e041      	b.n	8007a96 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d106      	bne.n	8007a2c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f839 	bl	8007a9e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	4610      	mov	r0, r2
 8007a40:	f000 fdb4 	bl	80085ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
	...

08007ab4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d104      	bne.n	8007ad2 <HAL_TIM_IC_Start_IT+0x1e>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	e013      	b.n	8007afa <HAL_TIM_IC_Start_IT+0x46>
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d104      	bne.n	8007ae2 <HAL_TIM_IC_Start_IT+0x2e>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	e00b      	b.n	8007afa <HAL_TIM_IC_Start_IT+0x46>
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b08      	cmp	r3, #8
 8007ae6:	d104      	bne.n	8007af2 <HAL_TIM_IC_Start_IT+0x3e>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	e003      	b.n	8007afa <HAL_TIM_IC_Start_IT+0x46>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d104      	bne.n	8007b0c <HAL_TIM_IC_Start_IT+0x58>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	e013      	b.n	8007b34 <HAL_TIM_IC_Start_IT+0x80>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d104      	bne.n	8007b1c <HAL_TIM_IC_Start_IT+0x68>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	e00b      	b.n	8007b34 <HAL_TIM_IC_Start_IT+0x80>
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	2b08      	cmp	r3, #8
 8007b20:	d104      	bne.n	8007b2c <HAL_TIM_IC_Start_IT+0x78>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	e003      	b.n	8007b34 <HAL_TIM_IC_Start_IT+0x80>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d102      	bne.n	8007b42 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b3c:	7b7b      	ldrb	r3, [r7, #13]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d001      	beq.n	8007b46 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e0cc      	b.n	8007ce0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d104      	bne.n	8007b56 <HAL_TIM_IC_Start_IT+0xa2>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b54:	e013      	b.n	8007b7e <HAL_TIM_IC_Start_IT+0xca>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d104      	bne.n	8007b66 <HAL_TIM_IC_Start_IT+0xb2>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b64:	e00b      	b.n	8007b7e <HAL_TIM_IC_Start_IT+0xca>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b08      	cmp	r3, #8
 8007b6a:	d104      	bne.n	8007b76 <HAL_TIM_IC_Start_IT+0xc2>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b74:	e003      	b.n	8007b7e <HAL_TIM_IC_Start_IT+0xca>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2202      	movs	r2, #2
 8007b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d104      	bne.n	8007b8e <HAL_TIM_IC_Start_IT+0xda>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b8c:	e013      	b.n	8007bb6 <HAL_TIM_IC_Start_IT+0x102>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b04      	cmp	r3, #4
 8007b92:	d104      	bne.n	8007b9e <HAL_TIM_IC_Start_IT+0xea>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b9c:	e00b      	b.n	8007bb6 <HAL_TIM_IC_Start_IT+0x102>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d104      	bne.n	8007bae <HAL_TIM_IC_Start_IT+0xfa>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bac:	e003      	b.n	8007bb6 <HAL_TIM_IC_Start_IT+0x102>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	2b0c      	cmp	r3, #12
 8007bba:	d841      	bhi.n	8007c40 <HAL_TIM_IC_Start_IT+0x18c>
 8007bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc4 <HAL_TIM_IC_Start_IT+0x110>)
 8007bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc2:	bf00      	nop
 8007bc4:	08007bf9 	.word	0x08007bf9
 8007bc8:	08007c41 	.word	0x08007c41
 8007bcc:	08007c41 	.word	0x08007c41
 8007bd0:	08007c41 	.word	0x08007c41
 8007bd4:	08007c0b 	.word	0x08007c0b
 8007bd8:	08007c41 	.word	0x08007c41
 8007bdc:	08007c41 	.word	0x08007c41
 8007be0:	08007c41 	.word	0x08007c41
 8007be4:	08007c1d 	.word	0x08007c1d
 8007be8:	08007c41 	.word	0x08007c41
 8007bec:	08007c41 	.word	0x08007c41
 8007bf0:	08007c41 	.word	0x08007c41
 8007bf4:	08007c2f 	.word	0x08007c2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f042 0202 	orr.w	r2, r2, #2
 8007c06:	60da      	str	r2, [r3, #12]
      break;
 8007c08:	e01d      	b.n	8007c46 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68da      	ldr	r2, [r3, #12]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f042 0204 	orr.w	r2, r2, #4
 8007c18:	60da      	str	r2, [r3, #12]
      break;
 8007c1a:	e014      	b.n	8007c46 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0208 	orr.w	r2, r2, #8
 8007c2a:	60da      	str	r2, [r3, #12]
      break;
 8007c2c:	e00b      	b.n	8007c46 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68da      	ldr	r2, [r3, #12]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f042 0210 	orr.w	r2, r2, #16
 8007c3c:	60da      	str	r2, [r3, #12]
      break;
 8007c3e:	e002      	b.n	8007c46 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	73fb      	strb	r3, [r7, #15]
      break;
 8007c44:	bf00      	nop
  }

  if (status == HAL_OK)
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d148      	bne.n	8007cde <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2201      	movs	r2, #1
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f001 f8c3 	bl	8008de0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a22      	ldr	r2, [pc, #136]	@ (8007ce8 <HAL_TIM_IC_Start_IT+0x234>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d022      	beq.n	8007caa <HAL_TIM_IC_Start_IT+0x1f6>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c6c:	d01d      	beq.n	8007caa <HAL_TIM_IC_Start_IT+0x1f6>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a1e      	ldr	r2, [pc, #120]	@ (8007cec <HAL_TIM_IC_Start_IT+0x238>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d018      	beq.n	8007caa <HAL_TIM_IC_Start_IT+0x1f6>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8007cf0 <HAL_TIM_IC_Start_IT+0x23c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d013      	beq.n	8007caa <HAL_TIM_IC_Start_IT+0x1f6>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf4 <HAL_TIM_IC_Start_IT+0x240>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d00e      	beq.n	8007caa <HAL_TIM_IC_Start_IT+0x1f6>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a19      	ldr	r2, [pc, #100]	@ (8007cf8 <HAL_TIM_IC_Start_IT+0x244>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d009      	beq.n	8007caa <HAL_TIM_IC_Start_IT+0x1f6>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a18      	ldr	r2, [pc, #96]	@ (8007cfc <HAL_TIM_IC_Start_IT+0x248>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d004      	beq.n	8007caa <HAL_TIM_IC_Start_IT+0x1f6>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a16      	ldr	r2, [pc, #88]	@ (8007d00 <HAL_TIM_IC_Start_IT+0x24c>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d111      	bne.n	8007cce <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f003 0307 	and.w	r3, r3, #7
 8007cb4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b06      	cmp	r3, #6
 8007cba:	d010      	beq.n	8007cde <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0201 	orr.w	r2, r2, #1
 8007cca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ccc:	e007      	b.n	8007cde <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0201 	orr.w	r2, r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	40010000 	.word	0x40010000
 8007cec:	40000400 	.word	0x40000400
 8007cf0:	40000800 	.word	0x40000800
 8007cf4:	40000c00 	.word	0x40000c00
 8007cf8:	40010400 	.word	0x40010400
 8007cfc:	40014000 	.word	0x40014000
 8007d00:	40001800 	.word	0x40001800

08007d04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d020      	beq.n	8007d68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01b      	beq.n	8007d68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f06f 0202 	mvn.w	r2, #2
 8007d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	f003 0303 	and.w	r3, r3, #3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7f9 fe5c 	bl	8001a0c <HAL_TIM_IC_CaptureCallback>
 8007d54:	e005      	b.n	8007d62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fb2e 	bl	80083b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7f9 fe95 	bl	8001a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f003 0304 	and.w	r3, r3, #4
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d020      	beq.n	8007db4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d01b      	beq.n	8007db4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f06f 0204 	mvn.w	r2, #4
 8007d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7f9 fe36 	bl	8001a0c <HAL_TIM_IC_CaptureCallback>
 8007da0:	e005      	b.n	8007dae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fb08 	bl	80083b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7f9 fe6f 	bl	8001a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	f003 0308 	and.w	r3, r3, #8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d020      	beq.n	8007e00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f003 0308 	and.w	r3, r3, #8
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d01b      	beq.n	8007e00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f06f 0208 	mvn.w	r2, #8
 8007dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	f003 0303 	and.w	r3, r3, #3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7f9 fe10 	bl	8001a0c <HAL_TIM_IC_CaptureCallback>
 8007dec:	e005      	b.n	8007dfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fae2 	bl	80083b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7f9 fe49 	bl	8001a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	f003 0310 	and.w	r3, r3, #16
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d020      	beq.n	8007e4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f003 0310 	and.w	r3, r3, #16
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d01b      	beq.n	8007e4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f06f 0210 	mvn.w	r2, #16
 8007e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2208      	movs	r2, #8
 8007e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7f9 fdea 	bl	8001a0c <HAL_TIM_IC_CaptureCallback>
 8007e38:	e005      	b.n	8007e46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fabc 	bl	80083b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7f9 fe23 	bl	8001a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00c      	beq.n	8007e70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d007      	beq.n	8007e70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f06f 0201 	mvn.w	r2, #1
 8007e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7f9 fdf2 	bl	8001a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00c      	beq.n	8007e94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d007      	beq.n	8007e94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f001 f8a4 	bl	8008fdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00c      	beq.n	8007eb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d007      	beq.n	8007eb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fa94 	bl	80083e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f003 0320 	and.w	r3, r3, #32
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00c      	beq.n	8007edc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f003 0320 	and.w	r3, r3, #32
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d007      	beq.n	8007edc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f06f 0220 	mvn.w	r2, #32
 8007ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f001 f876 	bl	8008fc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007edc:	bf00      	nop
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d101      	bne.n	8007f02 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007efe:	2302      	movs	r3, #2
 8007f00:	e088      	b.n	8008014 <HAL_TIM_IC_ConfigChannel+0x130>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d11b      	bne.n	8007f48 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007f20:	f000 fd9a 	bl	8008a58 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 020c 	bic.w	r2, r2, #12
 8007f32:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6999      	ldr	r1, [r3, #24]
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	689a      	ldr	r2, [r3, #8]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	619a      	str	r2, [r3, #24]
 8007f46:	e060      	b.n	800800a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d11c      	bne.n	8007f88 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007f5e:	f000 fe1e 	bl	8008b9e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	699a      	ldr	r2, [r3, #24]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007f70:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6999      	ldr	r1, [r3, #24]
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	021a      	lsls	r2, r3, #8
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	619a      	str	r2, [r3, #24]
 8007f86:	e040      	b.n	800800a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b08      	cmp	r3, #8
 8007f8c:	d11b      	bne.n	8007fc6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007f9e:	f000 fe6b 	bl	8008c78 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	69da      	ldr	r2, [r3, #28]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 020c 	bic.w	r2, r2, #12
 8007fb0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69d9      	ldr	r1, [r3, #28]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	61da      	str	r2, [r3, #28]
 8007fc4:	e021      	b.n	800800a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b0c      	cmp	r3, #12
 8007fca:	d11c      	bne.n	8008006 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007fdc:	f000 fe88 	bl	8008cf0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	69da      	ldr	r2, [r3, #28]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007fee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	69d9      	ldr	r1, [r3, #28]
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	021a      	lsls	r2, r3, #8
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	61da      	str	r2, [r3, #28]
 8008004:	e001      	b.n	800800a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008012:	7dfb      	ldrb	r3, [r7, #23]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008032:	2b01      	cmp	r3, #1
 8008034:	d101      	bne.n	800803a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008036:	2302      	movs	r3, #2
 8008038:	e0ae      	b.n	8008198 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b0c      	cmp	r3, #12
 8008046:	f200 809f 	bhi.w	8008188 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800804a:	a201      	add	r2, pc, #4	@ (adr r2, 8008050 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	08008085 	.word	0x08008085
 8008054:	08008189 	.word	0x08008189
 8008058:	08008189 	.word	0x08008189
 800805c:	08008189 	.word	0x08008189
 8008060:	080080c5 	.word	0x080080c5
 8008064:	08008189 	.word	0x08008189
 8008068:	08008189 	.word	0x08008189
 800806c:	08008189 	.word	0x08008189
 8008070:	08008107 	.word	0x08008107
 8008074:	08008189 	.word	0x08008189
 8008078:	08008189 	.word	0x08008189
 800807c:	08008189 	.word	0x08008189
 8008080:	08008147 	.word	0x08008147
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68b9      	ldr	r1, [r7, #8]
 800808a:	4618      	mov	r0, r3
 800808c:	f000 fb34 	bl	80086f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	699a      	ldr	r2, [r3, #24]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f042 0208 	orr.w	r2, r2, #8
 800809e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	699a      	ldr	r2, [r3, #24]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 0204 	bic.w	r2, r2, #4
 80080ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6999      	ldr	r1, [r3, #24]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	691a      	ldr	r2, [r3, #16]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	619a      	str	r2, [r3, #24]
      break;
 80080c2:	e064      	b.n	800818e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68b9      	ldr	r1, [r7, #8]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 fb84 	bl	80087d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	699a      	ldr	r2, [r3, #24]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	699a      	ldr	r2, [r3, #24]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6999      	ldr	r1, [r3, #24]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	021a      	lsls	r2, r3, #8
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	430a      	orrs	r2, r1
 8008102:	619a      	str	r2, [r3, #24]
      break;
 8008104:	e043      	b.n	800818e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68b9      	ldr	r1, [r7, #8]
 800810c:	4618      	mov	r0, r3
 800810e:	f000 fbd9 	bl	80088c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	69da      	ldr	r2, [r3, #28]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f042 0208 	orr.w	r2, r2, #8
 8008120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	69da      	ldr	r2, [r3, #28]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0204 	bic.w	r2, r2, #4
 8008130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	69d9      	ldr	r1, [r3, #28]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	691a      	ldr	r2, [r3, #16]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	61da      	str	r2, [r3, #28]
      break;
 8008144:	e023      	b.n	800818e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68b9      	ldr	r1, [r7, #8]
 800814c:	4618      	mov	r0, r3
 800814e:	f000 fc2d 	bl	80089ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	69da      	ldr	r2, [r3, #28]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	69da      	ldr	r2, [r3, #28]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	69d9      	ldr	r1, [r3, #28]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	021a      	lsls	r2, r3, #8
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	61da      	str	r2, [r3, #28]
      break;
 8008186:	e002      	b.n	800818e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	75fb      	strb	r3, [r7, #23]
      break;
 800818c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008196:	7dfb      	ldrb	r3, [r7, #23]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3718      	adds	r7, #24
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d101      	bne.n	80081bc <HAL_TIM_ConfigClockSource+0x1c>
 80081b8:	2302      	movs	r3, #2
 80081ba:	e0b4      	b.n	8008326 <HAL_TIM_ConfigClockSource+0x186>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2202      	movs	r2, #2
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80081da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081f4:	d03e      	beq.n	8008274 <HAL_TIM_ConfigClockSource+0xd4>
 80081f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081fa:	f200 8087 	bhi.w	800830c <HAL_TIM_ConfigClockSource+0x16c>
 80081fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008202:	f000 8086 	beq.w	8008312 <HAL_TIM_ConfigClockSource+0x172>
 8008206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800820a:	d87f      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 800820c:	2b70      	cmp	r3, #112	@ 0x70
 800820e:	d01a      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0xa6>
 8008210:	2b70      	cmp	r3, #112	@ 0x70
 8008212:	d87b      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 8008214:	2b60      	cmp	r3, #96	@ 0x60
 8008216:	d050      	beq.n	80082ba <HAL_TIM_ConfigClockSource+0x11a>
 8008218:	2b60      	cmp	r3, #96	@ 0x60
 800821a:	d877      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 800821c:	2b50      	cmp	r3, #80	@ 0x50
 800821e:	d03c      	beq.n	800829a <HAL_TIM_ConfigClockSource+0xfa>
 8008220:	2b50      	cmp	r3, #80	@ 0x50
 8008222:	d873      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 8008224:	2b40      	cmp	r3, #64	@ 0x40
 8008226:	d058      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x13a>
 8008228:	2b40      	cmp	r3, #64	@ 0x40
 800822a:	d86f      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 800822c:	2b30      	cmp	r3, #48	@ 0x30
 800822e:	d064      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x15a>
 8008230:	2b30      	cmp	r3, #48	@ 0x30
 8008232:	d86b      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 8008234:	2b20      	cmp	r3, #32
 8008236:	d060      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x15a>
 8008238:	2b20      	cmp	r3, #32
 800823a:	d867      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 800823c:	2b00      	cmp	r3, #0
 800823e:	d05c      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x15a>
 8008240:	2b10      	cmp	r3, #16
 8008242:	d05a      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x15a>
 8008244:	e062      	b.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008256:	f000 fda3 	bl	8008da0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008268:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	609a      	str	r2, [r3, #8]
      break;
 8008272:	e04f      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008284:	f000 fd8c 	bl	8008da0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008296:	609a      	str	r2, [r3, #8]
      break;
 8008298:	e03c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082a6:	461a      	mov	r2, r3
 80082a8:	f000 fc4a 	bl	8008b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2150      	movs	r1, #80	@ 0x50
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fd59 	bl	8008d6a <TIM_ITRx_SetConfig>
      break;
 80082b8:	e02c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082c6:	461a      	mov	r2, r3
 80082c8:	f000 fca6 	bl	8008c18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2160      	movs	r1, #96	@ 0x60
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fd49 	bl	8008d6a <TIM_ITRx_SetConfig>
      break;
 80082d8:	e01c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082e6:	461a      	mov	r2, r3
 80082e8:	f000 fc2a 	bl	8008b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2140      	movs	r1, #64	@ 0x40
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fd39 	bl	8008d6a <TIM_ITRx_SetConfig>
      break;
 80082f8:	e00c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4619      	mov	r1, r3
 8008304:	4610      	mov	r0, r2
 8008306:	f000 fd30 	bl	8008d6a <TIM_ITRx_SetConfig>
      break;
 800830a:	e003      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
      break;
 8008310:	e000      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008312:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b0c      	cmp	r3, #12
 8008342:	d831      	bhi.n	80083a8 <HAL_TIM_ReadCapturedValue+0x78>
 8008344:	a201      	add	r2, pc, #4	@ (adr r2, 800834c <HAL_TIM_ReadCapturedValue+0x1c>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	08008381 	.word	0x08008381
 8008350:	080083a9 	.word	0x080083a9
 8008354:	080083a9 	.word	0x080083a9
 8008358:	080083a9 	.word	0x080083a9
 800835c:	0800838b 	.word	0x0800838b
 8008360:	080083a9 	.word	0x080083a9
 8008364:	080083a9 	.word	0x080083a9
 8008368:	080083a9 	.word	0x080083a9
 800836c:	08008395 	.word	0x08008395
 8008370:	080083a9 	.word	0x080083a9
 8008374:	080083a9 	.word	0x080083a9
 8008378:	080083a9 	.word	0x080083a9
 800837c:	0800839f 	.word	0x0800839f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008386:	60fb      	str	r3, [r7, #12]

      break;
 8008388:	e00f      	b.n	80083aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008390:	60fb      	str	r3, [r7, #12]

      break;
 8008392:	e00a      	b.n	80083aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800839a:	60fb      	str	r3, [r7, #12]

      break;
 800839c:	e005      	b.n	80083aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a4:	60fb      	str	r3, [r7, #12]

      break;
 80083a6:	e000      	b.n	80083aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80083a8:	bf00      	nop
  }

  return tmpreg;
 80083aa:	68fb      	ldr	r3, [r7, #12]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008414:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	429a      	cmp	r2, r3
 800841e:	d107      	bne.n	8008430 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2201      	movs	r2, #1
 8008424:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800842e:	e02a      	b.n	8008486 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	429a      	cmp	r2, r3
 8008438:	d107      	bne.n	800844a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2202      	movs	r2, #2
 800843e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008448:	e01d      	b.n	8008486 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	429a      	cmp	r2, r3
 8008452:	d107      	bne.n	8008464 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2204      	movs	r2, #4
 8008458:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008462:	e010      	b.n	8008486 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	429a      	cmp	r2, r3
 800846c:	d107      	bne.n	800847e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2208      	movs	r2, #8
 8008472:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800847c:	e003      	b.n	8008486 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f7ff ffb4 	bl	80083f4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	771a      	strb	r2, [r3, #28]
}
 8008492:	bf00      	nop
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d10b      	bne.n	80084ca <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2201      	movs	r2, #1
 80084b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	69db      	ldr	r3, [r3, #28]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d136      	bne.n	800852e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084c8:	e031      	b.n	800852e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d10b      	bne.n	80084ec <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2202      	movs	r2, #2
 80084d8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	69db      	ldr	r3, [r3, #28]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d125      	bne.n	800852e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084ea:	e020      	b.n	800852e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d10b      	bne.n	800850e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2204      	movs	r2, #4
 80084fa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d114      	bne.n	800852e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800850c:	e00f      	b.n	800852e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	429a      	cmp	r2, r3
 8008516:	d10a      	bne.n	800852e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2208      	movs	r2, #8
 800851c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	69db      	ldr	r3, [r3, #28]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d103      	bne.n	800852e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7f9 faac 	bl	8001a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	771a      	strb	r2, [r3, #28]
}
 800853a:	bf00      	nop
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	429a      	cmp	r2, r3
 8008558:	d103      	bne.n	8008562 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	771a      	strb	r2, [r3, #28]
 8008560:	e019      	b.n	8008596 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	429a      	cmp	r2, r3
 800856a:	d103      	bne.n	8008574 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2202      	movs	r2, #2
 8008570:	771a      	strb	r2, [r3, #28]
 8008572:	e010      	b.n	8008596 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	429a      	cmp	r2, r3
 800857c:	d103      	bne.n	8008586 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2204      	movs	r2, #4
 8008582:	771a      	strb	r2, [r3, #28]
 8008584:	e007      	b.n	8008596 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	429a      	cmp	r2, r3
 800858e:	d102      	bne.n	8008596 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2208      	movs	r2, #8
 8008594:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f7ff ff18 	bl	80083cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	771a      	strb	r2, [r3, #28]
}
 80085a2:	bf00      	nop
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
	...

080085ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a43      	ldr	r2, [pc, #268]	@ (80086cc <TIM_Base_SetConfig+0x120>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d013      	beq.n	80085ec <TIM_Base_SetConfig+0x40>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085ca:	d00f      	beq.n	80085ec <TIM_Base_SetConfig+0x40>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a40      	ldr	r2, [pc, #256]	@ (80086d0 <TIM_Base_SetConfig+0x124>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d00b      	beq.n	80085ec <TIM_Base_SetConfig+0x40>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a3f      	ldr	r2, [pc, #252]	@ (80086d4 <TIM_Base_SetConfig+0x128>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d007      	beq.n	80085ec <TIM_Base_SetConfig+0x40>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a3e      	ldr	r2, [pc, #248]	@ (80086d8 <TIM_Base_SetConfig+0x12c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d003      	beq.n	80085ec <TIM_Base_SetConfig+0x40>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a3d      	ldr	r2, [pc, #244]	@ (80086dc <TIM_Base_SetConfig+0x130>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d108      	bne.n	80085fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a32      	ldr	r2, [pc, #200]	@ (80086cc <TIM_Base_SetConfig+0x120>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d02b      	beq.n	800865e <TIM_Base_SetConfig+0xb2>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800860c:	d027      	beq.n	800865e <TIM_Base_SetConfig+0xb2>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a2f      	ldr	r2, [pc, #188]	@ (80086d0 <TIM_Base_SetConfig+0x124>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d023      	beq.n	800865e <TIM_Base_SetConfig+0xb2>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a2e      	ldr	r2, [pc, #184]	@ (80086d4 <TIM_Base_SetConfig+0x128>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d01f      	beq.n	800865e <TIM_Base_SetConfig+0xb2>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a2d      	ldr	r2, [pc, #180]	@ (80086d8 <TIM_Base_SetConfig+0x12c>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d01b      	beq.n	800865e <TIM_Base_SetConfig+0xb2>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a2c      	ldr	r2, [pc, #176]	@ (80086dc <TIM_Base_SetConfig+0x130>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d017      	beq.n	800865e <TIM_Base_SetConfig+0xb2>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a2b      	ldr	r2, [pc, #172]	@ (80086e0 <TIM_Base_SetConfig+0x134>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d013      	beq.n	800865e <TIM_Base_SetConfig+0xb2>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a2a      	ldr	r2, [pc, #168]	@ (80086e4 <TIM_Base_SetConfig+0x138>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d00f      	beq.n	800865e <TIM_Base_SetConfig+0xb2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a29      	ldr	r2, [pc, #164]	@ (80086e8 <TIM_Base_SetConfig+0x13c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d00b      	beq.n	800865e <TIM_Base_SetConfig+0xb2>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a28      	ldr	r2, [pc, #160]	@ (80086ec <TIM_Base_SetConfig+0x140>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d007      	beq.n	800865e <TIM_Base_SetConfig+0xb2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a27      	ldr	r2, [pc, #156]	@ (80086f0 <TIM_Base_SetConfig+0x144>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d003      	beq.n	800865e <TIM_Base_SetConfig+0xb2>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a26      	ldr	r2, [pc, #152]	@ (80086f4 <TIM_Base_SetConfig+0x148>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d108      	bne.n	8008670 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	4313      	orrs	r3, r2
 800866e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	4313      	orrs	r3, r2
 800867c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	689a      	ldr	r2, [r3, #8]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a0e      	ldr	r2, [pc, #56]	@ (80086cc <TIM_Base_SetConfig+0x120>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d003      	beq.n	800869e <TIM_Base_SetConfig+0xf2>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a10      	ldr	r2, [pc, #64]	@ (80086dc <TIM_Base_SetConfig+0x130>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d103      	bne.n	80086a6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	691a      	ldr	r2, [r3, #16]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f043 0204 	orr.w	r2, r3, #4
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	601a      	str	r2, [r3, #0]
}
 80086be:	bf00      	nop
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	40010000 	.word	0x40010000
 80086d0:	40000400 	.word	0x40000400
 80086d4:	40000800 	.word	0x40000800
 80086d8:	40000c00 	.word	0x40000c00
 80086dc:	40010400 	.word	0x40010400
 80086e0:	40014000 	.word	0x40014000
 80086e4:	40014400 	.word	0x40014400
 80086e8:	40014800 	.word	0x40014800
 80086ec:	40001800 	.word	0x40001800
 80086f0:	40001c00 	.word	0x40001c00
 80086f4:	40002000 	.word	0x40002000

080086f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b087      	sub	sp, #28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a1b      	ldr	r3, [r3, #32]
 800870c:	f023 0201 	bic.w	r2, r3, #1
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f023 0303 	bic.w	r3, r3, #3
 800872e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f023 0302 	bic.w	r3, r3, #2
 8008740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	4313      	orrs	r3, r2
 800874a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a20      	ldr	r2, [pc, #128]	@ (80087d0 <TIM_OC1_SetConfig+0xd8>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d003      	beq.n	800875c <TIM_OC1_SetConfig+0x64>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a1f      	ldr	r2, [pc, #124]	@ (80087d4 <TIM_OC1_SetConfig+0xdc>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d10c      	bne.n	8008776 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f023 0308 	bic.w	r3, r3, #8
 8008762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	4313      	orrs	r3, r2
 800876c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f023 0304 	bic.w	r3, r3, #4
 8008774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a15      	ldr	r2, [pc, #84]	@ (80087d0 <TIM_OC1_SetConfig+0xd8>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d003      	beq.n	8008786 <TIM_OC1_SetConfig+0x8e>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a14      	ldr	r2, [pc, #80]	@ (80087d4 <TIM_OC1_SetConfig+0xdc>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d111      	bne.n	80087aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800878c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	4313      	orrs	r3, r2
 800879e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	685a      	ldr	r2, [r3, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	621a      	str	r2, [r3, #32]
}
 80087c4:	bf00      	nop
 80087c6:	371c      	adds	r7, #28
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	40010000 	.word	0x40010000
 80087d4:	40010400 	.word	0x40010400

080087d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a1b      	ldr	r3, [r3, #32]
 80087ec:	f023 0210 	bic.w	r2, r3, #16
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800880e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	021b      	lsls	r3, r3, #8
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	4313      	orrs	r3, r2
 800881a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f023 0320 	bic.w	r3, r3, #32
 8008822:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	011b      	lsls	r3, r3, #4
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	4313      	orrs	r3, r2
 800882e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a22      	ldr	r2, [pc, #136]	@ (80088bc <TIM_OC2_SetConfig+0xe4>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d003      	beq.n	8008840 <TIM_OC2_SetConfig+0x68>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a21      	ldr	r2, [pc, #132]	@ (80088c0 <TIM_OC2_SetConfig+0xe8>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d10d      	bne.n	800885c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	011b      	lsls	r3, r3, #4
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	4313      	orrs	r3, r2
 8008852:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800885a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a17      	ldr	r2, [pc, #92]	@ (80088bc <TIM_OC2_SetConfig+0xe4>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d003      	beq.n	800886c <TIM_OC2_SetConfig+0x94>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a16      	ldr	r2, [pc, #88]	@ (80088c0 <TIM_OC2_SetConfig+0xe8>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d113      	bne.n	8008894 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800887a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	4313      	orrs	r3, r2
 8008886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	4313      	orrs	r3, r2
 8008892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	621a      	str	r2, [r3, #32]
}
 80088ae:	bf00      	nop
 80088b0:	371c      	adds	r7, #28
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	40010000 	.word	0x40010000
 80088c0:	40010400 	.word	0x40010400

080088c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a1b      	ldr	r3, [r3, #32]
 80088d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f023 0303 	bic.w	r3, r3, #3
 80088fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	4313      	orrs	r3, r2
 8008904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800890c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	021b      	lsls	r3, r3, #8
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	4313      	orrs	r3, r2
 8008918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a21      	ldr	r2, [pc, #132]	@ (80089a4 <TIM_OC3_SetConfig+0xe0>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d003      	beq.n	800892a <TIM_OC3_SetConfig+0x66>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a20      	ldr	r2, [pc, #128]	@ (80089a8 <TIM_OC3_SetConfig+0xe4>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d10d      	bne.n	8008946 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008930:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	021b      	lsls	r3, r3, #8
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	4313      	orrs	r3, r2
 800893c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a16      	ldr	r2, [pc, #88]	@ (80089a4 <TIM_OC3_SetConfig+0xe0>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d003      	beq.n	8008956 <TIM_OC3_SetConfig+0x92>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a15      	ldr	r2, [pc, #84]	@ (80089a8 <TIM_OC3_SetConfig+0xe4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d113      	bne.n	800897e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800895c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	4313      	orrs	r3, r2
 8008970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	011b      	lsls	r3, r3, #4
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	4313      	orrs	r3, r2
 800897c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	621a      	str	r2, [r3, #32]
}
 8008998:	bf00      	nop
 800899a:	371c      	adds	r7, #28
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	40010000 	.word	0x40010000
 80089a8:	40010400 	.word	0x40010400

080089ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a1b      	ldr	r3, [r3, #32]
 80089c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	021b      	lsls	r3, r3, #8
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80089f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	031b      	lsls	r3, r3, #12
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a12      	ldr	r2, [pc, #72]	@ (8008a50 <TIM_OC4_SetConfig+0xa4>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d003      	beq.n	8008a14 <TIM_OC4_SetConfig+0x68>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a11      	ldr	r2, [pc, #68]	@ (8008a54 <TIM_OC4_SetConfig+0xa8>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d109      	bne.n	8008a28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	695b      	ldr	r3, [r3, #20]
 8008a20:	019b      	lsls	r3, r3, #6
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	621a      	str	r2, [r3, #32]
}
 8008a42:	bf00      	nop
 8008a44:	371c      	adds	r7, #28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	40010000 	.word	0x40010000
 8008a54:	40010400 	.word	0x40010400

08008a58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6a1b      	ldr	r3, [r3, #32]
 8008a70:	f023 0201 	bic.w	r2, r3, #1
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	4a28      	ldr	r2, [pc, #160]	@ (8008b24 <TIM_TI1_SetConfig+0xcc>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d01b      	beq.n	8008abe <TIM_TI1_SetConfig+0x66>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a8c:	d017      	beq.n	8008abe <TIM_TI1_SetConfig+0x66>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4a25      	ldr	r2, [pc, #148]	@ (8008b28 <TIM_TI1_SetConfig+0xd0>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d013      	beq.n	8008abe <TIM_TI1_SetConfig+0x66>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4a24      	ldr	r2, [pc, #144]	@ (8008b2c <TIM_TI1_SetConfig+0xd4>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d00f      	beq.n	8008abe <TIM_TI1_SetConfig+0x66>
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	4a23      	ldr	r2, [pc, #140]	@ (8008b30 <TIM_TI1_SetConfig+0xd8>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d00b      	beq.n	8008abe <TIM_TI1_SetConfig+0x66>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	4a22      	ldr	r2, [pc, #136]	@ (8008b34 <TIM_TI1_SetConfig+0xdc>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d007      	beq.n	8008abe <TIM_TI1_SetConfig+0x66>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	4a21      	ldr	r2, [pc, #132]	@ (8008b38 <TIM_TI1_SetConfig+0xe0>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d003      	beq.n	8008abe <TIM_TI1_SetConfig+0x66>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	4a20      	ldr	r2, [pc, #128]	@ (8008b3c <TIM_TI1_SetConfig+0xe4>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d101      	bne.n	8008ac2 <TIM_TI1_SetConfig+0x6a>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <TIM_TI1_SetConfig+0x6c>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d008      	beq.n	8008ada <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	f023 0303 	bic.w	r3, r3, #3
 8008ace:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	617b      	str	r3, [r7, #20]
 8008ad8:	e003      	b.n	8008ae2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f043 0301 	orr.w	r3, r3, #1
 8008ae0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ae8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	011b      	lsls	r3, r3, #4
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	f023 030a 	bic.w	r3, r3, #10
 8008afc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f003 030a 	and.w	r3, r3, #10
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	621a      	str	r2, [r3, #32]
}
 8008b16:	bf00      	nop
 8008b18:	371c      	adds	r7, #28
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	40010000 	.word	0x40010000
 8008b28:	40000400 	.word	0x40000400
 8008b2c:	40000800 	.word	0x40000800
 8008b30:	40000c00 	.word	0x40000c00
 8008b34:	40010400 	.word	0x40010400
 8008b38:	40014000 	.word	0x40014000
 8008b3c:	40001800 	.word	0x40001800

08008b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6a1b      	ldr	r3, [r3, #32]
 8008b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	f023 0201 	bic.w	r2, r3, #1
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	011b      	lsls	r3, r3, #4
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f023 030a 	bic.w	r3, r3, #10
 8008b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	621a      	str	r2, [r3, #32]
}
 8008b92:	bf00      	nop
 8008b94:	371c      	adds	r7, #28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b087      	sub	sp, #28
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	60f8      	str	r0, [r7, #12]
 8008ba6:	60b9      	str	r1, [r7, #8]
 8008ba8:	607a      	str	r2, [r7, #4]
 8008baa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6a1b      	ldr	r3, [r3, #32]
 8008bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	f023 0210 	bic.w	r2, r3, #16
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	021b      	lsls	r3, r3, #8
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008bdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	031b      	lsls	r3, r3, #12
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	011b      	lsls	r3, r3, #4
 8008bf6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	621a      	str	r2, [r3, #32]
}
 8008c0c:	bf00      	nop
 8008c0e:	371c      	adds	r7, #28
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6a1b      	ldr	r3, [r3, #32]
 8008c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	f023 0210 	bic.w	r2, r3, #16
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	031b      	lsls	r3, r3, #12
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	011b      	lsls	r3, r3, #4
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	621a      	str	r2, [r3, #32]
}
 8008c6c:	bf00      	nop
 8008c6e:	371c      	adds	r7, #28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
 8008c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	69db      	ldr	r3, [r3, #28]
 8008c9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f023 0303 	bic.w	r3, r3, #3
 8008ca4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008cb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	011b      	lsls	r3, r3, #4
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	621a      	str	r2, [r3, #32]
}
 8008ce4:	bf00      	nop
 8008ce6:	371c      	adds	r7, #28
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b087      	sub	sp, #28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	69db      	ldr	r3, [r3, #28]
 8008d14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d1c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	021b      	lsls	r3, r3, #8
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d2e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	031b      	lsls	r3, r3, #12
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008d42:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	031b      	lsls	r3, r3, #12
 8008d48:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	621a      	str	r2, [r3, #32]
}
 8008d5e:	bf00      	nop
 8008d60:	371c      	adds	r7, #28
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b085      	sub	sp, #20
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	f043 0307 	orr.w	r3, r3, #7
 8008d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	609a      	str	r2, [r3, #8]
}
 8008d94:	bf00      	nop
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008dba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	021a      	lsls	r2, r3, #8
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	609a      	str	r2, [r3, #8]
}
 8008dd4:	bf00      	nop
 8008dd6:	371c      	adds	r7, #28
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	f003 031f 	and.w	r3, r3, #31
 8008df2:	2201      	movs	r2, #1
 8008df4:	fa02 f303 	lsl.w	r3, r2, r3
 8008df8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6a1a      	ldr	r2, [r3, #32]
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	43db      	mvns	r3, r3
 8008e02:	401a      	ands	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6a1a      	ldr	r2, [r3, #32]
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	f003 031f 	and.w	r3, r3, #31
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	fa01 f303 	lsl.w	r3, r1, r3
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	621a      	str	r2, [r3, #32]
}
 8008e1e:	bf00      	nop
 8008e20:	371c      	adds	r7, #28
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
	...

08008e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d101      	bne.n	8008e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e40:	2302      	movs	r3, #2
 8008e42:	e05a      	b.n	8008efa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a21      	ldr	r2, [pc, #132]	@ (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d022      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e90:	d01d      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a1d      	ldr	r2, [pc, #116]	@ (8008f0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d018      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8008f10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d013      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8008f14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d00e      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a18      	ldr	r2, [pc, #96]	@ (8008f18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d009      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a17      	ldr	r2, [pc, #92]	@ (8008f1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d004      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a15      	ldr	r2, [pc, #84]	@ (8008f20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d10c      	bne.n	8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	40010000 	.word	0x40010000
 8008f0c:	40000400 	.word	0x40000400
 8008f10:	40000800 	.word	0x40000800
 8008f14:	40000c00 	.word	0x40000c00
 8008f18:	40010400 	.word	0x40010400
 8008f1c:	40014000 	.word	0x40014000
 8008f20:	40001800 	.word	0x40001800

08008f24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d101      	bne.n	8008f40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	e03d      	b.n	8008fbc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e042      	b.n	8009088 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d106      	bne.n	800901c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7f9 fd44 	bl	8002aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2224      	movs	r2, #36	@ 0x24
 8009020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68da      	ldr	r2, [r3, #12]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fde3 	bl	8009c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	691a      	ldr	r2, [r3, #16]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	695a      	ldr	r2, [r3, #20]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68da      	ldr	r2, [r3, #12]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2220      	movs	r2, #32
 8009074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2220      	movs	r2, #32
 800907c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b08c      	sub	sp, #48	@ 0x30
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	4613      	mov	r3, r2
 800909c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b20      	cmp	r3, #32
 80090a8:	d162      	bne.n	8009170 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <HAL_UART_Transmit_DMA+0x26>
 80090b0:	88fb      	ldrh	r3, [r7, #6]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e05b      	b.n	8009172 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	88fa      	ldrh	r2, [r7, #6]
 80090c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	88fa      	ldrh	r2, [r7, #6]
 80090ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2221      	movs	r2, #33	@ 0x21
 80090d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090de:	4a27      	ldr	r2, [pc, #156]	@ (800917c <HAL_UART_Transmit_DMA+0xec>)
 80090e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e6:	4a26      	ldr	r2, [pc, #152]	@ (8009180 <HAL_UART_Transmit_DMA+0xf0>)
 80090e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ee:	4a25      	ldr	r2, [pc, #148]	@ (8009184 <HAL_UART_Transmit_DMA+0xf4>)
 80090f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f6:	2200      	movs	r2, #0
 80090f8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80090fa:	f107 0308 	add.w	r3, r7, #8
 80090fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009106:	6819      	ldr	r1, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3304      	adds	r3, #4
 800910e:	461a      	mov	r2, r3
 8009110:	88fb      	ldrh	r3, [r7, #6]
 8009112:	f7fa fda5 	bl	8003c60 <HAL_DMA_Start_IT>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d008      	beq.n	800912e <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2210      	movs	r2, #16
 8009120:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2220      	movs	r2, #32
 8009126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e021      	b.n	8009172 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009136:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3314      	adds	r3, #20
 800913e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	e853 3f00 	ldrex	r3, [r3]
 8009146:	617b      	str	r3, [r7, #20]
   return(result);
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800914e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	3314      	adds	r3, #20
 8009156:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009158:	627a      	str	r2, [r7, #36]	@ 0x24
 800915a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915c:	6a39      	ldr	r1, [r7, #32]
 800915e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009160:	e841 2300 	strex	r3, r2, [r1]
 8009164:	61fb      	str	r3, [r7, #28]
   return(result);
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1e5      	bne.n	8009138 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	e000      	b.n	8009172 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8009170:	2302      	movs	r3, #2
  }
}
 8009172:	4618      	mov	r0, r3
 8009174:	3730      	adds	r7, #48	@ 0x30
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	08009731 	.word	0x08009731
 8009180:	080097cb 	.word	0x080097cb
 8009184:	080097e7 	.word	0x080097e7

08009188 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b0ba      	sub	sp, #232	@ 0xe8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80091b4:	2300      	movs	r3, #0
 80091b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80091ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091be:	f003 030f 	and.w	r3, r3, #15
 80091c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80091c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10f      	bne.n	80091ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091d2:	f003 0320 	and.w	r3, r3, #32
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d009      	beq.n	80091ee <HAL_UART_IRQHandler+0x66>
 80091da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091de:	f003 0320 	and.w	r3, r3, #32
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 fc4b 	bl	8009a82 <UART_Receive_IT>
      return;
 80091ec:	e273      	b.n	80096d6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80091ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 80de 	beq.w	80093b4 <HAL_UART_IRQHandler+0x22c>
 80091f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	2b00      	cmp	r3, #0
 8009202:	d106      	bne.n	8009212 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009208:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800920c:	2b00      	cmp	r3, #0
 800920e:	f000 80d1 	beq.w	80093b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00b      	beq.n	8009236 <HAL_UART_IRQHandler+0xae>
 800921e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009226:	2b00      	cmp	r3, #0
 8009228:	d005      	beq.n	8009236 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800922e:	f043 0201 	orr.w	r2, r3, #1
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800923a:	f003 0304 	and.w	r3, r3, #4
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00b      	beq.n	800925a <HAL_UART_IRQHandler+0xd2>
 8009242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	2b00      	cmp	r3, #0
 800924c:	d005      	beq.n	800925a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009252:	f043 0202 	orr.w	r2, r3, #2
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800925a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00b      	beq.n	800927e <HAL_UART_IRQHandler+0xf6>
 8009266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800926a:	f003 0301 	and.w	r3, r3, #1
 800926e:	2b00      	cmp	r3, #0
 8009270:	d005      	beq.n	800927e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009276:	f043 0204 	orr.w	r2, r3, #4
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800927e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009282:	f003 0308 	and.w	r3, r3, #8
 8009286:	2b00      	cmp	r3, #0
 8009288:	d011      	beq.n	80092ae <HAL_UART_IRQHandler+0x126>
 800928a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800928e:	f003 0320 	and.w	r3, r3, #32
 8009292:	2b00      	cmp	r3, #0
 8009294:	d105      	bne.n	80092a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d005      	beq.n	80092ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092a6:	f043 0208 	orr.w	r2, r3, #8
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f000 820a 	beq.w	80096cc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80092b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092bc:	f003 0320 	and.w	r3, r3, #32
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d008      	beq.n	80092d6 <HAL_UART_IRQHandler+0x14e>
 80092c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092c8:	f003 0320 	and.w	r3, r3, #32
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fbd6 	bl	8009a82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e0:	2b40      	cmp	r3, #64	@ 0x40
 80092e2:	bf0c      	ite	eq
 80092e4:	2301      	moveq	r3, #1
 80092e6:	2300      	movne	r3, #0
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092f2:	f003 0308 	and.w	r3, r3, #8
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d103      	bne.n	8009302 <HAL_UART_IRQHandler+0x17a>
 80092fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d04f      	beq.n	80093a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fae1 	bl	80098ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009312:	2b40      	cmp	r3, #64	@ 0x40
 8009314:	d141      	bne.n	800939a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3314      	adds	r3, #20
 800931c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009324:	e853 3f00 	ldrex	r3, [r3]
 8009328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800932c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009334:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	3314      	adds	r3, #20
 800933e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009342:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009346:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800934e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800935a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1d9      	bne.n	8009316 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009366:	2b00      	cmp	r3, #0
 8009368:	d013      	beq.n	8009392 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800936e:	4a8a      	ldr	r2, [pc, #552]	@ (8009598 <HAL_UART_IRQHandler+0x410>)
 8009370:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009376:	4618      	mov	r0, r3
 8009378:	f7fa fd3a 	bl	8003df0 <HAL_DMA_Abort_IT>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d016      	beq.n	80093b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800938c:	4610      	mov	r0, r2
 800938e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009390:	e00e      	b.n	80093b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f9b6 	bl	8009704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009398:	e00a      	b.n	80093b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f9b2 	bl	8009704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a0:	e006      	b.n	80093b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f9ae 	bl	8009704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80093ae:	e18d      	b.n	80096cc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b0:	bf00      	nop
    return;
 80093b2:	e18b      	b.n	80096cc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	f040 8167 	bne.w	800968c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80093be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c2:	f003 0310 	and.w	r3, r3, #16
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f000 8160 	beq.w	800968c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80093cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093d0:	f003 0310 	and.w	r3, r3, #16
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 8159 	beq.w	800968c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093da:	2300      	movs	r3, #0
 80093dc:	60bb      	str	r3, [r7, #8]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	60bb      	str	r3, [r7, #8]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	60bb      	str	r3, [r7, #8]
 80093ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093fa:	2b40      	cmp	r3, #64	@ 0x40
 80093fc:	f040 80ce 	bne.w	800959c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800940c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 80a9 	beq.w	8009568 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800941a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800941e:	429a      	cmp	r2, r3
 8009420:	f080 80a2 	bcs.w	8009568 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800942a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009436:	f000 8088 	beq.w	800954a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	330c      	adds	r3, #12
 8009440:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009448:	e853 3f00 	ldrex	r3, [r3]
 800944c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009450:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009454:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009458:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	330c      	adds	r3, #12
 8009462:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009466:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800946a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009472:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800947e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1d9      	bne.n	800943a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3314      	adds	r3, #20
 800948c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009496:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009498:	f023 0301 	bic.w	r3, r3, #1
 800949c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3314      	adds	r3, #20
 80094a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80094aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80094ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80094b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80094b6:	e841 2300 	strex	r3, r2, [r1]
 80094ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80094bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1e1      	bne.n	8009486 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3314      	adds	r3, #20
 80094c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094cc:	e853 3f00 	ldrex	r3, [r3]
 80094d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80094d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3314      	adds	r3, #20
 80094e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80094e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094ee:	e841 2300 	strex	r3, r2, [r1]
 80094f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e3      	bne.n	80094c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	330c      	adds	r3, #12
 800950e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009512:	e853 3f00 	ldrex	r3, [r3]
 8009516:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800951a:	f023 0310 	bic.w	r3, r3, #16
 800951e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	330c      	adds	r3, #12
 8009528:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800952c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800952e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009530:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009532:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009534:	e841 2300 	strex	r3, r2, [r1]
 8009538:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800953a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1e3      	bne.n	8009508 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009544:	4618      	mov	r0, r3
 8009546:	f7fa fbe3 	bl	8003d10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2202      	movs	r2, #2
 800954e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009558:	b29b      	uxth	r3, r3
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	b29b      	uxth	r3, r3
 800955e:	4619      	mov	r1, r3
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f8d9 	bl	8009718 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009566:	e0b3      	b.n	80096d0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800956c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009570:	429a      	cmp	r2, r3
 8009572:	f040 80ad 	bne.w	80096d0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800957a:	69db      	ldr	r3, [r3, #28]
 800957c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009580:	f040 80a6 	bne.w	80096d0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2202      	movs	r2, #2
 8009588:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f8c1 	bl	8009718 <HAL_UARTEx_RxEventCallback>
      return;
 8009596:	e09b      	b.n	80096d0 <HAL_UART_IRQHandler+0x548>
 8009598:	08009991 	.word	0x08009991
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 808e 	beq.w	80096d4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80095b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 8089 	beq.w	80096d4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	330c      	adds	r3, #12
 80095c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095cc:	e853 3f00 	ldrex	r3, [r3]
 80095d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	330c      	adds	r3, #12
 80095e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80095e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80095e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095ee:	e841 2300 	strex	r3, r2, [r1]
 80095f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1e3      	bne.n	80095c2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3314      	adds	r3, #20
 8009600:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009604:	e853 3f00 	ldrex	r3, [r3]
 8009608:	623b      	str	r3, [r7, #32]
   return(result);
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	f023 0301 	bic.w	r3, r3, #1
 8009610:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3314      	adds	r3, #20
 800961a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800961e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009620:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800962c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e3      	bne.n	80095fa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2220      	movs	r2, #32
 8009636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	330c      	adds	r3, #12
 8009646:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	e853 3f00 	ldrex	r3, [r3]
 800964e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f023 0310 	bic.w	r3, r3, #16
 8009656:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	330c      	adds	r3, #12
 8009660:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009664:	61fa      	str	r2, [r7, #28]
 8009666:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009668:	69b9      	ldr	r1, [r7, #24]
 800966a:	69fa      	ldr	r2, [r7, #28]
 800966c:	e841 2300 	strex	r3, r2, [r1]
 8009670:	617b      	str	r3, [r7, #20]
   return(result);
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1e3      	bne.n	8009640 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2202      	movs	r2, #2
 800967c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800967e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f847 	bl	8009718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800968a:	e023      	b.n	80096d4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800968c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009694:	2b00      	cmp	r3, #0
 8009696:	d009      	beq.n	80096ac <HAL_UART_IRQHandler+0x524>
 8009698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800969c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d003      	beq.n	80096ac <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f984 	bl	80099b2 <UART_Transmit_IT>
    return;
 80096aa:	e014      	b.n	80096d6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80096ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00e      	beq.n	80096d6 <HAL_UART_IRQHandler+0x54e>
 80096b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d008      	beq.n	80096d6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f9c4 	bl	8009a52 <UART_EndTransmit_IT>
    return;
 80096ca:	e004      	b.n	80096d6 <HAL_UART_IRQHandler+0x54e>
    return;
 80096cc:	bf00      	nop
 80096ce:	e002      	b.n	80096d6 <HAL_UART_IRQHandler+0x54e>
      return;
 80096d0:	bf00      	nop
 80096d2:	e000      	b.n	80096d6 <HAL_UART_IRQHandler+0x54e>
      return;
 80096d4:	bf00      	nop
  }
}
 80096d6:	37e8      	adds	r7, #232	@ 0xe8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80096f8:	bf00      	nop
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b090      	sub	sp, #64	@ 0x40
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800973c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009748:	2b00      	cmp	r3, #0
 800974a:	d137      	bne.n	80097bc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800974c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800974e:	2200      	movs	r2, #0
 8009750:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3314      	adds	r3, #20
 8009758:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975c:	e853 3f00 	ldrex	r3, [r3]
 8009760:	623b      	str	r3, [r7, #32]
   return(result);
 8009762:	6a3b      	ldr	r3, [r7, #32]
 8009764:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009768:	63bb      	str	r3, [r7, #56]	@ 0x38
 800976a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3314      	adds	r3, #20
 8009770:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009772:	633a      	str	r2, [r7, #48]	@ 0x30
 8009774:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009776:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800977a:	e841 2300 	strex	r3, r2, [r1]
 800977e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1e5      	bne.n	8009752 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	330c      	adds	r3, #12
 800978c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	e853 3f00 	ldrex	r3, [r3]
 8009794:	60fb      	str	r3, [r7, #12]
   return(result);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800979c:	637b      	str	r3, [r7, #52]	@ 0x34
 800979e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	330c      	adds	r3, #12
 80097a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097a6:	61fa      	str	r2, [r7, #28]
 80097a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097aa:	69b9      	ldr	r1, [r7, #24]
 80097ac:	69fa      	ldr	r2, [r7, #28]
 80097ae:	e841 2300 	strex	r3, r2, [r1]
 80097b2:	617b      	str	r3, [r7, #20]
   return(result);
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1e5      	bne.n	8009786 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097ba:	e002      	b.n	80097c2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80097bc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80097be:	f7f8 f8b7 	bl	8001930 <HAL_UART_TxCpltCallback>
}
 80097c2:	bf00      	nop
 80097c4:	3740      	adds	r7, #64	@ 0x40
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b084      	sub	sp, #16
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f7ff ff7f 	bl	80096dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097de:	bf00      	nop
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b084      	sub	sp, #16
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009802:	2b80      	cmp	r3, #128	@ 0x80
 8009804:	bf0c      	ite	eq
 8009806:	2301      	moveq	r3, #1
 8009808:	2300      	movne	r3, #0
 800980a:	b2db      	uxtb	r3, r3
 800980c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009814:	b2db      	uxtb	r3, r3
 8009816:	2b21      	cmp	r3, #33	@ 0x21
 8009818:	d108      	bne.n	800982c <UART_DMAError+0x46>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d005      	beq.n	800982c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	2200      	movs	r2, #0
 8009824:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009826:	68b8      	ldr	r0, [r7, #8]
 8009828:	f000 f827 	bl	800987a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009836:	2b40      	cmp	r3, #64	@ 0x40
 8009838:	bf0c      	ite	eq
 800983a:	2301      	moveq	r3, #1
 800983c:	2300      	movne	r3, #0
 800983e:	b2db      	uxtb	r3, r3
 8009840:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b22      	cmp	r3, #34	@ 0x22
 800984c:	d108      	bne.n	8009860 <UART_DMAError+0x7a>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d005      	beq.n	8009860 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	2200      	movs	r2, #0
 8009858:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800985a:	68b8      	ldr	r0, [r7, #8]
 800985c:	f000 f835 	bl	80098ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009864:	f043 0210 	orr.w	r2, r3, #16
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800986c:	68b8      	ldr	r0, [r7, #8]
 800986e:	f7ff ff49 	bl	8009704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009872:	bf00      	nop
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800987a:	b480      	push	{r7}
 800987c:	b089      	sub	sp, #36	@ 0x24
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	330c      	adds	r3, #12
 8009888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	e853 3f00 	ldrex	r3, [r3]
 8009890:	60bb      	str	r3, [r7, #8]
   return(result);
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009898:	61fb      	str	r3, [r7, #28]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	330c      	adds	r3, #12
 80098a0:	69fa      	ldr	r2, [r7, #28]
 80098a2:	61ba      	str	r2, [r7, #24]
 80098a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a6:	6979      	ldr	r1, [r7, #20]
 80098a8:	69ba      	ldr	r2, [r7, #24]
 80098aa:	e841 2300 	strex	r3, r2, [r1]
 80098ae:	613b      	str	r3, [r7, #16]
   return(result);
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1e5      	bne.n	8009882 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2220      	movs	r2, #32
 80098ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80098be:	bf00      	nop
 80098c0:	3724      	adds	r7, #36	@ 0x24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098ca:	b480      	push	{r7}
 80098cc:	b095      	sub	sp, #84	@ 0x54
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	330c      	adds	r3, #12
 80098d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098dc:	e853 3f00 	ldrex	r3, [r3]
 80098e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	330c      	adds	r3, #12
 80098f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80098f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098fa:	e841 2300 	strex	r3, r2, [r1]
 80098fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1e5      	bne.n	80098d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	3314      	adds	r3, #20
 800990c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	e853 3f00 	ldrex	r3, [r3]
 8009914:	61fb      	str	r3, [r7, #28]
   return(result);
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	f023 0301 	bic.w	r3, r3, #1
 800991c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3314      	adds	r3, #20
 8009924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009926:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009928:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800992c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800992e:	e841 2300 	strex	r3, r2, [r1]
 8009932:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1e5      	bne.n	8009906 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800993e:	2b01      	cmp	r3, #1
 8009940:	d119      	bne.n	8009976 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	330c      	adds	r3, #12
 8009948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	e853 3f00 	ldrex	r3, [r3]
 8009950:	60bb      	str	r3, [r7, #8]
   return(result);
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	f023 0310 	bic.w	r3, r3, #16
 8009958:	647b      	str	r3, [r7, #68]	@ 0x44
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	330c      	adds	r3, #12
 8009960:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009962:	61ba      	str	r2, [r7, #24]
 8009964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	6979      	ldr	r1, [r7, #20]
 8009968:	69ba      	ldr	r2, [r7, #24]
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	613b      	str	r3, [r7, #16]
   return(result);
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e5      	bne.n	8009942 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2220      	movs	r2, #32
 800997a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009984:	bf00      	nop
 8009986:	3754      	adds	r7, #84	@ 0x54
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800999c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f7ff fead 	bl	8009704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099aa:	bf00      	nop
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b085      	sub	sp, #20
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b21      	cmp	r3, #33	@ 0x21
 80099c4:	d13e      	bne.n	8009a44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099ce:	d114      	bne.n	80099fa <UART_Transmit_IT+0x48>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d110      	bne.n	80099fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a1b      	ldr	r3, [r3, #32]
 80099dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	1c9a      	adds	r2, r3, #2
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	621a      	str	r2, [r3, #32]
 80099f8:	e008      	b.n	8009a0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a1b      	ldr	r3, [r3, #32]
 80099fe:	1c59      	adds	r1, r3, #1
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	6211      	str	r1, [r2, #32]
 8009a04:	781a      	ldrb	r2, [r3, #0]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	3b01      	subs	r3, #1
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10f      	bne.n	8009a40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68da      	ldr	r2, [r3, #12]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68da      	ldr	r2, [r3, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	e000      	b.n	8009a46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a44:	2302      	movs	r3, #2
  }
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b082      	sub	sp, #8
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68da      	ldr	r2, [r3, #12]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2220      	movs	r2, #32
 8009a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7f7 ff5c 	bl	8001930 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b08c      	sub	sp, #48	@ 0x30
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b22      	cmp	r3, #34	@ 0x22
 8009a9c:	f040 80aa 	bne.w	8009bf4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009aa8:	d115      	bne.n	8009ad6 <UART_Receive_IT+0x54>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d111      	bne.n	8009ad6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ace:	1c9a      	adds	r2, r3, #2
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	629a      	str	r2, [r3, #40]	@ 0x28
 8009ad4:	e024      	b.n	8009b20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ae4:	d007      	beq.n	8009af6 <UART_Receive_IT+0x74>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10a      	bne.n	8009b04 <UART_Receive_IT+0x82>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d106      	bne.n	8009b04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b00:	701a      	strb	r2, [r3, #0]
 8009b02:	e008      	b.n	8009b16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b10:	b2da      	uxtb	r2, r3
 8009b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b1a:	1c5a      	adds	r2, r3, #1
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	3b01      	subs	r3, #1
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d15d      	bne.n	8009bf0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68da      	ldr	r2, [r3, #12]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f022 0220 	bic.w	r2, r2, #32
 8009b42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68da      	ldr	r2, [r3, #12]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009b52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	695a      	ldr	r2, [r3, #20]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f022 0201 	bic.w	r2, r2, #1
 8009b62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2220      	movs	r2, #32
 8009b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d135      	bne.n	8009be6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	330c      	adds	r3, #12
 8009b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	e853 3f00 	ldrex	r3, [r3]
 8009b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	f023 0310 	bic.w	r3, r3, #16
 8009b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	330c      	adds	r3, #12
 8009b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ba0:	623a      	str	r2, [r7, #32]
 8009ba2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba4:	69f9      	ldr	r1, [r7, #28]
 8009ba6:	6a3a      	ldr	r2, [r7, #32]
 8009ba8:	e841 2300 	strex	r3, r2, [r1]
 8009bac:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1e5      	bne.n	8009b80 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f003 0310 	and.w	r3, r3, #16
 8009bbe:	2b10      	cmp	r3, #16
 8009bc0:	d10a      	bne.n	8009bd8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	60fb      	str	r3, [r7, #12]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	60fb      	str	r3, [r7, #12]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	60fb      	str	r3, [r7, #12]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff fd9a 	bl	8009718 <HAL_UARTEx_RxEventCallback>
 8009be4:	e002      	b.n	8009bec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7ff fd82 	bl	80096f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	e002      	b.n	8009bf6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	e000      	b.n	8009bf6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009bf4:	2302      	movs	r3, #2
  }
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3730      	adds	r7, #48	@ 0x30
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
	...

08009c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c04:	b0c0      	sub	sp, #256	@ 0x100
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c1c:	68d9      	ldr	r1, [r3, #12]
 8009c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	ea40 0301 	orr.w	r3, r0, r1
 8009c28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c2e:	689a      	ldr	r2, [r3, #8]
 8009c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	431a      	orrs	r2, r3
 8009c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	431a      	orrs	r2, r3
 8009c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009c58:	f021 010c 	bic.w	r1, r1, #12
 8009c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009c66:	430b      	orrs	r3, r1
 8009c68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c7a:	6999      	ldr	r1, [r3, #24]
 8009c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	ea40 0301 	orr.w	r3, r0, r1
 8009c86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	4b8f      	ldr	r3, [pc, #572]	@ (8009ecc <UART_SetConfig+0x2cc>)
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d005      	beq.n	8009ca0 <UART_SetConfig+0xa0>
 8009c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	4b8d      	ldr	r3, [pc, #564]	@ (8009ed0 <UART_SetConfig+0x2d0>)
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d104      	bne.n	8009caa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ca0:	f7fc fe9e 	bl	80069e0 <HAL_RCC_GetPCLK2Freq>
 8009ca4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009ca8:	e003      	b.n	8009cb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009caa:	f7fc fe85 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8009cae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cbc:	f040 810c 	bne.w	8009ed8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009cca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009cce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009cd2:	4622      	mov	r2, r4
 8009cd4:	462b      	mov	r3, r5
 8009cd6:	1891      	adds	r1, r2, r2
 8009cd8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009cda:	415b      	adcs	r3, r3
 8009cdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	eb12 0801 	adds.w	r8, r2, r1
 8009ce8:	4629      	mov	r1, r5
 8009cea:	eb43 0901 	adc.w	r9, r3, r1
 8009cee:	f04f 0200 	mov.w	r2, #0
 8009cf2:	f04f 0300 	mov.w	r3, #0
 8009cf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009cfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009cfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d02:	4690      	mov	r8, r2
 8009d04:	4699      	mov	r9, r3
 8009d06:	4623      	mov	r3, r4
 8009d08:	eb18 0303 	adds.w	r3, r8, r3
 8009d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009d10:	462b      	mov	r3, r5
 8009d12:	eb49 0303 	adc.w	r3, r9, r3
 8009d16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009d26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009d2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009d2e:	460b      	mov	r3, r1
 8009d30:	18db      	adds	r3, r3, r3
 8009d32:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d34:	4613      	mov	r3, r2
 8009d36:	eb42 0303 	adc.w	r3, r2, r3
 8009d3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009d40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009d44:	f7f6 ff80 	bl	8000c48 <__aeabi_uldivmod>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4b61      	ldr	r3, [pc, #388]	@ (8009ed4 <UART_SetConfig+0x2d4>)
 8009d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8009d52:	095b      	lsrs	r3, r3, #5
 8009d54:	011c      	lsls	r4, r3, #4
 8009d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009d64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009d68:	4642      	mov	r2, r8
 8009d6a:	464b      	mov	r3, r9
 8009d6c:	1891      	adds	r1, r2, r2
 8009d6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009d70:	415b      	adcs	r3, r3
 8009d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009d78:	4641      	mov	r1, r8
 8009d7a:	eb12 0a01 	adds.w	sl, r2, r1
 8009d7e:	4649      	mov	r1, r9
 8009d80:	eb43 0b01 	adc.w	fp, r3, r1
 8009d84:	f04f 0200 	mov.w	r2, #0
 8009d88:	f04f 0300 	mov.w	r3, #0
 8009d8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d98:	4692      	mov	sl, r2
 8009d9a:	469b      	mov	fp, r3
 8009d9c:	4643      	mov	r3, r8
 8009d9e:	eb1a 0303 	adds.w	r3, sl, r3
 8009da2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009da6:	464b      	mov	r3, r9
 8009da8:	eb4b 0303 	adc.w	r3, fp, r3
 8009dac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009dbc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009dc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	18db      	adds	r3, r3, r3
 8009dc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dca:	4613      	mov	r3, r2
 8009dcc:	eb42 0303 	adc.w	r3, r2, r3
 8009dd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009dd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009dda:	f7f6 ff35 	bl	8000c48 <__aeabi_uldivmod>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	4611      	mov	r1, r2
 8009de4:	4b3b      	ldr	r3, [pc, #236]	@ (8009ed4 <UART_SetConfig+0x2d4>)
 8009de6:	fba3 2301 	umull	r2, r3, r3, r1
 8009dea:	095b      	lsrs	r3, r3, #5
 8009dec:	2264      	movs	r2, #100	@ 0x64
 8009dee:	fb02 f303 	mul.w	r3, r2, r3
 8009df2:	1acb      	subs	r3, r1, r3
 8009df4:	00db      	lsls	r3, r3, #3
 8009df6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009dfa:	4b36      	ldr	r3, [pc, #216]	@ (8009ed4 <UART_SetConfig+0x2d4>)
 8009dfc:	fba3 2302 	umull	r2, r3, r3, r2
 8009e00:	095b      	lsrs	r3, r3, #5
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009e08:	441c      	add	r4, r3
 8009e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009e18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009e1c:	4642      	mov	r2, r8
 8009e1e:	464b      	mov	r3, r9
 8009e20:	1891      	adds	r1, r2, r2
 8009e22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009e24:	415b      	adcs	r3, r3
 8009e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009e2c:	4641      	mov	r1, r8
 8009e2e:	1851      	adds	r1, r2, r1
 8009e30:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e32:	4649      	mov	r1, r9
 8009e34:	414b      	adcs	r3, r1
 8009e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e38:	f04f 0200 	mov.w	r2, #0
 8009e3c:	f04f 0300 	mov.w	r3, #0
 8009e40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009e44:	4659      	mov	r1, fp
 8009e46:	00cb      	lsls	r3, r1, #3
 8009e48:	4651      	mov	r1, sl
 8009e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e4e:	4651      	mov	r1, sl
 8009e50:	00ca      	lsls	r2, r1, #3
 8009e52:	4610      	mov	r0, r2
 8009e54:	4619      	mov	r1, r3
 8009e56:	4603      	mov	r3, r0
 8009e58:	4642      	mov	r2, r8
 8009e5a:	189b      	adds	r3, r3, r2
 8009e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e60:	464b      	mov	r3, r9
 8009e62:	460a      	mov	r2, r1
 8009e64:	eb42 0303 	adc.w	r3, r2, r3
 8009e68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009e7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009e80:	460b      	mov	r3, r1
 8009e82:	18db      	adds	r3, r3, r3
 8009e84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e86:	4613      	mov	r3, r2
 8009e88:	eb42 0303 	adc.w	r3, r2, r3
 8009e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009e92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009e96:	f7f6 fed7 	bl	8000c48 <__aeabi_uldivmod>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ed4 <UART_SetConfig+0x2d4>)
 8009ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8009ea4:	095b      	lsrs	r3, r3, #5
 8009ea6:	2164      	movs	r1, #100	@ 0x64
 8009ea8:	fb01 f303 	mul.w	r3, r1, r3
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	3332      	adds	r3, #50	@ 0x32
 8009eb2:	4a08      	ldr	r2, [pc, #32]	@ (8009ed4 <UART_SetConfig+0x2d4>)
 8009eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8009eb8:	095b      	lsrs	r3, r3, #5
 8009eba:	f003 0207 	and.w	r2, r3, #7
 8009ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4422      	add	r2, r4
 8009ec6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009ec8:	e106      	b.n	800a0d8 <UART_SetConfig+0x4d8>
 8009eca:	bf00      	nop
 8009ecc:	40011000 	.word	0x40011000
 8009ed0:	40011400 	.word	0x40011400
 8009ed4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009edc:	2200      	movs	r2, #0
 8009ede:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009ee2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009ee6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009eea:	4642      	mov	r2, r8
 8009eec:	464b      	mov	r3, r9
 8009eee:	1891      	adds	r1, r2, r2
 8009ef0:	6239      	str	r1, [r7, #32]
 8009ef2:	415b      	adcs	r3, r3
 8009ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ef6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009efa:	4641      	mov	r1, r8
 8009efc:	1854      	adds	r4, r2, r1
 8009efe:	4649      	mov	r1, r9
 8009f00:	eb43 0501 	adc.w	r5, r3, r1
 8009f04:	f04f 0200 	mov.w	r2, #0
 8009f08:	f04f 0300 	mov.w	r3, #0
 8009f0c:	00eb      	lsls	r3, r5, #3
 8009f0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f12:	00e2      	lsls	r2, r4, #3
 8009f14:	4614      	mov	r4, r2
 8009f16:	461d      	mov	r5, r3
 8009f18:	4643      	mov	r3, r8
 8009f1a:	18e3      	adds	r3, r4, r3
 8009f1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f20:	464b      	mov	r3, r9
 8009f22:	eb45 0303 	adc.w	r3, r5, r3
 8009f26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009f3a:	f04f 0200 	mov.w	r2, #0
 8009f3e:	f04f 0300 	mov.w	r3, #0
 8009f42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009f46:	4629      	mov	r1, r5
 8009f48:	008b      	lsls	r3, r1, #2
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f50:	4621      	mov	r1, r4
 8009f52:	008a      	lsls	r2, r1, #2
 8009f54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009f58:	f7f6 fe76 	bl	8000c48 <__aeabi_uldivmod>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	4b60      	ldr	r3, [pc, #384]	@ (800a0e4 <UART_SetConfig+0x4e4>)
 8009f62:	fba3 2302 	umull	r2, r3, r3, r2
 8009f66:	095b      	lsrs	r3, r3, #5
 8009f68:	011c      	lsls	r4, r3, #4
 8009f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009f78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009f7c:	4642      	mov	r2, r8
 8009f7e:	464b      	mov	r3, r9
 8009f80:	1891      	adds	r1, r2, r2
 8009f82:	61b9      	str	r1, [r7, #24]
 8009f84:	415b      	adcs	r3, r3
 8009f86:	61fb      	str	r3, [r7, #28]
 8009f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f8c:	4641      	mov	r1, r8
 8009f8e:	1851      	adds	r1, r2, r1
 8009f90:	6139      	str	r1, [r7, #16]
 8009f92:	4649      	mov	r1, r9
 8009f94:	414b      	adcs	r3, r1
 8009f96:	617b      	str	r3, [r7, #20]
 8009f98:	f04f 0200 	mov.w	r2, #0
 8009f9c:	f04f 0300 	mov.w	r3, #0
 8009fa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009fa4:	4659      	mov	r1, fp
 8009fa6:	00cb      	lsls	r3, r1, #3
 8009fa8:	4651      	mov	r1, sl
 8009faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fae:	4651      	mov	r1, sl
 8009fb0:	00ca      	lsls	r2, r1, #3
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	4642      	mov	r2, r8
 8009fba:	189b      	adds	r3, r3, r2
 8009fbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009fc0:	464b      	mov	r3, r9
 8009fc2:	460a      	mov	r2, r1
 8009fc4:	eb42 0303 	adc.w	r3, r2, r3
 8009fc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009fd6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009fd8:	f04f 0200 	mov.w	r2, #0
 8009fdc:	f04f 0300 	mov.w	r3, #0
 8009fe0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009fe4:	4649      	mov	r1, r9
 8009fe6:	008b      	lsls	r3, r1, #2
 8009fe8:	4641      	mov	r1, r8
 8009fea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fee:	4641      	mov	r1, r8
 8009ff0:	008a      	lsls	r2, r1, #2
 8009ff2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009ff6:	f7f6 fe27 	bl	8000c48 <__aeabi_uldivmod>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	4611      	mov	r1, r2
 800a000:	4b38      	ldr	r3, [pc, #224]	@ (800a0e4 <UART_SetConfig+0x4e4>)
 800a002:	fba3 2301 	umull	r2, r3, r3, r1
 800a006:	095b      	lsrs	r3, r3, #5
 800a008:	2264      	movs	r2, #100	@ 0x64
 800a00a:	fb02 f303 	mul.w	r3, r2, r3
 800a00e:	1acb      	subs	r3, r1, r3
 800a010:	011b      	lsls	r3, r3, #4
 800a012:	3332      	adds	r3, #50	@ 0x32
 800a014:	4a33      	ldr	r2, [pc, #204]	@ (800a0e4 <UART_SetConfig+0x4e4>)
 800a016:	fba2 2303 	umull	r2, r3, r2, r3
 800a01a:	095b      	lsrs	r3, r3, #5
 800a01c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a020:	441c      	add	r4, r3
 800a022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a026:	2200      	movs	r2, #0
 800a028:	673b      	str	r3, [r7, #112]	@ 0x70
 800a02a:	677a      	str	r2, [r7, #116]	@ 0x74
 800a02c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a030:	4642      	mov	r2, r8
 800a032:	464b      	mov	r3, r9
 800a034:	1891      	adds	r1, r2, r2
 800a036:	60b9      	str	r1, [r7, #8]
 800a038:	415b      	adcs	r3, r3
 800a03a:	60fb      	str	r3, [r7, #12]
 800a03c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a040:	4641      	mov	r1, r8
 800a042:	1851      	adds	r1, r2, r1
 800a044:	6039      	str	r1, [r7, #0]
 800a046:	4649      	mov	r1, r9
 800a048:	414b      	adcs	r3, r1
 800a04a:	607b      	str	r3, [r7, #4]
 800a04c:	f04f 0200 	mov.w	r2, #0
 800a050:	f04f 0300 	mov.w	r3, #0
 800a054:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a058:	4659      	mov	r1, fp
 800a05a:	00cb      	lsls	r3, r1, #3
 800a05c:	4651      	mov	r1, sl
 800a05e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a062:	4651      	mov	r1, sl
 800a064:	00ca      	lsls	r2, r1, #3
 800a066:	4610      	mov	r0, r2
 800a068:	4619      	mov	r1, r3
 800a06a:	4603      	mov	r3, r0
 800a06c:	4642      	mov	r2, r8
 800a06e:	189b      	adds	r3, r3, r2
 800a070:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a072:	464b      	mov	r3, r9
 800a074:	460a      	mov	r2, r1
 800a076:	eb42 0303 	adc.w	r3, r2, r3
 800a07a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a07c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	663b      	str	r3, [r7, #96]	@ 0x60
 800a086:	667a      	str	r2, [r7, #100]	@ 0x64
 800a088:	f04f 0200 	mov.w	r2, #0
 800a08c:	f04f 0300 	mov.w	r3, #0
 800a090:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a094:	4649      	mov	r1, r9
 800a096:	008b      	lsls	r3, r1, #2
 800a098:	4641      	mov	r1, r8
 800a09a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a09e:	4641      	mov	r1, r8
 800a0a0:	008a      	lsls	r2, r1, #2
 800a0a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a0a6:	f7f6 fdcf 	bl	8000c48 <__aeabi_uldivmod>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a0e4 <UART_SetConfig+0x4e4>)
 800a0b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a0b4:	095b      	lsrs	r3, r3, #5
 800a0b6:	2164      	movs	r1, #100	@ 0x64
 800a0b8:	fb01 f303 	mul.w	r3, r1, r3
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	011b      	lsls	r3, r3, #4
 800a0c0:	3332      	adds	r3, #50	@ 0x32
 800a0c2:	4a08      	ldr	r2, [pc, #32]	@ (800a0e4 <UART_SetConfig+0x4e4>)
 800a0c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c8:	095b      	lsrs	r3, r3, #5
 800a0ca:	f003 020f 	and.w	r2, r3, #15
 800a0ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4422      	add	r2, r4
 800a0d6:	609a      	str	r2, [r3, #8]
}
 800a0d8:	bf00      	nop
 800a0da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0e4:	51eb851f 	.word	0x51eb851f

0800a0e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b087      	sub	sp, #28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a0f6:	79fb      	ldrb	r3, [r7, #7]
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d165      	bne.n	800a1c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	4a41      	ldr	r2, [pc, #260]	@ (800a204 <USB_SetTurnaroundTime+0x11c>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d906      	bls.n	800a112 <USB_SetTurnaroundTime+0x2a>
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	4a40      	ldr	r2, [pc, #256]	@ (800a208 <USB_SetTurnaroundTime+0x120>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d202      	bcs.n	800a112 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a10c:	230f      	movs	r3, #15
 800a10e:	617b      	str	r3, [r7, #20]
 800a110:	e062      	b.n	800a1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	4a3c      	ldr	r2, [pc, #240]	@ (800a208 <USB_SetTurnaroundTime+0x120>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d306      	bcc.n	800a128 <USB_SetTurnaroundTime+0x40>
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	4a3b      	ldr	r2, [pc, #236]	@ (800a20c <USB_SetTurnaroundTime+0x124>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d202      	bcs.n	800a128 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a122:	230e      	movs	r3, #14
 800a124:	617b      	str	r3, [r7, #20]
 800a126:	e057      	b.n	800a1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	4a38      	ldr	r2, [pc, #224]	@ (800a20c <USB_SetTurnaroundTime+0x124>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d306      	bcc.n	800a13e <USB_SetTurnaroundTime+0x56>
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	4a37      	ldr	r2, [pc, #220]	@ (800a210 <USB_SetTurnaroundTime+0x128>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d202      	bcs.n	800a13e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a138:	230d      	movs	r3, #13
 800a13a:	617b      	str	r3, [r7, #20]
 800a13c:	e04c      	b.n	800a1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	4a33      	ldr	r2, [pc, #204]	@ (800a210 <USB_SetTurnaroundTime+0x128>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d306      	bcc.n	800a154 <USB_SetTurnaroundTime+0x6c>
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	4a32      	ldr	r2, [pc, #200]	@ (800a214 <USB_SetTurnaroundTime+0x12c>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d802      	bhi.n	800a154 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a14e:	230c      	movs	r3, #12
 800a150:	617b      	str	r3, [r7, #20]
 800a152:	e041      	b.n	800a1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	4a2f      	ldr	r2, [pc, #188]	@ (800a214 <USB_SetTurnaroundTime+0x12c>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d906      	bls.n	800a16a <USB_SetTurnaroundTime+0x82>
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	4a2e      	ldr	r2, [pc, #184]	@ (800a218 <USB_SetTurnaroundTime+0x130>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d802      	bhi.n	800a16a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a164:	230b      	movs	r3, #11
 800a166:	617b      	str	r3, [r7, #20]
 800a168:	e036      	b.n	800a1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	4a2a      	ldr	r2, [pc, #168]	@ (800a218 <USB_SetTurnaroundTime+0x130>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d906      	bls.n	800a180 <USB_SetTurnaroundTime+0x98>
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	4a29      	ldr	r2, [pc, #164]	@ (800a21c <USB_SetTurnaroundTime+0x134>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d802      	bhi.n	800a180 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a17a:	230a      	movs	r3, #10
 800a17c:	617b      	str	r3, [r7, #20]
 800a17e:	e02b      	b.n	800a1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	4a26      	ldr	r2, [pc, #152]	@ (800a21c <USB_SetTurnaroundTime+0x134>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d906      	bls.n	800a196 <USB_SetTurnaroundTime+0xae>
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	4a25      	ldr	r2, [pc, #148]	@ (800a220 <USB_SetTurnaroundTime+0x138>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d202      	bcs.n	800a196 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a190:	2309      	movs	r3, #9
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	e020      	b.n	800a1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	4a21      	ldr	r2, [pc, #132]	@ (800a220 <USB_SetTurnaroundTime+0x138>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d306      	bcc.n	800a1ac <USB_SetTurnaroundTime+0xc4>
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	4a20      	ldr	r2, [pc, #128]	@ (800a224 <USB_SetTurnaroundTime+0x13c>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d802      	bhi.n	800a1ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a1a6:	2308      	movs	r3, #8
 800a1a8:	617b      	str	r3, [r7, #20]
 800a1aa:	e015      	b.n	800a1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	4a1d      	ldr	r2, [pc, #116]	@ (800a224 <USB_SetTurnaroundTime+0x13c>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d906      	bls.n	800a1c2 <USB_SetTurnaroundTime+0xda>
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	4a1c      	ldr	r2, [pc, #112]	@ (800a228 <USB_SetTurnaroundTime+0x140>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d202      	bcs.n	800a1c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a1bc:	2307      	movs	r3, #7
 800a1be:	617b      	str	r3, [r7, #20]
 800a1c0:	e00a      	b.n	800a1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a1c2:	2306      	movs	r3, #6
 800a1c4:	617b      	str	r3, [r7, #20]
 800a1c6:	e007      	b.n	800a1d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a1c8:	79fb      	ldrb	r3, [r7, #7]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d102      	bne.n	800a1d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a1ce:	2309      	movs	r3, #9
 800a1d0:	617b      	str	r3, [r7, #20]
 800a1d2:	e001      	b.n	800a1d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a1d4:	2309      	movs	r3, #9
 800a1d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	68da      	ldr	r2, [r3, #12]
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	029b      	lsls	r3, r3, #10
 800a1ec:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a1f0:	431a      	orrs	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	371c      	adds	r7, #28
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	00d8acbf 	.word	0x00d8acbf
 800a208:	00e4e1c0 	.word	0x00e4e1c0
 800a20c:	00f42400 	.word	0x00f42400
 800a210:	01067380 	.word	0x01067380
 800a214:	011a499f 	.word	0x011a499f
 800a218:	01312cff 	.word	0x01312cff
 800a21c:	014ca43f 	.word	0x014ca43f
 800a220:	016e3600 	.word	0x016e3600
 800a224:	01a6ab1f 	.word	0x01a6ab1f
 800a228:	01e84800 	.word	0x01e84800

0800a22c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a236:	2300      	movs	r3, #0
 800a238:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	3301      	adds	r3, #1
 800a23e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a246:	d901      	bls.n	800a24c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a248:	2303      	movs	r3, #3
 800a24a:	e01b      	b.n	800a284 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	2b00      	cmp	r3, #0
 800a252:	daf2      	bge.n	800a23a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a254:	2300      	movs	r3, #0
 800a256:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	019b      	lsls	r3, r3, #6
 800a25c:	f043 0220 	orr.w	r2, r3, #32
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	3301      	adds	r3, #1
 800a268:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a270:	d901      	bls.n	800a276 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	e006      	b.n	800a284 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	f003 0320 	and.w	r3, r3, #32
 800a27e:	2b20      	cmp	r3, #32
 800a280:	d0f0      	beq.n	800a264 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a290:	b480      	push	{r7}
 800a292:	b087      	sub	sp, #28
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f003 0306 	and.w	r3, r3, #6
 800a2a8:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d102      	bne.n	800a2b6 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	75fb      	strb	r3, [r7, #23]
 800a2b4:	e00a      	b.n	800a2cc <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d002      	beq.n	800a2c2 <USB_GetDevSpeed+0x32>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2b06      	cmp	r3, #6
 800a2c0:	d102      	bne.n	800a2c8 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	75fb      	strb	r3, [r7, #23]
 800a2c6:	e001      	b.n	800a2cc <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a2c8:	230f      	movs	r3, #15
 800a2ca:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a2cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	371c      	adds	r7, #28
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b085      	sub	sp, #20
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	785b      	ldrb	r3, [r3, #1]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d13a      	bne.n	800a36c <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2fc:	69da      	ldr	r2, [r3, #28]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	f003 030f 	and.w	r3, r3, #15
 800a306:	2101      	movs	r1, #1
 800a308:	fa01 f303 	lsl.w	r3, r1, r3
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	68f9      	ldr	r1, [r7, #12]
 800a310:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a314:	4313      	orrs	r3, r2
 800a316:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d155      	bne.n	800a3da <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	015a      	lsls	r2, r3, #5
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	4413      	add	r3, r2
 800a336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	791b      	ldrb	r3, [r3, #4]
 800a348:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a34a:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	059b      	lsls	r3, r3, #22
 800a350:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a352:	4313      	orrs	r3, r2
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	0151      	lsls	r1, r2, #5
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	440a      	add	r2, r1
 800a35c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a368:	6013      	str	r3, [r2, #0]
 800a36a:	e036      	b.n	800a3da <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a372:	69da      	ldr	r2, [r3, #28]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	f003 030f 	and.w	r3, r3, #15
 800a37c:	2101      	movs	r1, #1
 800a37e:	fa01 f303 	lsl.w	r3, r1, r3
 800a382:	041b      	lsls	r3, r3, #16
 800a384:	68f9      	ldr	r1, [r7, #12]
 800a386:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a38a:	4313      	orrs	r3, r2
 800a38c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	015a      	lsls	r2, r3, #5
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	4413      	add	r3, r2
 800a396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d11a      	bne.n	800a3da <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	015a      	lsls	r2, r3, #5
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	791b      	ldrb	r3, [r3, #4]
 800a3be:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a3c0:	430b      	orrs	r3, r1
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	0151      	lsls	r1, r2, #5
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	440a      	add	r2, r1
 800a3cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3d8:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b08a      	sub	sp, #40	@ 0x28
 800a3ec:	af02      	add	r7, sp, #8
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	785b      	ldrb	r3, [r3, #1]
 800a404:	2b01      	cmp	r3, #1
 800a406:	f040 817f 	bne.w	800a708 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d132      	bne.n	800a478 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	015a      	lsls	r2, r3, #5
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	4413      	add	r3, r2
 800a41a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	69ba      	ldr	r2, [r7, #24]
 800a422:	0151      	lsls	r1, r2, #5
 800a424:	69fa      	ldr	r2, [r7, #28]
 800a426:	440a      	add	r2, r1
 800a428:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a42c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a430:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a434:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	015a      	lsls	r2, r3, #5
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	4413      	add	r3, r2
 800a43e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	69ba      	ldr	r2, [r7, #24]
 800a446:	0151      	lsls	r1, r2, #5
 800a448:	69fa      	ldr	r2, [r7, #28]
 800a44a:	440a      	add	r2, r1
 800a44c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a450:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a454:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	015a      	lsls	r2, r3, #5
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	4413      	add	r3, r2
 800a45e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	69ba      	ldr	r2, [r7, #24]
 800a466:	0151      	lsls	r1, r2, #5
 800a468:	69fa      	ldr	r2, [r7, #28]
 800a46a:	440a      	add	r2, r1
 800a46c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a470:	0cdb      	lsrs	r3, r3, #19
 800a472:	04db      	lsls	r3, r3, #19
 800a474:	6113      	str	r3, [r2, #16]
 800a476:	e097      	b.n	800a5a8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	69ba      	ldr	r2, [r7, #24]
 800a488:	0151      	lsls	r1, r2, #5
 800a48a:	69fa      	ldr	r2, [r7, #28]
 800a48c:	440a      	add	r2, r1
 800a48e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a492:	0cdb      	lsrs	r3, r3, #19
 800a494:	04db      	lsls	r3, r3, #19
 800a496:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	015a      	lsls	r2, r3, #5
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	4413      	add	r3, r2
 800a4a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	69ba      	ldr	r2, [r7, #24]
 800a4a8:	0151      	lsls	r1, r2, #5
 800a4aa:	69fa      	ldr	r2, [r7, #28]
 800a4ac:	440a      	add	r2, r1
 800a4ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4b2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a4b6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a4ba:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d11a      	bne.n	800a4f8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	691a      	ldr	r2, [r3, #16]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d903      	bls.n	800a4d6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	689a      	ldr	r2, [r3, #8]
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	015a      	lsls	r2, r3, #5
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	4413      	add	r3, r2
 800a4de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	69ba      	ldr	r2, [r7, #24]
 800a4e6:	0151      	lsls	r1, r2, #5
 800a4e8:	69fa      	ldr	r2, [r7, #28]
 800a4ea:	440a      	add	r2, r1
 800a4ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a4f4:	6113      	str	r3, [r2, #16]
 800a4f6:	e044      	b.n	800a582 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	691a      	ldr	r2, [r3, #16]
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	4413      	add	r3, r2
 800a502:	1e5a      	subs	r2, r3, #1
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	fbb2 f3f3 	udiv	r3, r2, r3
 800a50c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	015a      	lsls	r2, r3, #5
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	4413      	add	r3, r2
 800a516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a51a:	691a      	ldr	r2, [r3, #16]
 800a51c:	8afb      	ldrh	r3, [r7, #22]
 800a51e:	04d9      	lsls	r1, r3, #19
 800a520:	4ba4      	ldr	r3, [pc, #656]	@ (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a522:	400b      	ands	r3, r1
 800a524:	69b9      	ldr	r1, [r7, #24]
 800a526:	0148      	lsls	r0, r1, #5
 800a528:	69f9      	ldr	r1, [r7, #28]
 800a52a:	4401      	add	r1, r0
 800a52c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a530:	4313      	orrs	r3, r2
 800a532:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	791b      	ldrb	r3, [r3, #4]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d122      	bne.n	800a582 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	69ba      	ldr	r2, [r7, #24]
 800a54c:	0151      	lsls	r1, r2, #5
 800a54e:	69fa      	ldr	r2, [r7, #28]
 800a550:	440a      	add	r2, r1
 800a552:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a556:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a55a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	015a      	lsls	r2, r3, #5
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	4413      	add	r3, r2
 800a564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a568:	691a      	ldr	r2, [r3, #16]
 800a56a:	8afb      	ldrh	r3, [r7, #22]
 800a56c:	075b      	lsls	r3, r3, #29
 800a56e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a572:	69b9      	ldr	r1, [r7, #24]
 800a574:	0148      	lsls	r0, r1, #5
 800a576:	69f9      	ldr	r1, [r7, #28]
 800a578:	4401      	add	r1, r0
 800a57a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a57e:	4313      	orrs	r3, r2
 800a580:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	015a      	lsls	r2, r3, #5
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	4413      	add	r3, r2
 800a58a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a58e:	691a      	ldr	r2, [r3, #16]
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a598:	69b9      	ldr	r1, [r7, #24]
 800a59a:	0148      	lsls	r0, r1, #5
 800a59c:	69f9      	ldr	r1, [r7, #28]
 800a59e:	4401      	add	r1, r0
 800a5a0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a5a8:	79fb      	ldrb	r3, [r7, #7]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d14b      	bne.n	800a646 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	69db      	ldr	r3, [r3, #28]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d009      	beq.n	800a5ca <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	015a      	lsls	r2, r3, #5
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	4413      	add	r3, r2
 800a5be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	69db      	ldr	r3, [r3, #28]
 800a5c8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	791b      	ldrb	r3, [r3, #4]
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d128      	bne.n	800a624 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d110      	bne.n	800a604 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	015a      	lsls	r2, r3, #5
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	69ba      	ldr	r2, [r7, #24]
 800a5f2:	0151      	lsls	r1, r2, #5
 800a5f4:	69fa      	ldr	r2, [r7, #28]
 800a5f6:	440a      	add	r2, r1
 800a5f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a600:	6013      	str	r3, [r2, #0]
 800a602:	e00f      	b.n	800a624 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	015a      	lsls	r2, r3, #5
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	4413      	add	r3, r2
 800a60c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	0151      	lsls	r1, r2, #5
 800a616:	69fa      	ldr	r2, [r7, #28]
 800a618:	440a      	add	r2, r1
 800a61a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a61e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a622:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	015a      	lsls	r2, r3, #5
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	4413      	add	r3, r2
 800a62c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	69ba      	ldr	r2, [r7, #24]
 800a634:	0151      	lsls	r1, r2, #5
 800a636:	69fa      	ldr	r2, [r7, #28]
 800a638:	440a      	add	r2, r1
 800a63a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a63e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a642:	6013      	str	r3, [r2, #0]
 800a644:	e166      	b.n	800a914 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	015a      	lsls	r2, r3, #5
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	4413      	add	r3, r2
 800a64e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	0151      	lsls	r1, r2, #5
 800a658:	69fa      	ldr	r2, [r7, #28]
 800a65a:	440a      	add	r2, r1
 800a65c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a660:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a664:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	791b      	ldrb	r3, [r3, #4]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d015      	beq.n	800a69a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	2b00      	cmp	r3, #0
 800a674:	f000 814e 	beq.w	800a914 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a67e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	f003 030f 	and.w	r3, r3, #15
 800a688:	2101      	movs	r1, #1
 800a68a:	fa01 f303 	lsl.w	r3, r1, r3
 800a68e:	69f9      	ldr	r1, [r7, #28]
 800a690:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a694:	4313      	orrs	r3, r2
 800a696:	634b      	str	r3, [r1, #52]	@ 0x34
 800a698:	e13c      	b.n	800a914 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d110      	bne.n	800a6cc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	015a      	lsls	r2, r3, #5
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	69ba      	ldr	r2, [r7, #24]
 800a6ba:	0151      	lsls	r1, r2, #5
 800a6bc:	69fa      	ldr	r2, [r7, #28]
 800a6be:	440a      	add	r2, r1
 800a6c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a6c8:	6013      	str	r3, [r2, #0]
 800a6ca:	e00f      	b.n	800a6ec <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	015a      	lsls	r2, r3, #5
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	69ba      	ldr	r2, [r7, #24]
 800a6dc:	0151      	lsls	r1, r2, #5
 800a6de:	69fa      	ldr	r2, [r7, #28]
 800a6e0:	440a      	add	r2, r1
 800a6e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6ea:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	68d9      	ldr	r1, [r3, #12]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	781a      	ldrb	r2, [r3, #0]
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	b298      	uxth	r0, r3
 800a6fa:	79fb      	ldrb	r3, [r7, #7]
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	4603      	mov	r3, r0
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f000 f9b9 	bl	800aa78 <USB_WritePacket>
 800a706:	e105      	b.n	800a914 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	015a      	lsls	r2, r3, #5
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	4413      	add	r3, r2
 800a710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	69ba      	ldr	r2, [r7, #24]
 800a718:	0151      	lsls	r1, r2, #5
 800a71a:	69fa      	ldr	r2, [r7, #28]
 800a71c:	440a      	add	r2, r1
 800a71e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a722:	0cdb      	lsrs	r3, r3, #19
 800a724:	04db      	lsls	r3, r3, #19
 800a726:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	015a      	lsls	r2, r3, #5
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	4413      	add	r3, r2
 800a730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	69ba      	ldr	r2, [r7, #24]
 800a738:	0151      	lsls	r1, r2, #5
 800a73a:	69fa      	ldr	r2, [r7, #28]
 800a73c:	440a      	add	r2, r1
 800a73e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a742:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a746:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a74a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d132      	bne.n	800a7b8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d003      	beq.n	800a762 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	689a      	ldr	r2, [r3, #8]
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	689a      	ldr	r2, [r3, #8]
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	015a      	lsls	r2, r3, #5
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	4413      	add	r3, r2
 800a772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a776:	691a      	ldr	r2, [r3, #16]
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	6a1b      	ldr	r3, [r3, #32]
 800a77c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a780:	69b9      	ldr	r1, [r7, #24]
 800a782:	0148      	lsls	r0, r1, #5
 800a784:	69f9      	ldr	r1, [r7, #28]
 800a786:	4401      	add	r1, r0
 800a788:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a78c:	4313      	orrs	r3, r2
 800a78e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	69ba      	ldr	r2, [r7, #24]
 800a7a0:	0151      	lsls	r1, r2, #5
 800a7a2:	69fa      	ldr	r2, [r7, #28]
 800a7a4:	440a      	add	r2, r1
 800a7a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a7ae:	6113      	str	r3, [r2, #16]
 800a7b0:	e062      	b.n	800a878 <USB_EPStartXfer+0x490>
 800a7b2:	bf00      	nop
 800a7b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d123      	bne.n	800a808 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	015a      	lsls	r2, r3, #5
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7cc:	691a      	ldr	r2, [r3, #16]
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7d6:	69b9      	ldr	r1, [r7, #24]
 800a7d8:	0148      	lsls	r0, r1, #5
 800a7da:	69f9      	ldr	r1, [r7, #28]
 800a7dc:	4401      	add	r1, r0
 800a7de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	015a      	lsls	r2, r3, #5
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	69ba      	ldr	r2, [r7, #24]
 800a7f6:	0151      	lsls	r1, r2, #5
 800a7f8:	69fa      	ldr	r2, [r7, #28]
 800a7fa:	440a      	add	r2, r1
 800a7fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a800:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a804:	6113      	str	r3, [r2, #16]
 800a806:	e037      	b.n	800a878 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	691a      	ldr	r2, [r3, #16]
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	4413      	add	r3, r2
 800a812:	1e5a      	subs	r2, r3, #1
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	fbb2 f3f3 	udiv	r3, r2, r3
 800a81c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	8afa      	ldrh	r2, [r7, #22]
 800a824:	fb03 f202 	mul.w	r2, r3, r2
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	015a      	lsls	r2, r3, #5
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	4413      	add	r3, r2
 800a834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a838:	691a      	ldr	r2, [r3, #16]
 800a83a:	8afb      	ldrh	r3, [r7, #22]
 800a83c:	04d9      	lsls	r1, r3, #19
 800a83e:	4b38      	ldr	r3, [pc, #224]	@ (800a920 <USB_EPStartXfer+0x538>)
 800a840:	400b      	ands	r3, r1
 800a842:	69b9      	ldr	r1, [r7, #24]
 800a844:	0148      	lsls	r0, r1, #5
 800a846:	69f9      	ldr	r1, [r7, #28]
 800a848:	4401      	add	r1, r0
 800a84a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a84e:	4313      	orrs	r3, r2
 800a850:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	015a      	lsls	r2, r3, #5
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	4413      	add	r3, r2
 800a85a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a85e:	691a      	ldr	r2, [r3, #16]
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	6a1b      	ldr	r3, [r3, #32]
 800a864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a868:	69b9      	ldr	r1, [r7, #24]
 800a86a:	0148      	lsls	r0, r1, #5
 800a86c:	69f9      	ldr	r1, [r7, #28]
 800a86e:	4401      	add	r1, r0
 800a870:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a874:	4313      	orrs	r3, r2
 800a876:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a878:	79fb      	ldrb	r3, [r7, #7]
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d10d      	bne.n	800a89a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d009      	beq.n	800a89a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	68d9      	ldr	r1, [r3, #12]
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	015a      	lsls	r2, r3, #5
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	4413      	add	r3, r2
 800a892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a896:	460a      	mov	r2, r1
 800a898:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	791b      	ldrb	r3, [r3, #4]
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d128      	bne.n	800a8f4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d110      	bne.n	800a8d4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	015a      	lsls	r2, r3, #5
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	69ba      	ldr	r2, [r7, #24]
 800a8c2:	0151      	lsls	r1, r2, #5
 800a8c4:	69fa      	ldr	r2, [r7, #28]
 800a8c6:	440a      	add	r2, r1
 800a8c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a8d0:	6013      	str	r3, [r2, #0]
 800a8d2:	e00f      	b.n	800a8f4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	69ba      	ldr	r2, [r7, #24]
 800a8e4:	0151      	lsls	r1, r2, #5
 800a8e6:	69fa      	ldr	r2, [r7, #28]
 800a8e8:	440a      	add	r2, r1
 800a8ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a8f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	015a      	lsls	r2, r3, #5
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	69ba      	ldr	r2, [r7, #24]
 800a904:	0151      	lsls	r1, r2, #5
 800a906:	69fa      	ldr	r2, [r7, #28]
 800a908:	440a      	add	r2, r1
 800a90a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a90e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a912:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3720      	adds	r7, #32
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	1ff80000 	.word	0x1ff80000

0800a924 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a924:	b480      	push	{r7}
 800a926:	b087      	sub	sp, #28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a92e:	2300      	movs	r3, #0
 800a930:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	785b      	ldrb	r3, [r3, #1]
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d14a      	bne.n	800a9d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	015a      	lsls	r2, r3, #5
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	4413      	add	r3, r2
 800a94c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a956:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a95a:	f040 8086 	bne.w	800aa6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	015a      	lsls	r2, r3, #5
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	4413      	add	r3, r2
 800a968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	683a      	ldr	r2, [r7, #0]
 800a970:	7812      	ldrb	r2, [r2, #0]
 800a972:	0151      	lsls	r1, r2, #5
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	440a      	add	r2, r1
 800a978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a97c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a980:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	015a      	lsls	r2, r3, #5
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	4413      	add	r3, r2
 800a98c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	7812      	ldrb	r2, [r2, #0]
 800a996:	0151      	lsls	r1, r2, #5
 800a998:	693a      	ldr	r2, [r7, #16]
 800a99a:	440a      	add	r2, r1
 800a99c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a9a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d902      	bls.n	800a9bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	75fb      	strb	r3, [r7, #23]
          break;
 800a9ba:	e056      	b.n	800aa6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9d4:	d0e7      	beq.n	800a9a6 <USB_EPStopXfer+0x82>
 800a9d6:	e048      	b.n	800aa6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	015a      	lsls	r2, r3, #5
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9f0:	d13b      	bne.n	800aa6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	015a      	lsls	r2, r3, #5
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	7812      	ldrb	r2, [r2, #0]
 800aa06:	0151      	lsls	r1, r2, #5
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	440a      	add	r2, r1
 800aa0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aa14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	7812      	ldrb	r2, [r2, #0]
 800aa2a:	0151      	lsls	r1, r2, #5
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	440a      	add	r2, r1
 800aa30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aa38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f242 7210 	movw	r2, #10000	@ 0x2710
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d902      	bls.n	800aa50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	75fb      	strb	r3, [r7, #23]
          break;
 800aa4e:	e00c      	b.n	800aa6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	015a      	lsls	r2, r3, #5
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	4413      	add	r3, r2
 800aa5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa68:	d0e7      	beq.n	800aa3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800aa6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	371c      	adds	r7, #28
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b089      	sub	sp, #36	@ 0x24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	4611      	mov	r1, r2
 800aa84:	461a      	mov	r2, r3
 800aa86:	460b      	mov	r3, r1
 800aa88:	71fb      	strb	r3, [r7, #7]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800aa96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d123      	bne.n	800aae6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800aa9e:	88bb      	ldrh	r3, [r7, #4]
 800aaa0:	3303      	adds	r3, #3
 800aaa2:	089b      	lsrs	r3, r3, #2
 800aaa4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	61bb      	str	r3, [r7, #24]
 800aaaa:	e018      	b.n	800aade <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800aaac:	79fb      	ldrb	r3, [r7, #7]
 800aaae:	031a      	lsls	r2, r3, #12
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	4413      	add	r3, r2
 800aab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aab8:	461a      	mov	r2, r3
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	6013      	str	r3, [r2, #0]
      pSrc++;
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	3301      	adds	r3, #1
 800aac4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	3301      	adds	r3, #1
 800aaca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	3301      	adds	r3, #1
 800aad0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	3301      	adds	r3, #1
 800aad6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	3301      	adds	r3, #1
 800aadc:	61bb      	str	r3, [r7, #24]
 800aade:	69ba      	ldr	r2, [r7, #24]
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d3e2      	bcc.n	800aaac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3724      	adds	r7, #36	@ 0x24
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b08b      	sub	sp, #44	@ 0x2c
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	4613      	mov	r3, r2
 800ab00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ab0a:	88fb      	ldrh	r3, [r7, #6]
 800ab0c:	089b      	lsrs	r3, r3, #2
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ab12:	88fb      	ldrh	r3, [r7, #6]
 800ab14:	f003 0303 	and.w	r3, r3, #3
 800ab18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	623b      	str	r3, [r7, #32]
 800ab1e:	e014      	b.n	800ab4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ab2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2e:	3301      	adds	r3, #1
 800ab30:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ab32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab34:	3301      	adds	r3, #1
 800ab36:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ab38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab40:	3301      	adds	r3, #1
 800ab42:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ab44:	6a3b      	ldr	r3, [r7, #32]
 800ab46:	3301      	adds	r3, #1
 800ab48:	623b      	str	r3, [r7, #32]
 800ab4a:	6a3a      	ldr	r2, [r7, #32]
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d3e6      	bcc.n	800ab20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ab52:	8bfb      	ldrh	r3, [r7, #30]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d01e      	beq.n	800ab96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab62:	461a      	mov	r2, r3
 800ab64:	f107 0310 	add.w	r3, r7, #16
 800ab68:	6812      	ldr	r2, [r2, #0]
 800ab6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ab6c:	693a      	ldr	r2, [r7, #16]
 800ab6e:	6a3b      	ldr	r3, [r7, #32]
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	00db      	lsls	r3, r3, #3
 800ab74:	fa22 f303 	lsr.w	r3, r2, r3
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7c:	701a      	strb	r2, [r3, #0]
      i++;
 800ab7e:	6a3b      	ldr	r3, [r7, #32]
 800ab80:	3301      	adds	r3, #1
 800ab82:	623b      	str	r3, [r7, #32]
      pDest++;
 800ab84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab86:	3301      	adds	r3, #1
 800ab88:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ab8a:	8bfb      	ldrh	r3, [r7, #30]
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ab90:	8bfb      	ldrh	r3, [r7, #30]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d1ea      	bne.n	800ab6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ab96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	372c      	adds	r7, #44	@ 0x2c
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b085      	sub	sp, #20
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	785b      	ldrb	r3, [r3, #1]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d12c      	bne.n	800ac1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	015a      	lsls	r2, r3, #5
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	4413      	add	r3, r2
 800abc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	db12      	blt.n	800abf8 <USB_EPSetStall+0x54>
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00f      	beq.n	800abf8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	015a      	lsls	r2, r3, #5
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	4413      	add	r3, r2
 800abe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	0151      	lsls	r1, r2, #5
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	440a      	add	r2, r1
 800abee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abf2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800abf6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	015a      	lsls	r2, r3, #5
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	4413      	add	r3, r2
 800ac00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	0151      	lsls	r1, r2, #5
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	440a      	add	r2, r1
 800ac0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ac16:	6013      	str	r3, [r2, #0]
 800ac18:	e02b      	b.n	800ac72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	015a      	lsls	r2, r3, #5
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	4413      	add	r3, r2
 800ac22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	db12      	blt.n	800ac52 <USB_EPSetStall+0xae>
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00f      	beq.n	800ac52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	015a      	lsls	r2, r3, #5
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	4413      	add	r3, r2
 800ac3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	0151      	lsls	r1, r2, #5
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	440a      	add	r2, r1
 800ac48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ac50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	015a      	lsls	r2, r3, #5
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	4413      	add	r3, r2
 800ac5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	0151      	lsls	r1, r2, #5
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	440a      	add	r2, r1
 800ac68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ac70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	785b      	ldrb	r3, [r3, #1]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d128      	bne.n	800acee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	015a      	lsls	r2, r3, #5
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	4413      	add	r3, r2
 800aca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	0151      	lsls	r1, r2, #5
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	440a      	add	r2, r1
 800acb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800acba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	791b      	ldrb	r3, [r3, #4]
 800acc0:	2b03      	cmp	r3, #3
 800acc2:	d003      	beq.n	800accc <USB_EPClearStall+0x4c>
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	791b      	ldrb	r3, [r3, #4]
 800acc8:	2b02      	cmp	r3, #2
 800acca:	d138      	bne.n	800ad3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	015a      	lsls	r2, r3, #5
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	4413      	add	r3, r2
 800acd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	0151      	lsls	r1, r2, #5
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	440a      	add	r2, r1
 800ace2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ace6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800acea:	6013      	str	r3, [r2, #0]
 800acec:	e027      	b.n	800ad3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	015a      	lsls	r2, r3, #5
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	4413      	add	r3, r2
 800acf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	0151      	lsls	r1, r2, #5
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	440a      	add	r2, r1
 800ad04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad08:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ad0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	791b      	ldrb	r3, [r3, #4]
 800ad12:	2b03      	cmp	r3, #3
 800ad14:	d003      	beq.n	800ad1e <USB_EPClearStall+0x9e>
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	791b      	ldrb	r3, [r3, #4]
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d10f      	bne.n	800ad3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	015a      	lsls	r2, r3, #5
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	4413      	add	r3, r2
 800ad26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	68ba      	ldr	r2, [r7, #8]
 800ad2e:	0151      	lsls	r1, r2, #5
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	440a      	add	r2, r1
 800ad34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	460b      	mov	r3, r1
 800ad56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad6a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ad6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	78fb      	ldrb	r3, [r7, #3]
 800ad7a:	011b      	lsls	r3, r3, #4
 800ad7c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ad80:	68f9      	ldr	r1, [r7, #12]
 800ad82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad86:	4313      	orrs	r3, r2
 800ad88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3714      	adds	r7, #20
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	695b      	ldr	r3, [r3, #20]
 800ada4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	699b      	ldr	r3, [r3, #24]
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	4013      	ands	r3, r2
 800adae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800adb0:	68fb      	ldr	r3, [r7, #12]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3714      	adds	r7, #20
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b085      	sub	sp, #20
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800add0:	699b      	ldr	r3, [r3, #24]
 800add2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adda:	69db      	ldr	r3, [r3, #28]
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	4013      	ands	r3, r2
 800ade0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	0c1b      	lsrs	r3, r3, #16
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3714      	adds	r7, #20
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr

0800adf2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800adf2:	b480      	push	{r7}
 800adf4:	b085      	sub	sp, #20
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae0e:	69db      	ldr	r3, [r3, #28]
 800ae10:	68ba      	ldr	r2, [r7, #8]
 800ae12:	4013      	ands	r3, r2
 800ae14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	b29b      	uxth	r3, r3
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3714      	adds	r7, #20
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr

0800ae26 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae26:	b480      	push	{r7}
 800ae28:	b085      	sub	sp, #20
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
 800ae2e:	460b      	mov	r3, r1
 800ae30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ae36:	78fb      	ldrb	r3, [r7, #3]
 800ae38:	015a      	lsls	r2, r3, #5
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae4c:	695b      	ldr	r3, [r3, #20]
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	4013      	ands	r3, r2
 800ae52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae54:	68bb      	ldr	r3, [r7, #8]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3714      	adds	r7, #20
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae62:	b480      	push	{r7}
 800ae64:	b087      	sub	sp, #28
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae84:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ae86:	78fb      	ldrb	r3, [r7, #3]
 800ae88:	f003 030f 	and.w	r3, r3, #15
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae92:	01db      	lsls	r3, r3, #7
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	693a      	ldr	r2, [r7, #16]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ae9c:	78fb      	ldrb	r3, [r7, #3]
 800ae9e:	015a      	lsls	r2, r3, #5
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	4413      	add	r3, r2
 800aea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	693a      	ldr	r2, [r7, #16]
 800aeac:	4013      	ands	r3, r2
 800aeae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aeb0:	68bb      	ldr	r3, [r7, #8]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	371c      	adds	r7, #28
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800aebe:	b480      	push	{r7}
 800aec0:	b083      	sub	sp, #12
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	695b      	ldr	r3, [r3, #20]
 800aeca:	f003 0301 	and.w	r3, r3, #1
}
 800aece:	4618      	mov	r0, r3
 800aed0:	370c      	adds	r7, #12
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr

0800aeda <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800aeda:	b480      	push	{r7}
 800aedc:	b085      	sub	sp, #20
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aef4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aef8:	f023 0307 	bic.w	r3, r3, #7
 800aefc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800af0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	3714      	adds	r7, #20
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800af20:	b480      	push	{r7}
 800af22:	b087      	sub	sp, #28
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	460b      	mov	r3, r1
 800af2a:	607a      	str	r2, [r7, #4]
 800af2c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	333c      	adds	r3, #60	@ 0x3c
 800af36:	3304      	adds	r3, #4
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	4a26      	ldr	r2, [pc, #152]	@ (800afd8 <USB_EP0_OutStart+0xb8>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d90a      	bls.n	800af5a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af54:	d101      	bne.n	800af5a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800af56:	2300      	movs	r3, #0
 800af58:	e037      	b.n	800afca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af60:	461a      	mov	r2, r3
 800af62:	2300      	movs	r3, #0
 800af64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af88:	f043 0318 	orr.w	r3, r3, #24
 800af8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af9c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800afa0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800afa2:	7afb      	ldrb	r3, [r7, #11]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d10f      	bne.n	800afc8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afae:	461a      	mov	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	697a      	ldr	r2, [r7, #20]
 800afbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afc2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800afc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	371c      	adds	r7, #28
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	4f54300a 	.word	0x4f54300a

0800afdc <dht11_SetPinOutput>:

#include "../../util/delay.h"



void dht11_SetPinOutput(uint8_t DHT11_Instance){
 800afdc:	b580      	push	{r7, lr}
 800afde:	b088      	sub	sp, #32
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afe6:	f107 030c 	add.w	r3, r7, #12
 800afea:	2200      	movs	r2, #0
 800afec:	601a      	str	r2, [r3, #0]
 800afee:	605a      	str	r2, [r3, #4]
 800aff0:	609a      	str	r2, [r3, #8]
 800aff2:	60da      	str	r2, [r3, #12]
 800aff4:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = dht11_CfgParam[DHT11_Instance].GPIO_PIN;
 800aff6:	79fa      	ldrb	r2, [r7, #7]
 800aff8:	490f      	ldr	r1, [pc, #60]	@ (800b038 <dht11_SetPinOutput+0x5c>)
 800affa:	4613      	mov	r3, r2
 800affc:	005b      	lsls	r3, r3, #1
 800affe:	4413      	add	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	440b      	add	r3, r1
 800b004:	3308      	adds	r3, #8
 800b006:	881b      	ldrh	r3, [r3, #0]
 800b008:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b00a:	2301      	movs	r3, #1
 800b00c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b00e:	2300      	movs	r3, #0
 800b010:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(dht11_CfgParam[DHT11_Instance].GPIO_PORT, &GPIO_InitStruct);
 800b012:	79fa      	ldrb	r2, [r7, #7]
 800b014:	4908      	ldr	r1, [pc, #32]	@ (800b038 <dht11_SetPinOutput+0x5c>)
 800b016:	4613      	mov	r3, r2
 800b018:	005b      	lsls	r3, r3, #1
 800b01a:	4413      	add	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	440b      	add	r3, r1
 800b020:	3304      	adds	r3, #4
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f107 020c 	add.w	r2, r7, #12
 800b028:	4611      	mov	r1, r2
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7f9 f96c 	bl	8004308 <HAL_GPIO_Init>
}
 800b030:	bf00      	nop
 800b032:	3720      	adds	r7, #32
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	08014d38 	.word	0x08014d38

0800b03c <dht11_SetPinInput>:


void dht11_SetPinInput(uint8_t DHT11_Instance){
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b088      	sub	sp, #32
 800b040:	af00      	add	r7, sp, #0
 800b042:	4603      	mov	r3, r0
 800b044:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b046:	f107 030c 	add.w	r3, r7, #12
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	605a      	str	r2, [r3, #4]
 800b050:	609a      	str	r2, [r3, #8]
 800b052:	60da      	str	r2, [r3, #12]
 800b054:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = dht11_CfgParam[DHT11_Instance].GPIO_PIN;
 800b056:	79fa      	ldrb	r2, [r7, #7]
 800b058:	490f      	ldr	r1, [pc, #60]	@ (800b098 <dht11_SetPinInput+0x5c>)
 800b05a:	4613      	mov	r3, r2
 800b05c:	005b      	lsls	r3, r3, #1
 800b05e:	4413      	add	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	440b      	add	r3, r1
 800b064:	3308      	adds	r3, #8
 800b066:	881b      	ldrh	r3, [r3, #0]
 800b068:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b06a:	2300      	movs	r3, #0
 800b06c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b06e:	2300      	movs	r3, #0
 800b070:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(dht11_CfgParam[DHT11_Instance].GPIO_PORT, &GPIO_InitStruct);
 800b072:	79fa      	ldrb	r2, [r7, #7]
 800b074:	4908      	ldr	r1, [pc, #32]	@ (800b098 <dht11_SetPinInput+0x5c>)
 800b076:	4613      	mov	r3, r2
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	4413      	add	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	440b      	add	r3, r1
 800b080:	3304      	adds	r3, #4
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f107 020c 	add.w	r2, r7, #12
 800b088:	4611      	mov	r1, r2
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7f9 f93c 	bl	8004308 <HAL_GPIO_Init>
}
 800b090:	bf00      	nop
 800b092:	3720      	adds	r7, #32
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	08014d38 	.word	0x08014d38

0800b09c <dht11_Start>:


void dht11_Start(uint8_t DHT11_Instance){
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b088      	sub	sp, #32
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	71fb      	strb	r3, [r7, #7]
	dht11_SetPinOutput(DHT11_Instance);
 800b0a6:	79fb      	ldrb	r3, [r7, #7]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7ff ff97 	bl	800afdc <dht11_SetPinOutput>
	HAL_GPIO_WritePin(dht11_CfgParam[DHT11_Instance].GPIO_PORT, dht11_CfgParam[DHT11_Instance].GPIO_PIN, GPIO_PIN_RESET);
 800b0ae:	79fa      	ldrb	r2, [r7, #7]
 800b0b0:	493b      	ldr	r1, [pc, #236]	@ (800b1a0 <dht11_Start+0x104>)
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	005b      	lsls	r3, r3, #1
 800b0b6:	4413      	add	r3, r2
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	440b      	add	r3, r1
 800b0bc:	3304      	adds	r3, #4
 800b0be:	6818      	ldr	r0, [r3, #0]
 800b0c0:	79fa      	ldrb	r2, [r7, #7]
 800b0c2:	4937      	ldr	r1, [pc, #220]	@ (800b1a0 <dht11_Start+0x104>)
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	005b      	lsls	r3, r3, #1
 800b0c8:	4413      	add	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	440b      	add	r3, r1
 800b0ce:	3308      	adds	r3, #8
 800b0d0:	881b      	ldrh	r3, [r3, #0]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	f7f9 facb 	bl	8004670 <HAL_GPIO_WritePin>
	DELAY_MS(18); //wait for 18ms
 800b0da:	2300      	movs	r3, #0
 800b0dc:	61fb      	str	r3, [r7, #28]
 800b0de:	e01f      	b.n	800b120 <dht11_Start+0x84>
 800b0e0:	4b30      	ldr	r3, [pc, #192]	@ (800b1a4 <dht11_Start+0x108>)
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	613b      	str	r3, [r7, #16]
 800b0e6:	4b30      	ldr	r3, [pc, #192]	@ (800b1a8 <dht11_Start+0x10c>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a30      	ldr	r2, [pc, #192]	@ (800b1ac <dht11_Start+0x110>)
 800b0ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b0f0:	0c9b      	lsrs	r3, r3, #18
 800b0f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b0f6:	fb03 f202 	mul.w	r2, r3, r2
 800b0fa:	4b2b      	ldr	r3, [pc, #172]	@ (800b1a8 <dht11_Start+0x10c>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	492b      	ldr	r1, [pc, #172]	@ (800b1ac <dht11_Start+0x110>)
 800b100:	fba1 1303 	umull	r1, r3, r1, r3
 800b104:	0c9b      	lsrs	r3, r3, #18
 800b106:	085b      	lsrs	r3, r3, #1
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	4b25      	ldr	r3, [pc, #148]	@ (800b1a4 <dht11_Start+0x108>)
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	1ad3      	subs	r3, r2, r3
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	429a      	cmp	r2, r3
 800b118:	d8f8      	bhi.n	800b10c <dht11_Start+0x70>
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	3301      	adds	r3, #1
 800b11e:	61fb      	str	r3, [r7, #28]
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	2b11      	cmp	r3, #17
 800b124:	d9dc      	bls.n	800b0e0 <dht11_Start+0x44>
	HAL_GPIO_WritePin(dht11_CfgParam[DHT11_Instance].GPIO_PORT, dht11_CfgParam[DHT11_Instance].GPIO_PIN, GPIO_PIN_SET);
 800b126:	79fa      	ldrb	r2, [r7, #7]
 800b128:	491d      	ldr	r1, [pc, #116]	@ (800b1a0 <dht11_Start+0x104>)
 800b12a:	4613      	mov	r3, r2
 800b12c:	005b      	lsls	r3, r3, #1
 800b12e:	4413      	add	r3, r2
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	440b      	add	r3, r1
 800b134:	3304      	adds	r3, #4
 800b136:	6818      	ldr	r0, [r3, #0]
 800b138:	79fa      	ldrb	r2, [r7, #7]
 800b13a:	4919      	ldr	r1, [pc, #100]	@ (800b1a0 <dht11_Start+0x104>)
 800b13c:	4613      	mov	r3, r2
 800b13e:	005b      	lsls	r3, r3, #1
 800b140:	4413      	add	r3, r2
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	440b      	add	r3, r1
 800b146:	3308      	adds	r3, #8
 800b148:	881b      	ldrh	r3, [r3, #0]
 800b14a:	2201      	movs	r2, #1
 800b14c:	4619      	mov	r1, r3
 800b14e:	f7f9 fa8f 	bl	8004670 <HAL_GPIO_WritePin>
	DELAY_US(30);   // 20–40µs
 800b152:	4b14      	ldr	r3, [pc, #80]	@ (800b1a4 <dht11_Start+0x108>)
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	61bb      	str	r3, [r7, #24]
 800b158:	4b13      	ldr	r3, [pc, #76]	@ (800b1a8 <dht11_Start+0x10c>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a13      	ldr	r2, [pc, #76]	@ (800b1ac <dht11_Start+0x110>)
 800b15e:	fba2 2303 	umull	r2, r3, r2, r3
 800b162:	0c9a      	lsrs	r2, r3, #18
 800b164:	4613      	mov	r3, r2
 800b166:	011b      	lsls	r3, r3, #4
 800b168:	1a9b      	subs	r3, r3, r2
 800b16a:	005b      	lsls	r3, r3, #1
 800b16c:	4619      	mov	r1, r3
 800b16e:	4b0e      	ldr	r3, [pc, #56]	@ (800b1a8 <dht11_Start+0x10c>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a0e      	ldr	r2, [pc, #56]	@ (800b1ac <dht11_Start+0x110>)
 800b174:	fba2 2303 	umull	r2, r3, r2, r3
 800b178:	0c9b      	lsrs	r3, r3, #18
 800b17a:	085b      	lsrs	r3, r3, #1
 800b17c:	1acb      	subs	r3, r1, r3
 800b17e:	617b      	str	r3, [r7, #20]
 800b180:	4b08      	ldr	r3, [pc, #32]	@ (800b1a4 <dht11_Start+0x108>)
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	69ba      	ldr	r2, [r7, #24]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	697a      	ldr	r2, [r7, #20]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d8f8      	bhi.n	800b180 <dht11_Start+0xe4>
	dht11_SetPinInput(DHT11_Instance);
 800b18e:	79fb      	ldrb	r3, [r7, #7]
 800b190:	4618      	mov	r0, r3
 800b192:	f7ff ff53 	bl	800b03c <dht11_SetPinInput>

}
 800b196:	bf00      	nop
 800b198:	3720      	adds	r7, #32
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	08014d38 	.word	0x08014d38
 800b1a4:	e000e010 	.word	0xe000e010
 800b1a8:	20000000 	.word	0x20000000
 800b1ac:	431bde83 	.word	0x431bde83

0800b1b0 <dht11_CheckResponse>:


uint8_t dht11_CheckResponse(uint8_t DHT11_Instance){
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b088      	sub	sp, #32
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	71fb      	strb	r3, [r7, #7]
	uint8_t response = 0;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	77fb      	strb	r3, [r7, #31]

	DELAY_US(40); //wait 40us
 800b1be:	4b4c      	ldr	r3, [pc, #304]	@ (800b2f0 <dht11_CheckResponse+0x140>)
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	617b      	str	r3, [r7, #20]
 800b1c4:	4b4b      	ldr	r3, [pc, #300]	@ (800b2f4 <dht11_CheckResponse+0x144>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a4b      	ldr	r2, [pc, #300]	@ (800b2f8 <dht11_CheckResponse+0x148>)
 800b1ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ce:	0c9a      	lsrs	r2, r3, #18
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4413      	add	r3, r2
 800b1d6:	00db      	lsls	r3, r3, #3
 800b1d8:	4619      	mov	r1, r3
 800b1da:	4b46      	ldr	r3, [pc, #280]	@ (800b2f4 <dht11_CheckResponse+0x144>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a46      	ldr	r2, [pc, #280]	@ (800b2f8 <dht11_CheckResponse+0x148>)
 800b1e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1e4:	0c9b      	lsrs	r3, r3, #18
 800b1e6:	085b      	lsrs	r3, r3, #1
 800b1e8:	1acb      	subs	r3, r1, r3
 800b1ea:	613b      	str	r3, [r7, #16]
 800b1ec:	4b40      	ldr	r3, [pc, #256]	@ (800b2f0 <dht11_CheckResponse+0x140>)
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	697a      	ldr	r2, [r7, #20]
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	693a      	ldr	r2, [r7, #16]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d8f8      	bhi.n	800b1ec <dht11_CheckResponse+0x3c>


	if(!(HAL_GPIO_ReadPin(dht11_CfgParam[DHT11_Instance].GPIO_PORT, dht11_CfgParam[DHT11_Instance].GPIO_PIN))){
 800b1fa:	79fa      	ldrb	r2, [r7, #7]
 800b1fc:	493f      	ldr	r1, [pc, #252]	@ (800b2fc <dht11_CheckResponse+0x14c>)
 800b1fe:	4613      	mov	r3, r2
 800b200:	005b      	lsls	r3, r3, #1
 800b202:	4413      	add	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	440b      	add	r3, r1
 800b208:	3304      	adds	r3, #4
 800b20a:	6818      	ldr	r0, [r3, #0]
 800b20c:	79fa      	ldrb	r2, [r7, #7]
 800b20e:	493b      	ldr	r1, [pc, #236]	@ (800b2fc <dht11_CheckResponse+0x14c>)
 800b210:	4613      	mov	r3, r2
 800b212:	005b      	lsls	r3, r3, #1
 800b214:	4413      	add	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	440b      	add	r3, r1
 800b21a:	3308      	adds	r3, #8
 800b21c:	881b      	ldrh	r3, [r3, #0]
 800b21e:	4619      	mov	r1, r3
 800b220:	f7f9 fa0e 	bl	8004640 <HAL_GPIO_ReadPin>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d137      	bne.n	800b29a <dht11_CheckResponse+0xea>

		DELAY_US(80); // wait 80us
 800b22a:	4b31      	ldr	r3, [pc, #196]	@ (800b2f0 <dht11_CheckResponse+0x140>)
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	60fb      	str	r3, [r7, #12]
 800b230:	4b30      	ldr	r3, [pc, #192]	@ (800b2f4 <dht11_CheckResponse+0x144>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a30      	ldr	r2, [pc, #192]	@ (800b2f8 <dht11_CheckResponse+0x148>)
 800b236:	fba2 2303 	umull	r2, r3, r2, r3
 800b23a:	0c9a      	lsrs	r2, r3, #18
 800b23c:	4613      	mov	r3, r2
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	4413      	add	r3, r2
 800b242:	011b      	lsls	r3, r3, #4
 800b244:	4619      	mov	r1, r3
 800b246:	4b2b      	ldr	r3, [pc, #172]	@ (800b2f4 <dht11_CheckResponse+0x144>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a2b      	ldr	r2, [pc, #172]	@ (800b2f8 <dht11_CheckResponse+0x148>)
 800b24c:	fba2 2303 	umull	r2, r3, r2, r3
 800b250:	0c9b      	lsrs	r3, r3, #18
 800b252:	085b      	lsrs	r3, r3, #1
 800b254:	1acb      	subs	r3, r1, r3
 800b256:	60bb      	str	r3, [r7, #8]
 800b258:	4b25      	ldr	r3, [pc, #148]	@ (800b2f0 <dht11_CheckResponse+0x140>)
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	1ad3      	subs	r3, r2, r3
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	429a      	cmp	r2, r3
 800b264:	d8f8      	bhi.n	800b258 <dht11_CheckResponse+0xa8>

		if((HAL_GPIO_ReadPin(dht11_CfgParam[DHT11_Instance].GPIO_PORT, dht11_CfgParam[DHT11_Instance].GPIO_PIN))){
 800b266:	79fa      	ldrb	r2, [r7, #7]
 800b268:	4924      	ldr	r1, [pc, #144]	@ (800b2fc <dht11_CheckResponse+0x14c>)
 800b26a:	4613      	mov	r3, r2
 800b26c:	005b      	lsls	r3, r3, #1
 800b26e:	4413      	add	r3, r2
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	440b      	add	r3, r1
 800b274:	3304      	adds	r3, #4
 800b276:	6818      	ldr	r0, [r3, #0]
 800b278:	79fa      	ldrb	r2, [r7, #7]
 800b27a:	4920      	ldr	r1, [pc, #128]	@ (800b2fc <dht11_CheckResponse+0x14c>)
 800b27c:	4613      	mov	r3, r2
 800b27e:	005b      	lsls	r3, r3, #1
 800b280:	4413      	add	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	440b      	add	r3, r1
 800b286:	3308      	adds	r3, #8
 800b288:	881b      	ldrh	r3, [r3, #0]
 800b28a:	4619      	mov	r1, r3
 800b28c:	f7f9 f9d8 	bl	8004640 <HAL_GPIO_ReadPin>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <dht11_CheckResponse+0xea>
			response = 1;
 800b296:	2301      	movs	r3, #1
 800b298:	77fb      	strb	r3, [r7, #31]

		}
	}

	uint32_t timeout = 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	61bb      	str	r3, [r7, #24]
	while((HAL_GPIO_ReadPin(dht11_CfgParam[DHT11_Instance].GPIO_PORT, dht11_CfgParam[DHT11_Instance].GPIO_PIN))){// wait for end of response
 800b29e:	e009      	b.n	800b2b4 <dht11_CheckResponse+0x104>
		if (++timeout > 10000) return 0; // fail safely
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	61bb      	str	r3, [r7, #24]
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d901      	bls.n	800b2b4 <dht11_CheckResponse+0x104>
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	e018      	b.n	800b2e6 <dht11_CheckResponse+0x136>
	while((HAL_GPIO_ReadPin(dht11_CfgParam[DHT11_Instance].GPIO_PORT, dht11_CfgParam[DHT11_Instance].GPIO_PIN))){// wait for end of response
 800b2b4:	79fa      	ldrb	r2, [r7, #7]
 800b2b6:	4911      	ldr	r1, [pc, #68]	@ (800b2fc <dht11_CheckResponse+0x14c>)
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	005b      	lsls	r3, r3, #1
 800b2bc:	4413      	add	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	440b      	add	r3, r1
 800b2c2:	3304      	adds	r3, #4
 800b2c4:	6818      	ldr	r0, [r3, #0]
 800b2c6:	79fa      	ldrb	r2, [r7, #7]
 800b2c8:	490c      	ldr	r1, [pc, #48]	@ (800b2fc <dht11_CheckResponse+0x14c>)
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	005b      	lsls	r3, r3, #1
 800b2ce:	4413      	add	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	440b      	add	r3, r1
 800b2d4:	3308      	adds	r3, #8
 800b2d6:	881b      	ldrh	r3, [r3, #0]
 800b2d8:	4619      	mov	r1, r3
 800b2da:	f7f9 f9b1 	bl	8004640 <HAL_GPIO_ReadPin>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1dd      	bne.n	800b2a0 <dht11_CheckResponse+0xf0>
	}


	return response;
 800b2e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3720      	adds	r7, #32
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	e000e010 	.word	0xe000e010
 800b2f4:	20000000 	.word	0x20000000
 800b2f8:	431bde83 	.word	0x431bde83
 800b2fc:	08014d38 	.word	0x08014d38

0800b300 <dht11_Read>:


uint8_t dht11_Read(uint8_t DHT11_Instance, uint8_t* temperature, uint8_t* humidity){
 800b300:	b580      	push	{r7, lr}
 800b302:	b08a      	sub	sp, #40	@ 0x28
 800b304:	af00      	add	r7, sp, #0
 800b306:	4603      	mov	r3, r0
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
 800b30c:	73fb      	strb	r3, [r7, #15]
	uint8_t bits[5] = {0};
 800b30e:	2300      	movs	r3, #0
 800b310:	613b      	str	r3, [r7, #16]
 800b312:	2300      	movs	r3, #0
 800b314:	753b      	strb	r3, [r7, #20]

	dht11_Start(DHT11_Instance);
 800b316:	7bfb      	ldrb	r3, [r7, #15]
 800b318:	4618      	mov	r0, r3
 800b31a:	f7ff febf 	bl	800b09c <dht11_Start>


	if (!dht11_CheckResponse(DHT11_Instance)){
 800b31e:	7bfb      	ldrb	r3, [r7, #15]
 800b320:	4618      	mov	r0, r3
 800b322:	f7ff ff45 	bl	800b1b0 <dht11_CheckResponse>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d101      	bne.n	800b330 <dht11_Read+0x30>

		return DHT11_NO_RESPONSE;
 800b32c:	2301      	movs	r3, #1
 800b32e:	e0bc      	b.n	800b4aa <dht11_Read+0x1aa>
	}


	for (int i = 0; i < 40; i++) {
 800b330:	2300      	movs	r3, #0
 800b332:	627b      	str	r3, [r7, #36]	@ 0x24
 800b334:	e0a1      	b.n	800b47a <dht11_Read+0x17a>

		// Wait for pin to go high
		uint32_t timeout = 0;
 800b336:	2300      	movs	r3, #0
 800b338:	623b      	str	r3, [r7, #32]
		while (!HAL_GPIO_ReadPin(dht11_CfgParam[DHT11_Instance].GPIO_PORT, dht11_CfgParam[DHT11_Instance].GPIO_PIN)) {
 800b33a:	e008      	b.n	800b34e <dht11_Read+0x4e>
			if (++timeout > 1000) return DHT11_TIMEOUT;
 800b33c:	6a3b      	ldr	r3, [r7, #32]
 800b33e:	3301      	adds	r3, #1
 800b340:	623b      	str	r3, [r7, #32]
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b348:	d901      	bls.n	800b34e <dht11_Read+0x4e>
 800b34a:	2302      	movs	r3, #2
 800b34c:	e0ad      	b.n	800b4aa <dht11_Read+0x1aa>
		while (!HAL_GPIO_ReadPin(dht11_CfgParam[DHT11_Instance].GPIO_PORT, dht11_CfgParam[DHT11_Instance].GPIO_PIN)) {
 800b34e:	7bfa      	ldrb	r2, [r7, #15]
 800b350:	4958      	ldr	r1, [pc, #352]	@ (800b4b4 <dht11_Read+0x1b4>)
 800b352:	4613      	mov	r3, r2
 800b354:	005b      	lsls	r3, r3, #1
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	440b      	add	r3, r1
 800b35c:	3304      	adds	r3, #4
 800b35e:	6818      	ldr	r0, [r3, #0]
 800b360:	7bfa      	ldrb	r2, [r7, #15]
 800b362:	4954      	ldr	r1, [pc, #336]	@ (800b4b4 <dht11_Read+0x1b4>)
 800b364:	4613      	mov	r3, r2
 800b366:	005b      	lsls	r3, r3, #1
 800b368:	4413      	add	r3, r2
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	440b      	add	r3, r1
 800b36e:	3308      	adds	r3, #8
 800b370:	881b      	ldrh	r3, [r3, #0]
 800b372:	4619      	mov	r1, r3
 800b374:	f7f9 f964 	bl	8004640 <HAL_GPIO_ReadPin>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d0de      	beq.n	800b33c <dht11_Read+0x3c>
		}

		// Delay ~30us to sample bit value
		DELAY_US(30);
 800b37e:	4b4e      	ldr	r3, [pc, #312]	@ (800b4b8 <dht11_Read+0x1b8>)
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	61fb      	str	r3, [r7, #28]
 800b384:	4b4d      	ldr	r3, [pc, #308]	@ (800b4bc <dht11_Read+0x1bc>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a4d      	ldr	r2, [pc, #308]	@ (800b4c0 <dht11_Read+0x1c0>)
 800b38a:	fba2 2303 	umull	r2, r3, r2, r3
 800b38e:	0c9a      	lsrs	r2, r3, #18
 800b390:	4613      	mov	r3, r2
 800b392:	011b      	lsls	r3, r3, #4
 800b394:	1a9b      	subs	r3, r3, r2
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	4619      	mov	r1, r3
 800b39a:	4b48      	ldr	r3, [pc, #288]	@ (800b4bc <dht11_Read+0x1bc>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a48      	ldr	r2, [pc, #288]	@ (800b4c0 <dht11_Read+0x1c0>)
 800b3a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b3a4:	0c9b      	lsrs	r3, r3, #18
 800b3a6:	085b      	lsrs	r3, r3, #1
 800b3a8:	1acb      	subs	r3, r1, r3
 800b3aa:	61bb      	str	r3, [r7, #24]
 800b3ac:	4b42      	ldr	r3, [pc, #264]	@ (800b4b8 <dht11_Read+0x1b8>)
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	69fa      	ldr	r2, [r7, #28]
 800b3b2:	1ad3      	subs	r3, r2, r3
 800b3b4:	69ba      	ldr	r2, [r7, #24]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d8f8      	bhi.n	800b3ac <dht11_Read+0xac>

		bits[i / 8] <<= 1;
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	da00      	bge.n	800b3c2 <dht11_Read+0xc2>
 800b3c0:	3307      	adds	r3, #7
 800b3c2:	10db      	asrs	r3, r3, #3
 800b3c4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800b3c8:	443a      	add	r2, r7
 800b3ca:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800b3ce:	0052      	lsls	r2, r2, #1
 800b3d0:	b2d2      	uxtb	r2, r2
 800b3d2:	3328      	adds	r3, #40	@ 0x28
 800b3d4:	443b      	add	r3, r7
 800b3d6:	f803 2c18 	strb.w	r2, [r3, #-24]
		if (HAL_GPIO_ReadPin(dht11_CfgParam[DHT11_Instance].GPIO_PORT, dht11_CfgParam[DHT11_Instance].GPIO_PIN))
 800b3da:	7bfa      	ldrb	r2, [r7, #15]
 800b3dc:	4935      	ldr	r1, [pc, #212]	@ (800b4b4 <dht11_Read+0x1b4>)
 800b3de:	4613      	mov	r3, r2
 800b3e0:	005b      	lsls	r3, r3, #1
 800b3e2:	4413      	add	r3, r2
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	440b      	add	r3, r1
 800b3e8:	3304      	adds	r3, #4
 800b3ea:	6818      	ldr	r0, [r3, #0]
 800b3ec:	7bfa      	ldrb	r2, [r7, #15]
 800b3ee:	4931      	ldr	r1, [pc, #196]	@ (800b4b4 <dht11_Read+0x1b4>)
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	005b      	lsls	r3, r3, #1
 800b3f4:	4413      	add	r3, r2
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	440b      	add	r3, r1
 800b3fa:	3308      	adds	r3, #8
 800b3fc:	881b      	ldrh	r3, [r3, #0]
 800b3fe:	4619      	mov	r1, r3
 800b400:	f7f9 f91e 	bl	8004640 <HAL_GPIO_ReadPin>
 800b404:	4603      	mov	r3, r0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d010      	beq.n	800b42c <dht11_Read+0x12c>
			bits[i / 8] |= 1;
 800b40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	da00      	bge.n	800b412 <dht11_Read+0x112>
 800b410:	3307      	adds	r3, #7
 800b412:	10db      	asrs	r3, r3, #3
 800b414:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800b418:	443a      	add	r2, r7
 800b41a:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800b41e:	f042 0201 	orr.w	r2, r2, #1
 800b422:	b2d2      	uxtb	r2, r2
 800b424:	3328      	adds	r3, #40	@ 0x28
 800b426:	443b      	add	r3, r7
 800b428:	f803 2c18 	strb.w	r2, [r3, #-24]

		timeout = 0;
 800b42c:	2300      	movs	r3, #0
 800b42e:	623b      	str	r3, [r7, #32]
		while (HAL_GPIO_ReadPin(dht11_CfgParam[DHT11_Instance].GPIO_PORT, dht11_CfgParam[DHT11_Instance].GPIO_PIN)) {
 800b430:	e008      	b.n	800b444 <dht11_Read+0x144>
			if (++timeout > 1000) return DHT11_TIMEOUT;
 800b432:	6a3b      	ldr	r3, [r7, #32]
 800b434:	3301      	adds	r3, #1
 800b436:	623b      	str	r3, [r7, #32]
 800b438:	6a3b      	ldr	r3, [r7, #32]
 800b43a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b43e:	d901      	bls.n	800b444 <dht11_Read+0x144>
 800b440:	2302      	movs	r3, #2
 800b442:	e032      	b.n	800b4aa <dht11_Read+0x1aa>
		while (HAL_GPIO_ReadPin(dht11_CfgParam[DHT11_Instance].GPIO_PORT, dht11_CfgParam[DHT11_Instance].GPIO_PIN)) {
 800b444:	7bfa      	ldrb	r2, [r7, #15]
 800b446:	491b      	ldr	r1, [pc, #108]	@ (800b4b4 <dht11_Read+0x1b4>)
 800b448:	4613      	mov	r3, r2
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	4413      	add	r3, r2
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	440b      	add	r3, r1
 800b452:	3304      	adds	r3, #4
 800b454:	6818      	ldr	r0, [r3, #0]
 800b456:	7bfa      	ldrb	r2, [r7, #15]
 800b458:	4916      	ldr	r1, [pc, #88]	@ (800b4b4 <dht11_Read+0x1b4>)
 800b45a:	4613      	mov	r3, r2
 800b45c:	005b      	lsls	r3, r3, #1
 800b45e:	4413      	add	r3, r2
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	440b      	add	r3, r1
 800b464:	3308      	adds	r3, #8
 800b466:	881b      	ldrh	r3, [r3, #0]
 800b468:	4619      	mov	r1, r3
 800b46a:	f7f9 f8e9 	bl	8004640 <HAL_GPIO_ReadPin>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1de      	bne.n	800b432 <dht11_Read+0x132>
	for (int i = 0; i < 40; i++) {
 800b474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b476:	3301      	adds	r3, #1
 800b478:	627b      	str	r3, [r7, #36]	@ 0x24
 800b47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47c:	2b27      	cmp	r3, #39	@ 0x27
 800b47e:	f77f af5a 	ble.w	800b336 <dht11_Read+0x36>
	}



	// Checksum
	if ((bits[0] + bits[1] + bits[2] + bits[3]) != bits[4]) return DHT11_CHECKSUM_ERR;
 800b482:	7c3b      	ldrb	r3, [r7, #16]
 800b484:	461a      	mov	r2, r3
 800b486:	7c7b      	ldrb	r3, [r7, #17]
 800b488:	4413      	add	r3, r2
 800b48a:	7cba      	ldrb	r2, [r7, #18]
 800b48c:	4413      	add	r3, r2
 800b48e:	7cfa      	ldrb	r2, [r7, #19]
 800b490:	4413      	add	r3, r2
 800b492:	7d3a      	ldrb	r2, [r7, #20]
 800b494:	4293      	cmp	r3, r2
 800b496:	d001      	beq.n	800b49c <dht11_Read+0x19c>
 800b498:	2303      	movs	r3, #3
 800b49a:	e006      	b.n	800b4aa <dht11_Read+0x1aa>

	*humidity = bits[0];
 800b49c:	7c3a      	ldrb	r2, [r7, #16]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	701a      	strb	r2, [r3, #0]
	*temperature = bits[2];
 800b4a2:	7cba      	ldrb	r2, [r7, #18]
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	701a      	strb	r2, [r3, #0]

//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14); // Toggle red LED every time sensor values are read

	return DHT11_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3728      	adds	r7, #40	@ 0x28
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	08014d38 	.word	0x08014d38
 800b4b8:	e000e010 	.word	0xe000e010
 800b4bc:	20000000 	.word	0x20000000
 800b4c0:	431bde83 	.word	0x431bde83

0800b4c4 <HCSR04_Init>:
static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};



void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b096      	sub	sp, #88	@ 0x58
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	6039      	str	r1, [r7, #0]
 800b4ce:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 800b4d0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	601a      	str	r2, [r3, #0]
 800b4d8:	605a      	str	r2, [r3, #4]
 800b4da:	609a      	str	r2, [r3, #8]
 800b4dc:	60da      	str	r2, [r3, #12]
 800b4de:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b4e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	601a      	str	r2, [r3, #0]
 800b4e8:	605a      	str	r2, [r3, #4]
 800b4ea:	609a      	str	r2, [r3, #8]
 800b4ec:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b4ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	601a      	str	r2, [r3, #0]
 800b4f6:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 800b4f8:	f107 031c 	add.w	r3, r7, #28
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	601a      	str	r2, [r3, #0]
 800b500:	605a      	str	r2, [r3, #4]
 800b502:	609a      	str	r2, [r3, #8]
 800b504:	60da      	str	r2, [r3, #12]



	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 800b506:	79fa      	ldrb	r2, [r7, #7]
 800b508:	4997      	ldr	r1, [pc, #604]	@ (800b768 <HCSR04_Init+0x2a4>)
 800b50a:	4613      	mov	r3, r2
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4413      	add	r3, r2
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	440b      	add	r3, r1
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a95      	ldr	r2, [pc, #596]	@ (800b76c <HCSR04_Init+0x2a8>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d10e      	bne.n	800b53a <HCSR04_Init+0x76>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 800b51c:	2300      	movs	r3, #0
 800b51e:	61bb      	str	r3, [r7, #24]
 800b520:	4b93      	ldr	r3, [pc, #588]	@ (800b770 <HCSR04_Init+0x2ac>)
 800b522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b524:	4a92      	ldr	r2, [pc, #584]	@ (800b770 <HCSR04_Init+0x2ac>)
 800b526:	f043 0301 	orr.w	r3, r3, #1
 800b52a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b52c:	4b90      	ldr	r3, [pc, #576]	@ (800b770 <HCSR04_Init+0x2ac>)
 800b52e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b530:	f003 0301 	and.w	r3, r3, #1
 800b534:	61bb      	str	r3, [r7, #24]
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	e066      	b.n	800b608 <HCSR04_Init+0x144>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 800b53a:	79fa      	ldrb	r2, [r7, #7]
 800b53c:	498a      	ldr	r1, [pc, #552]	@ (800b768 <HCSR04_Init+0x2a4>)
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	440b      	add	r3, r1
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a8a      	ldr	r2, [pc, #552]	@ (800b774 <HCSR04_Init+0x2b0>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d10e      	bne.n	800b56e <HCSR04_Init+0xaa>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 800b550:	2300      	movs	r3, #0
 800b552:	617b      	str	r3, [r7, #20]
 800b554:	4b86      	ldr	r3, [pc, #536]	@ (800b770 <HCSR04_Init+0x2ac>)
 800b556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b558:	4a85      	ldr	r2, [pc, #532]	@ (800b770 <HCSR04_Init+0x2ac>)
 800b55a:	f043 0302 	orr.w	r3, r3, #2
 800b55e:	6313      	str	r3, [r2, #48]	@ 0x30
 800b560:	4b83      	ldr	r3, [pc, #524]	@ (800b770 <HCSR04_Init+0x2ac>)
 800b562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b564:	f003 0302 	and.w	r3, r3, #2
 800b568:	617b      	str	r3, [r7, #20]
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	e04c      	b.n	800b608 <HCSR04_Init+0x144>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 800b56e:	79fa      	ldrb	r2, [r7, #7]
 800b570:	497d      	ldr	r1, [pc, #500]	@ (800b768 <HCSR04_Init+0x2a4>)
 800b572:	4613      	mov	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	440b      	add	r3, r1
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a7e      	ldr	r2, [pc, #504]	@ (800b778 <HCSR04_Init+0x2b4>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d10e      	bne.n	800b5a2 <HCSR04_Init+0xde>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 800b584:	2300      	movs	r3, #0
 800b586:	613b      	str	r3, [r7, #16]
 800b588:	4b79      	ldr	r3, [pc, #484]	@ (800b770 <HCSR04_Init+0x2ac>)
 800b58a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b58c:	4a78      	ldr	r2, [pc, #480]	@ (800b770 <HCSR04_Init+0x2ac>)
 800b58e:	f043 0304 	orr.w	r3, r3, #4
 800b592:	6313      	str	r3, [r2, #48]	@ 0x30
 800b594:	4b76      	ldr	r3, [pc, #472]	@ (800b770 <HCSR04_Init+0x2ac>)
 800b596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b598:	f003 0304 	and.w	r3, r3, #4
 800b59c:	613b      	str	r3, [r7, #16]
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	e032      	b.n	800b608 <HCSR04_Init+0x144>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 800b5a2:	79fa      	ldrb	r2, [r7, #7]
 800b5a4:	4970      	ldr	r1, [pc, #448]	@ (800b768 <HCSR04_Init+0x2a4>)
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4413      	add	r3, r2
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	440b      	add	r3, r1
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a72      	ldr	r2, [pc, #456]	@ (800b77c <HCSR04_Init+0x2b8>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d10e      	bne.n	800b5d6 <HCSR04_Init+0x112>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	60fb      	str	r3, [r7, #12]
 800b5bc:	4b6c      	ldr	r3, [pc, #432]	@ (800b770 <HCSR04_Init+0x2ac>)
 800b5be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5c0:	4a6b      	ldr	r2, [pc, #428]	@ (800b770 <HCSR04_Init+0x2ac>)
 800b5c2:	f043 0308 	orr.w	r3, r3, #8
 800b5c6:	6313      	str	r3, [r2, #48]	@ 0x30
 800b5c8:	4b69      	ldr	r3, [pc, #420]	@ (800b770 <HCSR04_Init+0x2ac>)
 800b5ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5cc:	f003 0308 	and.w	r3, r3, #8
 800b5d0:	60fb      	str	r3, [r7, #12]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	e018      	b.n	800b608 <HCSR04_Init+0x144>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
 800b5d6:	79fa      	ldrb	r2, [r7, #7]
 800b5d8:	4963      	ldr	r1, [pc, #396]	@ (800b768 <HCSR04_Init+0x2a4>)
 800b5da:	4613      	mov	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4413      	add	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	440b      	add	r3, r1
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a66      	ldr	r2, [pc, #408]	@ (800b780 <HCSR04_Init+0x2bc>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d10d      	bne.n	800b608 <HCSR04_Init+0x144>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	60bb      	str	r3, [r7, #8]
 800b5f0:	4b5f      	ldr	r3, [pc, #380]	@ (800b770 <HCSR04_Init+0x2ac>)
 800b5f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5f4:	4a5e      	ldr	r2, [pc, #376]	@ (800b770 <HCSR04_Init+0x2ac>)
 800b5f6:	f043 0310 	orr.w	r3, r3, #16
 800b5fa:	6313      	str	r3, [r2, #48]	@ 0x30
 800b5fc:	4b5c      	ldr	r3, [pc, #368]	@ (800b770 <HCSR04_Init+0x2ac>)
 800b5fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b600:	f003 0310 	and.w	r3, r3, #16
 800b604:	60bb      	str	r3, [r7, #8]
 800b606:	68bb      	ldr	r3, [r7, #8]
    }
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 800b608:	79fa      	ldrb	r2, [r7, #7]
 800b60a:	4957      	ldr	r1, [pc, #348]	@ (800b768 <HCSR04_Init+0x2a4>)
 800b60c:	4613      	mov	r3, r2
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	4413      	add	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	440b      	add	r3, r1
 800b616:	3304      	adds	r3, #4
 800b618:	881b      	ldrh	r3, [r3, #0]
 800b61a:	647b      	str	r3, [r7, #68]	@ 0x44
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b61c:	2301      	movs	r3, #1
 800b61e:	64bb      	str	r3, [r7, #72]	@ 0x48
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b620:	2300      	movs	r3, #0
 800b622:	64fb      	str	r3, [r7, #76]	@ 0x4c
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b624:	2300      	movs	r3, #0
 800b626:	653b      	str	r3, [r7, #80]	@ 0x50
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 800b628:	79fa      	ldrb	r2, [r7, #7]
 800b62a:	494f      	ldr	r1, [pc, #316]	@ (800b768 <HCSR04_Init+0x2a4>)
 800b62c:	4613      	mov	r3, r2
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4413      	add	r3, r2
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	440b      	add	r3, r1
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800b63c:	4611      	mov	r1, r2
 800b63e:	4618      	mov	r0, r3
 800b640:	f7f8 fe62 	bl	8004308 <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 800b644:	79fa      	ldrb	r2, [r7, #7]
 800b646:	4948      	ldr	r1, [pc, #288]	@ (800b768 <HCSR04_Init+0x2a4>)
 800b648:	4613      	mov	r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	4413      	add	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	440b      	add	r3, r1
 800b652:	3308      	adds	r3, #8
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	79fa      	ldrb	r2, [r7, #7]
 800b658:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800b65a:	484a      	ldr	r0, [pc, #296]	@ (800b784 <HCSR04_Init+0x2c0>)
 800b65c:	4613      	mov	r3, r2
 800b65e:	00db      	lsls	r3, r3, #3
 800b660:	4413      	add	r3, r2
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4403      	add	r3, r0
 800b666:	3304      	adds	r3, #4
 800b668:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 800b66a:	79fa      	ldrb	r2, [r7, #7]
 800b66c:	493e      	ldr	r1, [pc, #248]	@ (800b768 <HCSR04_Init+0x2a4>)
 800b66e:	4613      	mov	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	4413      	add	r3, r2
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	440b      	add	r3, r1
 800b678:	3308      	adds	r3, #8
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	79fa      	ldrb	r2, [r7, #7]
 800b67e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b680:	4840      	ldr	r0, [pc, #256]	@ (800b784 <HCSR04_Init+0x2c0>)
 800b682:	4613      	mov	r3, r2
 800b684:	00db      	lsls	r3, r3, #3
 800b686:	4413      	add	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4403      	add	r3, r0
 800b68c:	3308      	adds	r3, #8
 800b68e:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 800b690:	79fa      	ldrb	r2, [r7, #7]
 800b692:	493c      	ldr	r1, [pc, #240]	@ (800b784 <HCSR04_Init+0x2c0>)
 800b694:	4613      	mov	r3, r2
 800b696:	00db      	lsls	r3, r3, #3
 800b698:	4413      	add	r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	440b      	add	r3, r1
 800b69e:	3302      	adds	r3, #2
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	801a      	strh	r2, [r3, #0]
		gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 800b6a4:	79fa      	ldrb	r2, [r7, #7]
 800b6a6:	4937      	ldr	r1, [pc, #220]	@ (800b784 <HCSR04_Init+0x2c0>)
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	00db      	lsls	r3, r3, #3
 800b6ac:	4413      	add	r3, r2
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	440b      	add	r3, r1
 800b6b2:	331c      	adds	r3, #28
 800b6b4:	683a      	ldr	r2, [r7, #0]
 800b6b6:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 800b6b8:	79fa      	ldrb	r2, [r7, #7]
 800b6ba:	4932      	ldr	r1, [pc, #200]	@ (800b784 <HCSR04_Init+0x2c0>)
 800b6bc:	4613      	mov	r3, r2
 800b6be:	00db      	lsls	r3, r3, #3
 800b6c0:	4413      	add	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	440b      	add	r3, r1
 800b6c6:	3308      	adds	r3, #8
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d10a      	bne.n	800b6e4 <HCSR04_Init+0x220>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 800b6ce:	79fa      	ldrb	r2, [r7, #7]
 800b6d0:	492c      	ldr	r1, [pc, #176]	@ (800b784 <HCSR04_Init+0x2c0>)
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	00db      	lsls	r3, r3, #3
 800b6d6:	4413      	add	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	440b      	add	r3, r1
 800b6dc:	3308      	adds	r3, #8
 800b6de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b6e2:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 800b6e4:	79fa      	ldrb	r2, [r7, #7]
 800b6e6:	4920      	ldr	r1, [pc, #128]	@ (800b768 <HCSR04_Init+0x2a4>)
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	4413      	add	r3, r2
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	440b      	add	r3, r1
 800b6f2:	330c      	adds	r3, #12
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d10a      	bne.n	800b710 <HCSR04_Init+0x24c>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6fa:	79fa      	ldrb	r2, [r7, #7]
 800b6fc:	4921      	ldr	r1, [pc, #132]	@ (800b784 <HCSR04_Init+0x2c0>)
 800b6fe:	4613      	mov	r3, r2
 800b700:	00db      	lsls	r3, r3, #3
 800b702:	4413      	add	r3, r2
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	440b      	add	r3, r1
 800b708:	3320      	adds	r3, #32
 800b70a:	2201      	movs	r2, #1
 800b70c:	701a      	strb	r2, [r3, #0]
 800b70e:	e050      	b.n	800b7b2 <HCSR04_Init+0x2ee>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 800b710:	79fa      	ldrb	r2, [r7, #7]
 800b712:	4915      	ldr	r1, [pc, #84]	@ (800b768 <HCSR04_Init+0x2a4>)
 800b714:	4613      	mov	r3, r2
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	4413      	add	r3, r2
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	440b      	add	r3, r1
 800b71e:	330c      	adds	r3, #12
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b04      	cmp	r3, #4
 800b724:	d10a      	bne.n	800b73c <HCSR04_Init+0x278>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 800b726:	79fa      	ldrb	r2, [r7, #7]
 800b728:	4916      	ldr	r1, [pc, #88]	@ (800b784 <HCSR04_Init+0x2c0>)
 800b72a:	4613      	mov	r3, r2
 800b72c:	00db      	lsls	r3, r3, #3
 800b72e:	4413      	add	r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	440b      	add	r3, r1
 800b734:	3320      	adds	r3, #32
 800b736:	2202      	movs	r2, #2
 800b738:	701a      	strb	r2, [r3, #0]
 800b73a:	e03a      	b.n	800b7b2 <HCSR04_Init+0x2ee>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 800b73c:	79fa      	ldrb	r2, [r7, #7]
 800b73e:	490a      	ldr	r1, [pc, #40]	@ (800b768 <HCSR04_Init+0x2a4>)
 800b740:	4613      	mov	r3, r2
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	4413      	add	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	440b      	add	r3, r1
 800b74a:	330c      	adds	r3, #12
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b08      	cmp	r3, #8
 800b750:	d11a      	bne.n	800b788 <HCSR04_Init+0x2c4>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 800b752:	79fa      	ldrb	r2, [r7, #7]
 800b754:	490b      	ldr	r1, [pc, #44]	@ (800b784 <HCSR04_Init+0x2c0>)
 800b756:	4613      	mov	r3, r2
 800b758:	00db      	lsls	r3, r3, #3
 800b75a:	4413      	add	r3, r2
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	440b      	add	r3, r1
 800b760:	3320      	adds	r3, #32
 800b762:	2204      	movs	r2, #4
 800b764:	701a      	strb	r2, [r3, #0]
 800b766:	e024      	b.n	800b7b2 <HCSR04_Init+0x2ee>
 800b768:	08014d44 	.word	0x08014d44
 800b76c:	40020000 	.word	0x40020000
 800b770:	40023800 	.word	0x40023800
 800b774:	40020400 	.word	0x40020400
 800b778:	40020800 	.word	0x40020800
 800b77c:	40020c00 	.word	0x40020c00
 800b780:	40021000 	.word	0x40021000
 800b784:	20003140 	.word	0x20003140
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 800b788:	79fa      	ldrb	r2, [r7, #7]
 800b78a:	4941      	ldr	r1, [pc, #260]	@ (800b890 <HCSR04_Init+0x3cc>)
 800b78c:	4613      	mov	r3, r2
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	4413      	add	r3, r2
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	440b      	add	r3, r1
 800b796:	330c      	adds	r3, #12
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b0c      	cmp	r3, #12
 800b79c:	d109      	bne.n	800b7b2 <HCSR04_Init+0x2ee>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 800b79e:	79fa      	ldrb	r2, [r7, #7]
 800b7a0:	493c      	ldr	r1, [pc, #240]	@ (800b894 <HCSR04_Init+0x3d0>)
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	00db      	lsls	r3, r3, #3
 800b7a6:	4413      	add	r3, r2
 800b7a8:	009b      	lsls	r3, r3, #2
 800b7aa:	440b      	add	r3, r1
 800b7ac:	3320      	adds	r3, #32
 800b7ae:	2208      	movs	r2, #8
 800b7b0:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 800b7b2:	79fa      	ldrb	r2, [r7, #7]
 800b7b4:	4936      	ldr	r1, [pc, #216]	@ (800b890 <HCSR04_Init+0x3cc>)
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	4413      	add	r3, r2
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	440b      	add	r3, r1
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 800b7c8:	79fa      	ldrb	r2, [r7, #7]
 800b7ca:	4932      	ldr	r1, [pc, #200]	@ (800b894 <HCSR04_Init+0x3d0>)
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	00db      	lsls	r3, r3, #3
 800b7d0:	4413      	add	r3, r2
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	440b      	add	r3, r1
 800b7d6:	3304      	adds	r3, #4
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 800b7e4:	79fa      	ldrb	r2, [r7, #7]
 800b7e6:	492b      	ldr	r1, [pc, #172]	@ (800b894 <HCSR04_Init+0x3d0>)
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	00db      	lsls	r3, r3, #3
 800b7ec:	4413      	add	r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	440b      	add	r3, r1
 800b7f2:	3308      	adds	r3, #8
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	611a      	str	r2, [r3, #16]
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	2280      	movs	r2, #128	@ 0x80
 800b804:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(TMR_Handle);
 800b806:	6838      	ldr	r0, [r7, #0]
 800b808:	f7fb fd50 	bl	80072ac <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b80c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b810:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 800b812:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b816:	4619      	mov	r1, r3
 800b818:	6838      	ldr	r0, [r7, #0]
 800b81a:	f7fc fcc1 	bl	80081a0 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(TMR_Handle);
 800b81e:	6838      	ldr	r0, [r7, #0]
 800b820:	f7fc f8ee 	bl	8007a00 <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b824:	2300      	movs	r3, #0
 800b826:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b828:	2300      	movs	r3, #0
 800b82a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 800b82c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b830:	4619      	mov	r1, r3
 800b832:	6838      	ldr	r0, [r7, #0]
 800b834:	f7fd fafa 	bl	8008e2c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800b838:	2300      	movs	r3, #0
 800b83a:	61fb      	str	r3, [r7, #28]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800b83c:	2301      	movs	r3, #1
 800b83e:	623b      	str	r3, [r7, #32]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800b840:	2300      	movs	r3, #0
 800b842:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigIC.ICFilter = 0;
 800b844:	2300      	movs	r3, #0
 800b846:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 800b848:	79fa      	ldrb	r2, [r7, #7]
 800b84a:	4911      	ldr	r1, [pc, #68]	@ (800b890 <HCSR04_Init+0x3cc>)
 800b84c:	4613      	mov	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	4413      	add	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	440b      	add	r3, r1
 800b856:	330c      	adds	r3, #12
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	f107 031c 	add.w	r3, r7, #28
 800b85e:	4619      	mov	r1, r3
 800b860:	6838      	ldr	r0, [r7, #0]
 800b862:	f7fc fb3f 	bl	8007ee4 <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(TMR_Handle);
 800b866:	6838      	ldr	r0, [r7, #0]
 800b868:	f7fb fd70 	bl	800734c <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 800b86c:	79fa      	ldrb	r2, [r7, #7]
 800b86e:	4908      	ldr	r1, [pc, #32]	@ (800b890 <HCSR04_Init+0x3cc>)
 800b870:	4613      	mov	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4413      	add	r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	440b      	add	r3, r1
 800b87a:	330c      	adds	r3, #12
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4619      	mov	r1, r3
 800b880:	6838      	ldr	r0, [r7, #0]
 800b882:	f7fc f917 	bl	8007ab4 <HAL_TIM_IC_Start_IT>
}
 800b886:	bf00      	nop
 800b888:	3758      	adds	r7, #88	@ 0x58
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	08014d44 	.word	0x08014d44
 800b894:	20003140 	.word	0x20003140

0800b898 <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++)
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	73fb      	strb	r3, [r7, #15]
 800b8a8:	e023      	b.n	800b8f2 <HCSR04_TMR_OVF_ISR+0x5a>
	{
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6819      	ldr	r1, [r3, #0]
 800b8ae:	7bfa      	ldrb	r2, [r7, #15]
 800b8b0:	4815      	ldr	r0, [pc, #84]	@ (800b908 <HCSR04_TMR_OVF_ISR+0x70>)
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	009b      	lsls	r3, r3, #2
 800b8b6:	4413      	add	r3, r2
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	4403      	add	r3, r0
 800b8bc:	3308      	adds	r3, #8
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4299      	cmp	r1, r3
 800b8c2:	d113      	bne.n	800b8ec <HCSR04_TMR_OVF_ISR+0x54>
		{
			gs_HCSR04_info[i].TMR_OVC++;
 800b8c4:	7bfa      	ldrb	r2, [r7, #15]
 800b8c6:	4911      	ldr	r1, [pc, #68]	@ (800b90c <HCSR04_TMR_OVF_ISR+0x74>)
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	00db      	lsls	r3, r3, #3
 800b8cc:	4413      	add	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	440b      	add	r3, r1
 800b8d2:	3302      	adds	r3, #2
 800b8d4:	881b      	ldrh	r3, [r3, #0]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	b298      	uxth	r0, r3
 800b8da:	490c      	ldr	r1, [pc, #48]	@ (800b90c <HCSR04_TMR_OVF_ISR+0x74>)
 800b8dc:	4613      	mov	r3, r2
 800b8de:	00db      	lsls	r3, r3, #3
 800b8e0:	4413      	add	r3, r2
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	440b      	add	r3, r1
 800b8e6:	3302      	adds	r3, #2
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++)
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	73fb      	strb	r3, [r7, #15]
 800b8f2:	7bfb      	ldrb	r3, [r7, #15]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d0d8      	beq.n	800b8aa <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 800b8f8:	bf00      	nop
 800b8fa:	bf00      	nop
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	08014d44 	.word	0x08014d44
 800b90c:	20003140 	.word	0x20003140

0800b910 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim)
{
 800b910:	b5b0      	push	{r4, r5, r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 800b918:	2300      	movs	r3, #0
 800b91a:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 800b91c:	2300      	movs	r3, #0
 800b91e:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++)
 800b920:	2300      	movs	r3, #0
 800b922:	73fb      	strb	r3, [r7, #15]
 800b924:	e22a      	b.n	800bd7c <HCSR04_TMR_IC_ISR+0x46c>
	{
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance) && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH))
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6819      	ldr	r1, [r3, #0]
 800b92a:	7bfa      	ldrb	r2, [r7, #15]
 800b92c:	486b      	ldr	r0, [pc, #428]	@ (800badc <HCSR04_TMR_IC_ISR+0x1cc>)
 800b92e:	4613      	mov	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4413      	add	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4403      	add	r3, r0
 800b938:	3308      	adds	r3, #8
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4299      	cmp	r1, r3
 800b93e:	f040 821a 	bne.w	800bd76 <HCSR04_TMR_IC_ISR+0x466>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	7f19      	ldrb	r1, [r3, #28]
 800b946:	7bfa      	ldrb	r2, [r7, #15]
 800b948:	4865      	ldr	r0, [pc, #404]	@ (800bae0 <HCSR04_TMR_IC_ISR+0x1d0>)
 800b94a:	4613      	mov	r3, r2
 800b94c:	00db      	lsls	r3, r3, #3
 800b94e:	4413      	add	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	4403      	add	r3, r0
 800b954:	3320      	adds	r3, #32
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	4299      	cmp	r1, r3
 800b95a:	f040 820c 	bne.w	800bd76 <HCSR04_TMR_IC_ISR+0x466>
		{
			if (gs_HCSR04_info[i].EDGE_STATE == 0)
 800b95e:	7bfa      	ldrb	r2, [r7, #15]
 800b960:	495f      	ldr	r1, [pc, #380]	@ (800bae0 <HCSR04_TMR_IC_ISR+0x1d0>)
 800b962:	4613      	mov	r3, r2
 800b964:	00db      	lsls	r3, r3, #3
 800b966:	4413      	add	r3, r2
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	440b      	add	r3, r1
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f040 80b8 	bne.w	800bae4 <HCSR04_TMR_IC_ISR+0x1d4>
			{
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 800b974:	7bfa      	ldrb	r2, [r7, #15]
 800b976:	4959      	ldr	r1, [pc, #356]	@ (800badc <HCSR04_TMR_IC_ISR+0x1cc>)
 800b978:	4613      	mov	r3, r2
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	4413      	add	r3, r2
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	440b      	add	r3, r1
 800b982:	330c      	adds	r3, #12
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	7bfc      	ldrb	r4, [r7, #15]
 800b988:	4619      	mov	r1, r3
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f7fc fcd0 	bl	8008330 <HAL_TIM_ReadCapturedValue>
 800b990:	4602      	mov	r2, r0
 800b992:	4953      	ldr	r1, [pc, #332]	@ (800bae0 <HCSR04_TMR_IC_ISR+0x1d0>)
 800b994:	4623      	mov	r3, r4
 800b996:	00db      	lsls	r3, r3, #3
 800b998:	4423      	add	r3, r4
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	440b      	add	r3, r1
 800b99e:	330c      	adds	r3, #12
 800b9a0:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 800b9a2:	7bfa      	ldrb	r2, [r7, #15]
 800b9a4:	494e      	ldr	r1, [pc, #312]	@ (800bae0 <HCSR04_TMR_IC_ISR+0x1d0>)
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	00db      	lsls	r3, r3, #3
 800b9aa:	4413      	add	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	440b      	add	r3, r1
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 800b9b4:	7bfa      	ldrb	r2, [r7, #15]
 800b9b6:	4949      	ldr	r1, [pc, #292]	@ (800badc <HCSR04_TMR_IC_ISR+0x1cc>)
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	4413      	add	r3, r2
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	440b      	add	r3, r1
 800b9c2:	330c      	adds	r3, #12
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d108      	bne.n	800b9dc <HCSR04_TMR_IC_ISR+0xcc>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	6a1a      	ldr	r2, [r3, #32]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f022 020a 	bic.w	r2, r2, #10
 800b9d8:	621a      	str	r2, [r3, #32]
 800b9da:	e02f      	b.n	800ba3c <HCSR04_TMR_IC_ISR+0x12c>
 800b9dc:	7bfa      	ldrb	r2, [r7, #15]
 800b9de:	493f      	ldr	r1, [pc, #252]	@ (800badc <HCSR04_TMR_IC_ISR+0x1cc>)
 800b9e0:	4613      	mov	r3, r2
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	4413      	add	r3, r2
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	440b      	add	r3, r1
 800b9ea:	330c      	adds	r3, #12
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b04      	cmp	r3, #4
 800b9f0:	d108      	bne.n	800ba04 <HCSR04_TMR_IC_ISR+0xf4>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	6a1b      	ldr	r3, [r3, #32]
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	6812      	ldr	r2, [r2, #0]
 800b9fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ba00:	6213      	str	r3, [r2, #32]
 800ba02:	e01b      	b.n	800ba3c <HCSR04_TMR_IC_ISR+0x12c>
 800ba04:	7bfa      	ldrb	r2, [r7, #15]
 800ba06:	4935      	ldr	r1, [pc, #212]	@ (800badc <HCSR04_TMR_IC_ISR+0x1cc>)
 800ba08:	4613      	mov	r3, r2
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	4413      	add	r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	440b      	add	r3, r1
 800ba12:	330c      	adds	r3, #12
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2b08      	cmp	r3, #8
 800ba18:	d108      	bne.n	800ba2c <HCSR04_TMR_IC_ISR+0x11c>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	6a1b      	ldr	r3, [r3, #32]
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	6812      	ldr	r2, [r2, #0]
 800ba24:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800ba28:	6213      	str	r3, [r2, #32]
 800ba2a:	e007      	b.n	800ba3c <HCSR04_TMR_IC_ISR+0x12c>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	6a1b      	ldr	r3, [r3, #32]
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	6812      	ldr	r2, [r2, #0]
 800ba36:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800ba3a:	6213      	str	r3, [r2, #32]
 800ba3c:	7bfa      	ldrb	r2, [r7, #15]
 800ba3e:	4927      	ldr	r1, [pc, #156]	@ (800badc <HCSR04_TMR_IC_ISR+0x1cc>)
 800ba40:	4613      	mov	r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4413      	add	r3, r2
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	440b      	add	r3, r1
 800ba4a:	330c      	adds	r3, #12
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d108      	bne.n	800ba64 <HCSR04_TMR_IC_ISR+0x154>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	6a1a      	ldr	r2, [r3, #32]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f042 0202 	orr.w	r2, r2, #2
 800ba60:	621a      	str	r2, [r3, #32]
 800ba62:	e02f      	b.n	800bac4 <HCSR04_TMR_IC_ISR+0x1b4>
 800ba64:	7bfa      	ldrb	r2, [r7, #15]
 800ba66:	491d      	ldr	r1, [pc, #116]	@ (800badc <HCSR04_TMR_IC_ISR+0x1cc>)
 800ba68:	4613      	mov	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4413      	add	r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	440b      	add	r3, r1
 800ba72:	330c      	adds	r3, #12
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2b04      	cmp	r3, #4
 800ba78:	d108      	bne.n	800ba8c <HCSR04_TMR_IC_ISR+0x17c>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	6a1b      	ldr	r3, [r3, #32]
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	6812      	ldr	r2, [r2, #0]
 800ba84:	f043 0320 	orr.w	r3, r3, #32
 800ba88:	6213      	str	r3, [r2, #32]
 800ba8a:	e01b      	b.n	800bac4 <HCSR04_TMR_IC_ISR+0x1b4>
 800ba8c:	7bfa      	ldrb	r2, [r7, #15]
 800ba8e:	4913      	ldr	r1, [pc, #76]	@ (800badc <HCSR04_TMR_IC_ISR+0x1cc>)
 800ba90:	4613      	mov	r3, r2
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	4413      	add	r3, r2
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	440b      	add	r3, r1
 800ba9a:	330c      	adds	r3, #12
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2b08      	cmp	r3, #8
 800baa0:	d108      	bne.n	800bab4 <HCSR04_TMR_IC_ISR+0x1a4>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	6a1b      	ldr	r3, [r3, #32]
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	6812      	ldr	r2, [r2, #0]
 800baac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bab0:	6213      	str	r3, [r2, #32]
 800bab2:	e007      	b.n	800bac4 <HCSR04_TMR_IC_ISR+0x1b4>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	6a1b      	ldr	r3, [r3, #32]
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	6812      	ldr	r2, [r2, #0]
 800babe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800bac2:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 800bac4:	7bfa      	ldrb	r2, [r7, #15]
 800bac6:	4906      	ldr	r1, [pc, #24]	@ (800bae0 <HCSR04_TMR_IC_ISR+0x1d0>)
 800bac8:	4613      	mov	r3, r2
 800baca:	00db      	lsls	r3, r3, #3
 800bacc:	4413      	add	r3, r2
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	440b      	add	r3, r1
 800bad2:	3302      	adds	r3, #2
 800bad4:	2200      	movs	r2, #0
 800bad6:	801a      	strh	r2, [r3, #0]
 800bad8:	e14d      	b.n	800bd76 <HCSR04_TMR_IC_ISR+0x466>
 800bada:	bf00      	nop
 800badc:	08014d44 	.word	0x08014d44
 800bae0:	20003140 	.word	0x20003140
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1)
 800bae4:	7bfa      	ldrb	r2, [r7, #15]
 800bae6:	49ac      	ldr	r1, [pc, #688]	@ (800bd98 <HCSR04_TMR_IC_ISR+0x488>)
 800bae8:	4613      	mov	r3, r2
 800baea:	00db      	lsls	r3, r3, #3
 800baec:	4413      	add	r3, r2
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	440b      	add	r3, r1
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	f040 813e 	bne.w	800bd76 <HCSR04_TMR_IC_ISR+0x466>
			{
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 800bafa:	7bfa      	ldrb	r2, [r7, #15]
 800bafc:	49a7      	ldr	r1, [pc, #668]	@ (800bd9c <HCSR04_TMR_IC_ISR+0x48c>)
 800bafe:	4613      	mov	r3, r2
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	4413      	add	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	440b      	add	r3, r1
 800bb08:	3308      	adds	r3, #8
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb0e:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 800bb10:	7bfa      	ldrb	r2, [r7, #15]
 800bb12:	49a2      	ldr	r1, [pc, #648]	@ (800bd9c <HCSR04_TMR_IC_ISR+0x48c>)
 800bb14:	4613      	mov	r3, r2
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	4413      	add	r3, r2
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	440b      	add	r3, r1
 800bb1e:	3308      	adds	r3, #8
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	7bfa      	ldrb	r2, [r7, #15]
 800bb24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800bb26:	489c      	ldr	r0, [pc, #624]	@ (800bd98 <HCSR04_TMR_IC_ISR+0x488>)
 800bb28:	4613      	mov	r3, r2
 800bb2a:	00db      	lsls	r3, r3, #3
 800bb2c:	4413      	add	r3, r2
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	4403      	add	r3, r0
 800bb32:	3308      	adds	r3, #8
 800bb34:	6019      	str	r1, [r3, #0]
				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 800bb36:	7bfa      	ldrb	r2, [r7, #15]
 800bb38:	4998      	ldr	r1, [pc, #608]	@ (800bd9c <HCSR04_TMR_IC_ISR+0x48c>)
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	4413      	add	r3, r2
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	440b      	add	r3, r1
 800bb44:	330c      	adds	r3, #12
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	7bfc      	ldrb	r4, [r7, #15]
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7fc fbef 	bl	8008330 <HAL_TIM_ReadCapturedValue>
 800bb52:	4602      	mov	r2, r0
 800bb54:	4990      	ldr	r1, [pc, #576]	@ (800bd98 <HCSR04_TMR_IC_ISR+0x488>)
 800bb56:	4623      	mov	r3, r4
 800bb58:	00db      	lsls	r3, r3, #3
 800bb5a:	4423      	add	r3, r4
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	440b      	add	r3, r1
 800bb60:	3310      	adds	r3, #16
 800bb62:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
 800bb64:	7bfa      	ldrb	r2, [r7, #15]
 800bb66:	498c      	ldr	r1, [pc, #560]	@ (800bd98 <HCSR04_TMR_IC_ISR+0x488>)
 800bb68:	4613      	mov	r3, r2
 800bb6a:	00db      	lsls	r3, r3, #3
 800bb6c:	4413      	add	r3, r2
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	440b      	add	r3, r1
 800bb72:	3310      	adds	r3, #16
 800bb74:	6819      	ldr	r1, [r3, #0]
 800bb76:	7bfa      	ldrb	r2, [r7, #15]
 800bb78:	4887      	ldr	r0, [pc, #540]	@ (800bd98 <HCSR04_TMR_IC_ISR+0x488>)
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	00db      	lsls	r3, r3, #3
 800bb7e:	4413      	add	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	4403      	add	r3, r0
 800bb84:	3302      	adds	r3, #2
 800bb86:	881b      	ldrh	r3, [r3, #0]
 800bb88:	461c      	mov	r4, r3
 800bb8a:	7bfa      	ldrb	r2, [r7, #15]
 800bb8c:	4882      	ldr	r0, [pc, #520]	@ (800bd98 <HCSR04_TMR_IC_ISR+0x488>)
 800bb8e:	4613      	mov	r3, r2
 800bb90:	00db      	lsls	r3, r3, #3
 800bb92:	4413      	add	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	4403      	add	r3, r0
 800bb98:	3308      	adds	r3, #8
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	fb04 f303 	mul.w	r3, r4, r3
 800bba2:	7bfa      	ldrb	r2, [r7, #15]
 800bba4:	4419      	add	r1, r3
 800bba6:	487c      	ldr	r0, [pc, #496]	@ (800bd98 <HCSR04_TMR_IC_ISR+0x488>)
 800bba8:	4613      	mov	r3, r2
 800bbaa:	00db      	lsls	r3, r3, #3
 800bbac:	4413      	add	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4403      	add	r3, r0
 800bbb2:	3310      	adds	r3, #16
 800bbb4:	6019      	str	r1, [r3, #0]
				gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 800bbb6:	7bfa      	ldrb	r2, [r7, #15]
 800bbb8:	4977      	ldr	r1, [pc, #476]	@ (800bd98 <HCSR04_TMR_IC_ISR+0x488>)
 800bbba:	4613      	mov	r3, r2
 800bbbc:	00db      	lsls	r3, r3, #3
 800bbbe:	4413      	add	r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	440b      	add	r3, r1
 800bbc4:	3310      	adds	r3, #16
 800bbc6:	6819      	ldr	r1, [r3, #0]
 800bbc8:	7bfa      	ldrb	r2, [r7, #15]
 800bbca:	4873      	ldr	r0, [pc, #460]	@ (800bd98 <HCSR04_TMR_IC_ISR+0x488>)
 800bbcc:	4613      	mov	r3, r2
 800bbce:	00db      	lsls	r3, r3, #3
 800bbd0:	4413      	add	r3, r2
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	4403      	add	r3, r0
 800bbd6:	330c      	adds	r3, #12
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	7bfa      	ldrb	r2, [r7, #15]
 800bbdc:	1ac9      	subs	r1, r1, r3
 800bbde:	486e      	ldr	r0, [pc, #440]	@ (800bd98 <HCSR04_TMR_IC_ISR+0x488>)
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	00db      	lsls	r3, r3, #3
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	4403      	add	r3, r0
 800bbea:	3314      	adds	r3, #20
 800bbec:	6019      	str	r1, [r3, #0]
				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 800bbee:	7bfa      	ldrb	r2, [r7, #15]
 800bbf0:	4969      	ldr	r1, [pc, #420]	@ (800bd98 <HCSR04_TMR_IC_ISR+0x488>)
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	00db      	lsls	r3, r3, #3
 800bbf6:	4413      	add	r3, r2
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	440b      	add	r3, r1
 800bbfc:	3314      	adds	r3, #20
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7f4 fc7f 	bl	8000504 <__aeabi_ui2d>
 800bc06:	a362      	add	r3, pc, #392	@ (adr r3, 800bd90 <HCSR04_TMR_IC_ISR+0x480>)
 800bc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0c:	f7f4 fcf4 	bl	80005f8 <__aeabi_dmul>
 800bc10:	4602      	mov	r2, r0
 800bc12:	460b      	mov	r3, r1
 800bc14:	4614      	mov	r4, r2
 800bc16:	461d      	mov	r5, r3
 800bc18:	7bfa      	ldrb	r2, [r7, #15]
 800bc1a:	4960      	ldr	r1, [pc, #384]	@ (800bd9c <HCSR04_TMR_IC_ISR+0x48c>)
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4413      	add	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	440b      	add	r3, r1
 800bc26:	3310      	adds	r3, #16
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7f4 fc66 	bl	8000504 <__aeabi_ui2d>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	4629      	mov	r1, r5
 800bc40:	f7f4 fe04 	bl	800084c <__aeabi_ddiv>
 800bc44:	4602      	mov	r2, r0
 800bc46:	460b      	mov	r3, r1
 800bc48:	7bfc      	ldrb	r4, [r7, #15]
 800bc4a:	4610      	mov	r0, r2
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	f7f4 ffab 	bl	8000ba8 <__aeabi_d2f>
 800bc52:	4602      	mov	r2, r0
 800bc54:	4950      	ldr	r1, [pc, #320]	@ (800bd98 <HCSR04_TMR_IC_ISR+0x488>)
 800bc56:	4623      	mov	r3, r4
 800bc58:	00db      	lsls	r3, r3, #3
 800bc5a:	4423      	add	r3, r4
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	440b      	add	r3, r1
 800bc60:	3318      	adds	r3, #24
 800bc62:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 800bc64:	7bfa      	ldrb	r2, [r7, #15]
 800bc66:	494c      	ldr	r1, [pc, #304]	@ (800bd98 <HCSR04_TMR_IC_ISR+0x488>)
 800bc68:	4613      	mov	r3, r2
 800bc6a:	00db      	lsls	r3, r3, #3
 800bc6c:	4413      	add	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	440b      	add	r3, r1
 800bc72:	2200      	movs	r2, #0
 800bc74:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 800bc76:	7bfa      	ldrb	r2, [r7, #15]
 800bc78:	4948      	ldr	r1, [pc, #288]	@ (800bd9c <HCSR04_TMR_IC_ISR+0x48c>)
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4413      	add	r3, r2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	440b      	add	r3, r1
 800bc84:	330c      	adds	r3, #12
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d108      	bne.n	800bc9e <HCSR04_TMR_IC_ISR+0x38e>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	6a1a      	ldr	r2, [r3, #32]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f022 020a 	bic.w	r2, r2, #10
 800bc9a:	621a      	str	r2, [r3, #32]
 800bc9c:	e02f      	b.n	800bcfe <HCSR04_TMR_IC_ISR+0x3ee>
 800bc9e:	7bfa      	ldrb	r2, [r7, #15]
 800bca0:	493e      	ldr	r1, [pc, #248]	@ (800bd9c <HCSR04_TMR_IC_ISR+0x48c>)
 800bca2:	4613      	mov	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4413      	add	r3, r2
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	440b      	add	r3, r1
 800bcac:	330c      	adds	r3, #12
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2b04      	cmp	r3, #4
 800bcb2:	d108      	bne.n	800bcc6 <HCSR04_TMR_IC_ISR+0x3b6>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	6a1b      	ldr	r3, [r3, #32]
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	6812      	ldr	r2, [r2, #0]
 800bcbe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bcc2:	6213      	str	r3, [r2, #32]
 800bcc4:	e01b      	b.n	800bcfe <HCSR04_TMR_IC_ISR+0x3ee>
 800bcc6:	7bfa      	ldrb	r2, [r7, #15]
 800bcc8:	4934      	ldr	r1, [pc, #208]	@ (800bd9c <HCSR04_TMR_IC_ISR+0x48c>)
 800bcca:	4613      	mov	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	440b      	add	r3, r1
 800bcd4:	330c      	adds	r3, #12
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2b08      	cmp	r3, #8
 800bcda:	d108      	bne.n	800bcee <HCSR04_TMR_IC_ISR+0x3de>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	6a1b      	ldr	r3, [r3, #32]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	6812      	ldr	r2, [r2, #0]
 800bce6:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800bcea:	6213      	str	r3, [r2, #32]
 800bcec:	e007      	b.n	800bcfe <HCSR04_TMR_IC_ISR+0x3ee>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	6a1b      	ldr	r3, [r3, #32]
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	6812      	ldr	r2, [r2, #0]
 800bcf8:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800bcfc:	6213      	str	r3, [r2, #32]
 800bcfe:	7bfa      	ldrb	r2, [r7, #15]
 800bd00:	4926      	ldr	r1, [pc, #152]	@ (800bd9c <HCSR04_TMR_IC_ISR+0x48c>)
 800bd02:	4613      	mov	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	4413      	add	r3, r2
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	440b      	add	r3, r1
 800bd0c:	330c      	adds	r3, #12
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d106      	bne.n	800bd22 <HCSR04_TMR_IC_ISR+0x412>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	6a12      	ldr	r2, [r2, #32]
 800bd1e:	621a      	str	r2, [r3, #32]
 800bd20:	e029      	b.n	800bd76 <HCSR04_TMR_IC_ISR+0x466>
 800bd22:	7bfa      	ldrb	r2, [r7, #15]
 800bd24:	491d      	ldr	r1, [pc, #116]	@ (800bd9c <HCSR04_TMR_IC_ISR+0x48c>)
 800bd26:	4613      	mov	r3, r2
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	4413      	add	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	440b      	add	r3, r1
 800bd30:	330c      	adds	r3, #12
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	2b04      	cmp	r3, #4
 800bd36:	d106      	bne.n	800bd46 <HCSR04_TMR_IC_ISR+0x436>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	6812      	ldr	r2, [r2, #0]
 800bd40:	6a1b      	ldr	r3, [r3, #32]
 800bd42:	6213      	str	r3, [r2, #32]
 800bd44:	e017      	b.n	800bd76 <HCSR04_TMR_IC_ISR+0x466>
 800bd46:	7bfa      	ldrb	r2, [r7, #15]
 800bd48:	4914      	ldr	r1, [pc, #80]	@ (800bd9c <HCSR04_TMR_IC_ISR+0x48c>)
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	4413      	add	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	440b      	add	r3, r1
 800bd54:	330c      	adds	r3, #12
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2b08      	cmp	r3, #8
 800bd5a:	d106      	bne.n	800bd6a <HCSR04_TMR_IC_ISR+0x45a>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	6812      	ldr	r2, [r2, #0]
 800bd64:	6a1b      	ldr	r3, [r3, #32]
 800bd66:	6213      	str	r3, [r2, #32]
 800bd68:	e005      	b.n	800bd76 <HCSR04_TMR_IC_ISR+0x466>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	6812      	ldr	r2, [r2, #0]
 800bd72:	6a1b      	ldr	r3, [r3, #32]
 800bd74:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++)
 800bd76:	7bfb      	ldrb	r3, [r7, #15]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	73fb      	strb	r3, [r7, #15]
 800bd7c:	7bfb      	ldrb	r3, [r7, #15]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f43f add1 	beq.w	800b926 <HCSR04_TMR_IC_ISR+0x16>
			}
		}
	}
}
 800bd84:	bf00      	nop
 800bd86:	bf00      	nop
 800bd88:	3710      	adds	r7, #16
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bdb0      	pop	{r4, r5, r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	b020c49c 	.word	0xb020c49c
 800bd94:	3f916872 	.word	0x3f916872
 800bd98:	20003140 	.word	0x20003140
 800bd9c:	08014d44 	.word	0x08014d44

0800bda0 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	4603      	mov	r3, r0
 800bda8:	71fb      	strb	r3, [r7, #7]
	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 800bdaa:	79fa      	ldrb	r2, [r7, #7]
 800bdac:	4908      	ldr	r1, [pc, #32]	@ (800bdd0 <HCSR04_Read+0x30>)
 800bdae:	4613      	mov	r3, r2
 800bdb0:	00db      	lsls	r3, r3, #3
 800bdb2:	4413      	add	r3, r2
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	440b      	add	r3, r1
 800bdb8:	3318      	adds	r3, #24
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	ee07 3a90 	vmov	s15, r3
}
 800bdc0:	eeb0 0a67 	vmov.f32	s0, s15
 800bdc4:	370c      	adds	r7, #12
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	20003140 	.word	0x20003140

0800bdd4 <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	4603      	mov	r3, r0
 800bddc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 800bdde:	79fa      	ldrb	r2, [r7, #7]
 800bde0:	4917      	ldr	r1, [pc, #92]	@ (800be40 <HCSR04_Trigger+0x6c>)
 800bde2:	4613      	mov	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	4413      	add	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	440b      	add	r3, r1
 800bdec:	6818      	ldr	r0, [r3, #0]
 800bdee:	79fa      	ldrb	r2, [r7, #7]
 800bdf0:	4913      	ldr	r1, [pc, #76]	@ (800be40 <HCSR04_Trigger+0x6c>)
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	4413      	add	r3, r2
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	440b      	add	r3, r1
 800bdfc:	3304      	adds	r3, #4
 800bdfe:	881b      	ldrh	r3, [r3, #0]
 800be00:	2201      	movs	r2, #1
 800be02:	4619      	mov	r1, r3
 800be04:	f7f8 fc34 	bl	8004670 <HAL_GPIO_WritePin>
	osDelay(2);
 800be08:	2002      	movs	r0, #2
 800be0a:	f002 fcbf 	bl	800e78c <osDelay>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 800be0e:	79fa      	ldrb	r2, [r7, #7]
 800be10:	490b      	ldr	r1, [pc, #44]	@ (800be40 <HCSR04_Trigger+0x6c>)
 800be12:	4613      	mov	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	4413      	add	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	440b      	add	r3, r1
 800be1c:	6818      	ldr	r0, [r3, #0]
 800be1e:	79fa      	ldrb	r2, [r7, #7]
 800be20:	4907      	ldr	r1, [pc, #28]	@ (800be40 <HCSR04_Trigger+0x6c>)
 800be22:	4613      	mov	r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	4413      	add	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	440b      	add	r3, r1
 800be2c:	3304      	adds	r3, #4
 800be2e:	881b      	ldrh	r3, [r3, #0]
 800be30:	2200      	movs	r2, #0
 800be32:	4619      	mov	r1, r3
 800be34:	f7f8 fc1c 	bl	8004670 <HAL_GPIO_WritePin>
}
 800be38:	bf00      	nop
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	08014d44 	.word	0x08014d44

0800be44 <MQ135_Init>:
volatile uint32_t mq135_avg = 0;
volatile uint8_t  mq135_ready = 0;


void MQ135_Init(uint8_t mq123_Instance)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	4603      	mov	r3, r0
 800be4c:	71fb      	strb	r3, [r7, #7]

	HAL_ADC_Start_DMA(mq135_CfgParam[mq123_Instance].ADC_Handle, mq135_buffer, MQ135_SAMPLES);
 800be4e:	79fb      	ldrb	r3, [r7, #7]
 800be50:	4a06      	ldr	r2, [pc, #24]	@ (800be6c <MQ135_Init+0x28>)
 800be52:	00db      	lsls	r3, r3, #3
 800be54:	4413      	add	r3, r2
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	2210      	movs	r2, #16
 800be5a:	4905      	ldr	r1, [pc, #20]	@ (800be70 <MQ135_Init+0x2c>)
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7f7 f917 	bl	8003090 <HAL_ADC_Start_DMA>
}
 800be62:	bf00      	nop
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	08014d58 	.word	0x08014d58
 800be70:	20003164 	.word	0x20003164

0800be74 <MQ135_StartMeasurement>:

void MQ135_StartMeasurement(uint8_t mq123_Instance)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	4603      	mov	r3, r0
 800be7c:	71fb      	strb	r3, [r7, #7]
//	DELAY_MS(1000);

    // Start a DMA transfer for MQ135_SAMPLES conversions
    HAL_ADC_Start_DMA(mq135_CfgParam[mq123_Instance].ADC_Handle, mq135_buffer, MQ135_SAMPLES);
 800be7e:	79fb      	ldrb	r3, [r7, #7]
 800be80:	4a06      	ldr	r2, [pc, #24]	@ (800be9c <MQ135_StartMeasurement+0x28>)
 800be82:	00db      	lsls	r3, r3, #3
 800be84:	4413      	add	r3, r2
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	2210      	movs	r2, #16
 800be8a:	4905      	ldr	r1, [pc, #20]	@ (800bea0 <MQ135_StartMeasurement+0x2c>)
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7f7 f8ff 	bl	8003090 <HAL_ADC_Start_DMA>
}
 800be92:	bf00      	nop
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	08014d58 	.word	0x08014d58
 800bea0:	20003164 	.word	0x20003164

0800bea4 <MQ135_AverageRaw>:


void MQ135_AverageRaw()
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 800beaa:	2300      	movs	r3, #0
 800beac:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MQ135_SAMPLES; i++)
 800beae:	2300      	movs	r3, #0
 800beb0:	603b      	str	r3, [r7, #0]
 800beb2:	e009      	b.n	800bec8 <MQ135_AverageRaw+0x24>
	{
		sum += mq135_buffer[i];
 800beb4:	4a0c      	ldr	r2, [pc, #48]	@ (800bee8 <MQ135_AverageRaw+0x44>)
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	4413      	add	r3, r2
 800bec0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MQ135_SAMPLES; i++)
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	3301      	adds	r3, #1
 800bec6:	603b      	str	r3, [r7, #0]
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	2b0f      	cmp	r3, #15
 800becc:	ddf2      	ble.n	800beb4 <MQ135_AverageRaw+0x10>
	}
	mq135_avg = sum / MQ135_SAMPLES;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	091b      	lsrs	r3, r3, #4
 800bed2:	4a06      	ldr	r2, [pc, #24]	@ (800beec <MQ135_AverageRaw+0x48>)
 800bed4:	6013      	str	r3, [r2, #0]
	mq135_ready = 1;
 800bed6:	4b06      	ldr	r3, [pc, #24]	@ (800bef0 <MQ135_AverageRaw+0x4c>)
 800bed8:	2201      	movs	r2, #1
 800beda:	701a      	strb	r2, [r3, #0]

}
 800bedc:	bf00      	nop
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr
 800bee8:	20003164 	.word	0x20003164
 800beec:	200031a4 	.word	0x200031a4
 800bef0:	200031a8 	.word	0x200031a8

0800bef4 <MQ135_GetPPM>:


float MQ135_GetPPM(void)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0

	if (!mq135_ready) return 0;
 800befa:	4b11      	ldr	r3, [pc, #68]	@ (800bf40 <MQ135_GetPPM+0x4c>)
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d102      	bne.n	800bf0a <MQ135_GetPPM+0x16>
 800bf04:	f04f 0300 	mov.w	r3, #0
 800bf08:	e010      	b.n	800bf2c <MQ135_GetPPM+0x38>


	 float index = ((float)mq135_avg * MQ135_VOLTAGE_REF) / (float)MQ135_ADC_RESOLUTION;
 800bf0a:	4b0e      	ldr	r3, [pc, #56]	@ (800bf44 <MQ135_GetPPM+0x50>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	ee07 3a90 	vmov	s15, r3
 800bf12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf16:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800bf48 <MQ135_GetPPM+0x54>
 800bf1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bf1e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800bf4c <MQ135_GetPPM+0x58>
 800bf22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bf26:	edc7 7a01 	vstr	s15, [r7, #4]

	    return index;
 800bf2a:	687b      	ldr	r3, [r7, #4]
}
 800bf2c:	ee07 3a90 	vmov	s15, r3
 800bf30:	eeb0 0a67 	vmov.f32	s0, s15
 800bf34:	370c      	adds	r7, #12
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop
 800bf40:	200031a8 	.word	0x200031a8
 800bf44:	200031a4 	.word	0x200031a4
 800bf48:	40533333 	.word	0x40533333
 800bf4c:	457ff000 	.word	0x457ff000

0800bf50 <MQ135_IsSmokeDetected>:

uint8_t MQ135_IsSmokeDetected(void)
{
 800bf50:	b480      	push	{r7}
 800bf52:	af00      	add	r7, sp, #0
    return (mq135_avg > MQ135_THRESHOLD) ? 1 : 0;
 800bf54:	4b06      	ldr	r3, [pc, #24]	@ (800bf70 <MQ135_IsSmokeDetected+0x20>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a06      	ldr	r2, [pc, #24]	@ (800bf74 <MQ135_IsSmokeDetected+0x24>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	bf8c      	ite	hi
 800bf5e:	2301      	movhi	r3, #1
 800bf60:	2300      	movls	r3, #0
 800bf62:	b2db      	uxtb	r3, r3
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	200031a4 	.word	0x200031a4
 800bf74:	ee6b2800 	.word	0xee6b2800

0800bf78 <ws2812B_SetColor>:
//Buffer
volatile uint16_t pwmData[LED_COUNT * BITS_PER_LED + RESET_SLOTS];


void ws2812B_SetColor(uint8_t r, uint8_t g, uint8_t b)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	4603      	mov	r3, r0
 800bf80:	71fb      	strb	r3, [r7, #7]
 800bf82:	460b      	mov	r3, r1
 800bf84:	71bb      	strb	r3, [r7, #6]
 800bf86:	4613      	mov	r3, r2
 800bf88:	717b      	strb	r3, [r7, #5]
	//	Fill all LEDs
	for (int led = 0; led < LED_COUNT; led++) {
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	60fb      	str	r3, [r7, #12]
 800bf8e:	e019      	b.n	800bfc4 <ws2812B_SetColor+0x4c>
	      colors[led*3 + 0] = r; // R
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	4613      	mov	r3, r2
 800bf94:	005b      	lsls	r3, r3, #1
 800bf96:	4413      	add	r3, r2
 800bf98:	490f      	ldr	r1, [pc, #60]	@ (800bfd8 <ws2812B_SetColor+0x60>)
 800bf9a:	79fa      	ldrb	r2, [r7, #7]
 800bf9c:	54ca      	strb	r2, [r1, r3]
	      colors[led*3 + 1] = g;   // G
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	005b      	lsls	r3, r3, #1
 800bfa4:	4413      	add	r3, r2
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	490b      	ldr	r1, [pc, #44]	@ (800bfd8 <ws2812B_SetColor+0x60>)
 800bfaa:	79ba      	ldrb	r2, [r7, #6]
 800bfac:	54ca      	strb	r2, [r1, r3]
	      colors[led*3 + 2] = b;   // B
 800bfae:	68fa      	ldr	r2, [r7, #12]
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	005b      	lsls	r3, r3, #1
 800bfb4:	4413      	add	r3, r2
 800bfb6:	3302      	adds	r3, #2
 800bfb8:	4907      	ldr	r1, [pc, #28]	@ (800bfd8 <ws2812B_SetColor+0x60>)
 800bfba:	797a      	ldrb	r2, [r7, #5]
 800bfbc:	54ca      	strb	r2, [r1, r3]
	for (int led = 0; led < LED_COUNT; led++) {
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	60fb      	str	r3, [r7, #12]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2b2f      	cmp	r3, #47	@ 0x2f
 800bfc8:	dde2      	ble.n	800bf90 <ws2812B_SetColor+0x18>
	}
}
 800bfca:	bf00      	nop
 800bfcc:	bf00      	nop
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr
 800bfd8:	200031ac 	.word	0x200031ac

0800bfdc <ws2812B_Show>:

void ws2812B_Show(TIM_HandleTypeDef *htim)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b086      	sub	sp, #24
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
	    // Calculate buffer size
//	    uint16_t buffer_size = LED_COUNT * BITS_PER_LED + RESET_SLOTS;
//	    uint16_t pwmData[buffer_size];

	    // Fill PWM buffer
	    for (uint16_t led = 0; led < LED_COUNT; led++)
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	82fb      	strh	r3, [r7, #22]
 800bfe8:	e03d      	b.n	800c066 <ws2812B_Show+0x8a>
	    {
	        uint32_t color = ((uint32_t)colors[led*3 + 1] << 16) |  // G
 800bfea:	8afa      	ldrh	r2, [r7, #22]
 800bfec:	4613      	mov	r3, r2
 800bfee:	005b      	lsls	r3, r3, #1
 800bff0:	4413      	add	r3, r2
 800bff2:	3301      	adds	r3, #1
 800bff4:	4a2b      	ldr	r2, [pc, #172]	@ (800c0a4 <ws2812B_Show+0xc8>)
 800bff6:	5cd3      	ldrb	r3, [r2, r3]
 800bff8:	0419      	lsls	r1, r3, #16
	                         ((uint32_t)colors[led*3 + 0] << 8)  |  // R
 800bffa:	8afa      	ldrh	r2, [r7, #22]
 800bffc:	4613      	mov	r3, r2
 800bffe:	005b      	lsls	r3, r3, #1
 800c000:	4413      	add	r3, r2
 800c002:	4a28      	ldr	r2, [pc, #160]	@ (800c0a4 <ws2812B_Show+0xc8>)
 800c004:	5cd3      	ldrb	r3, [r2, r3]
 800c006:	021b      	lsls	r3, r3, #8
	        uint32_t color = ((uint32_t)colors[led*3 + 1] << 16) |  // G
 800c008:	4319      	orrs	r1, r3
	                         ((uint32_t)colors[led*3 + 2]);         // B
 800c00a:	8afa      	ldrh	r2, [r7, #22]
 800c00c:	4613      	mov	r3, r2
 800c00e:	005b      	lsls	r3, r3, #1
 800c010:	4413      	add	r3, r2
 800c012:	3302      	adds	r3, #2
 800c014:	4a23      	ldr	r2, [pc, #140]	@ (800c0a4 <ws2812B_Show+0xc8>)
 800c016:	5cd3      	ldrb	r3, [r2, r3]
	        uint32_t color = ((uint32_t)colors[led*3 + 1] << 16) |  // G
 800c018:	430b      	orrs	r3, r1
 800c01a:	60fb      	str	r3, [r7, #12]

	        for (uint8_t bit = 0; bit < 24; bit++)
 800c01c:	2300      	movs	r3, #0
 800c01e:	757b      	strb	r3, [r7, #21]
 800c020:	e01b      	b.n	800c05a <ws2812B_Show+0x7e>
	        {
	            pwmData[led * BITS_PER_LED + bit] = (color & (1 << (23 - bit))) ? PWM1 : PWM0;
 800c022:	7d7b      	ldrb	r3, [r7, #21]
 800c024:	f1c3 0317 	rsb	r3, r3, #23
 800c028:	2201      	movs	r2, #1
 800c02a:	fa02 f303 	lsl.w	r3, r2, r3
 800c02e:	461a      	mov	r2, r3
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	4013      	ands	r3, r2
 800c034:	2b00      	cmp	r3, #0
 800c036:	d001      	beq.n	800c03c <ws2812B_Show+0x60>
 800c038:	2146      	movs	r1, #70	@ 0x46
 800c03a:	e000      	b.n	800c03e <ws2812B_Show+0x62>
 800c03c:	2123      	movs	r1, #35	@ 0x23
 800c03e:	8afa      	ldrh	r2, [r7, #22]
 800c040:	4613      	mov	r3, r2
 800c042:	005b      	lsls	r3, r3, #1
 800c044:	4413      	add	r3, r2
 800c046:	00db      	lsls	r3, r3, #3
 800c048:	461a      	mov	r2, r3
 800c04a:	7d7b      	ldrb	r3, [r7, #21]
 800c04c:	4413      	add	r3, r2
 800c04e:	4a16      	ldr	r2, [pc, #88]	@ (800c0a8 <ws2812B_Show+0xcc>)
 800c050:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	        for (uint8_t bit = 0; bit < 24; bit++)
 800c054:	7d7b      	ldrb	r3, [r7, #21]
 800c056:	3301      	adds	r3, #1
 800c058:	757b      	strb	r3, [r7, #21]
 800c05a:	7d7b      	ldrb	r3, [r7, #21]
 800c05c:	2b17      	cmp	r3, #23
 800c05e:	d9e0      	bls.n	800c022 <ws2812B_Show+0x46>
	    for (uint16_t led = 0; led < LED_COUNT; led++)
 800c060:	8afb      	ldrh	r3, [r7, #22]
 800c062:	3301      	adds	r3, #1
 800c064:	82fb      	strh	r3, [r7, #22]
 800c066:	8afb      	ldrh	r3, [r7, #22]
 800c068:	2b2f      	cmp	r3, #47	@ 0x2f
 800c06a:	d9be      	bls.n	800bfea <ws2812B_Show+0xe>
	        }
	    }

	    // Append reset slots
	    for (uint16_t i = 0; i < RESET_SLOTS; i++)
 800c06c:	2300      	movs	r3, #0
 800c06e:	827b      	strh	r3, [r7, #18]
 800c070:	e009      	b.n	800c086 <ws2812B_Show+0xaa>
	        pwmData[LED_COUNT * BITS_PER_LED + i] = 0;
 800c072:	8a7b      	ldrh	r3, [r7, #18]
 800c074:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800c078:	4a0b      	ldr	r2, [pc, #44]	@ (800c0a8 <ws2812B_Show+0xcc>)
 800c07a:	2100      	movs	r1, #0
 800c07c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    for (uint16_t i = 0; i < RESET_SLOTS; i++)
 800c080:	8a7b      	ldrh	r3, [r7, #18]
 800c082:	3301      	adds	r3, #1
 800c084:	827b      	strh	r3, [r7, #18]
 800c086:	8a7b      	ldrh	r3, [r7, #18]
 800c088:	2b31      	cmp	r3, #49	@ 0x31
 800c08a:	d9f2      	bls.n	800c072 <ws2812B_Show+0x96>

	    // Start PWM + DMA
	    HAL_TIM_PWM_Start_DMA(htim, TIM_CHANNEL_1, (uint32_t*)pwmData, BUFFER_SIZE);
 800c08c:	f240 43b2 	movw	r3, #1202	@ 0x4b2
 800c090:	4a05      	ldr	r2, [pc, #20]	@ (800c0a8 <ws2812B_Show+0xcc>)
 800c092:	2100      	movs	r1, #0
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f7fb fa19 	bl	80074cc <HAL_TIM_PWM_Start_DMA>
//	    osDelay(1);



}
 800c09a:	bf00      	nop
 800c09c:	3718      	adds	r7, #24
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	200031ac 	.word	0x200031ac
 800c0a8:	2000323c 	.word	0x2000323c

0800c0ac <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(uint8_t LCD_Instance, uint8_t command)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b086      	sub	sp, #24
 800c0b0:	af04      	add	r7, sp, #16
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	460a      	mov	r2, r1
 800c0b6:	71fb      	strb	r3, [r7, #7]
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(ssd1306_CfgParam[LCD_Instance].I2C_Handle, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800c0bc:	79fb      	ldrb	r3, [r7, #7]
 800c0be:	4a0a      	ldr	r2, [pc, #40]	@ (800c0e8 <ssd1306_WriteCommand+0x3c>)
 800c0c0:	00db      	lsls	r3, r3, #3
 800c0c2:	4413      	add	r3, r2
 800c0c4:	6858      	ldr	r0, [r3, #4]
 800c0c6:	230a      	movs	r3, #10
 800c0c8:	9302      	str	r3, [sp, #8]
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	9301      	str	r3, [sp, #4]
 800c0ce:	1dbb      	adds	r3, r7, #6
 800c0d0:	9300      	str	r3, [sp, #0]
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	2178      	movs	r1, #120	@ 0x78
 800c0d8:	f7f8 fc40 	bl	800495c <HAL_I2C_Mem_Write>
 800c0dc:	4603      	mov	r3, r0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	08016228 	.word	0x08016228

0800c0ec <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(uint8_t LCD_Instance)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	71fb      	strb	r3, [r7, #7]
    // Wait for the screen to boot
    osDelay(100);
 800c0f6:	2064      	movs	r0, #100	@ 0x64
 800c0f8:	f002 fb48 	bl	800e78c <osDelay>
    int status = 0;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(LCD_Instance, 0xAE);   // Display off
 800c100:	79fb      	ldrb	r3, [r7, #7]
 800c102:	21ae      	movs	r1, #174	@ 0xae
 800c104:	4618      	mov	r0, r3
 800c106:	f7ff ffd1 	bl	800c0ac <ssd1306_WriteCommand>
 800c10a:	4603      	mov	r3, r0
 800c10c:	461a      	mov	r2, r3
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	4413      	add	r3, r2
 800c112:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0x20);   // Set Memory Addressing Mode
 800c114:	79fb      	ldrb	r3, [r7, #7]
 800c116:	2120      	movs	r1, #32
 800c118:	4618      	mov	r0, r3
 800c11a:	f7ff ffc7 	bl	800c0ac <ssd1306_WriteCommand>
 800c11e:	4603      	mov	r3, r0
 800c120:	461a      	mov	r2, r3
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	4413      	add	r3, r2
 800c126:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800c128:	79fb      	ldrb	r3, [r7, #7]
 800c12a:	2110      	movs	r1, #16
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7ff ffbd 	bl	800c0ac <ssd1306_WriteCommand>
 800c132:	4603      	mov	r3, r0
 800c134:	461a      	mov	r2, r3
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	4413      	add	r3, r2
 800c13a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 800c13c:	79fb      	ldrb	r3, [r7, #7]
 800c13e:	21b0      	movs	r1, #176	@ 0xb0
 800c140:	4618      	mov	r0, r3
 800c142:	f7ff ffb3 	bl	800c0ac <ssd1306_WriteCommand>
 800c146:	4603      	mov	r3, r0
 800c148:	461a      	mov	r2, r3
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	4413      	add	r3, r2
 800c14e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0xC8);   // Set COM Output Scan Direction
 800c150:	79fb      	ldrb	r3, [r7, #7]
 800c152:	21c8      	movs	r1, #200	@ 0xc8
 800c154:	4618      	mov	r0, r3
 800c156:	f7ff ffa9 	bl	800c0ac <ssd1306_WriteCommand>
 800c15a:	4603      	mov	r3, r0
 800c15c:	461a      	mov	r2, r3
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	4413      	add	r3, r2
 800c162:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0x00);   // Set low column address
 800c164:	79fb      	ldrb	r3, [r7, #7]
 800c166:	2100      	movs	r1, #0
 800c168:	4618      	mov	r0, r3
 800c16a:	f7ff ff9f 	bl	800c0ac <ssd1306_WriteCommand>
 800c16e:	4603      	mov	r3, r0
 800c170:	461a      	mov	r2, r3
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	4413      	add	r3, r2
 800c176:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0x10);   // Set high column address
 800c178:	79fb      	ldrb	r3, [r7, #7]
 800c17a:	2110      	movs	r1, #16
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7ff ff95 	bl	800c0ac <ssd1306_WriteCommand>
 800c182:	4603      	mov	r3, r0
 800c184:	461a      	mov	r2, r3
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	4413      	add	r3, r2
 800c18a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0x40);   // Set start line address
 800c18c:	79fb      	ldrb	r3, [r7, #7]
 800c18e:	2140      	movs	r1, #64	@ 0x40
 800c190:	4618      	mov	r0, r3
 800c192:	f7ff ff8b 	bl	800c0ac <ssd1306_WriteCommand>
 800c196:	4603      	mov	r3, r0
 800c198:	461a      	mov	r2, r3
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	4413      	add	r3, r2
 800c19e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0x81);   // set contrast control register
 800c1a0:	79fb      	ldrb	r3, [r7, #7]
 800c1a2:	2181      	movs	r1, #129	@ 0x81
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7ff ff81 	bl	800c0ac <ssd1306_WriteCommand>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0xFF);
 800c1b4:	79fb      	ldrb	r3, [r7, #7]
 800c1b6:	21ff      	movs	r1, #255	@ 0xff
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7ff ff77 	bl	800c0ac <ssd1306_WriteCommand>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0xA1);   // Set segment re-map 0 to 127
 800c1c8:	79fb      	ldrb	r3, [r7, #7]
 800c1ca:	21a1      	movs	r1, #161	@ 0xa1
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7ff ff6d 	bl	800c0ac <ssd1306_WriteCommand>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	4413      	add	r3, r2
 800c1da:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0xA6);   // Set normal display
 800c1dc:	79fb      	ldrb	r3, [r7, #7]
 800c1de:	21a6      	movs	r1, #166	@ 0xa6
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7ff ff63 	bl	800c0ac <ssd1306_WriteCommand>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(LCD_Instance, 0xA8);   // Set multiplex ratio(1 to 64)
 800c1f0:	79fb      	ldrb	r3, [r7, #7]
 800c1f2:	21a8      	movs	r1, #168	@ 0xa8
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7ff ff59 	bl	800c0ac <ssd1306_WriteCommand>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	4413      	add	r3, r2
 800c202:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, SSD1306_HEIGHT - 1);
 800c204:	79fb      	ldrb	r3, [r7, #7]
 800c206:	213f      	movs	r1, #63	@ 0x3f
 800c208:	4618      	mov	r0, r3
 800c20a:	f7ff ff4f 	bl	800c0ac <ssd1306_WriteCommand>
 800c20e:	4603      	mov	r3, r0
 800c210:	461a      	mov	r2, r3
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	4413      	add	r3, r2
 800c216:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(LCD_Instance, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800c218:	79fb      	ldrb	r3, [r7, #7]
 800c21a:	21a4      	movs	r1, #164	@ 0xa4
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7ff ff45 	bl	800c0ac <ssd1306_WriteCommand>
 800c222:	4603      	mov	r3, r0
 800c224:	461a      	mov	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	4413      	add	r3, r2
 800c22a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0xD3);   // Set display offset
 800c22c:	79fb      	ldrb	r3, [r7, #7]
 800c22e:	21d3      	movs	r1, #211	@ 0xd3
 800c230:	4618      	mov	r0, r3
 800c232:	f7ff ff3b 	bl	800c0ac <ssd1306_WriteCommand>
 800c236:	4603      	mov	r3, r0
 800c238:	461a      	mov	r2, r3
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	4413      	add	r3, r2
 800c23e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0x00);   // No offset
 800c240:	79fb      	ldrb	r3, [r7, #7]
 800c242:	2100      	movs	r1, #0
 800c244:	4618      	mov	r0, r3
 800c246:	f7ff ff31 	bl	800c0ac <ssd1306_WriteCommand>
 800c24a:	4603      	mov	r3, r0
 800c24c:	461a      	mov	r2, r3
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	4413      	add	r3, r2
 800c252:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0xD5);   // Set display clock divide ratio/oscillator frequency
 800c254:	79fb      	ldrb	r3, [r7, #7]
 800c256:	21d5      	movs	r1, #213	@ 0xd5
 800c258:	4618      	mov	r0, r3
 800c25a:	f7ff ff27 	bl	800c0ac <ssd1306_WriteCommand>
 800c25e:	4603      	mov	r3, r0
 800c260:	461a      	mov	r2, r3
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	4413      	add	r3, r2
 800c266:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0xF0);   // Set divide ratio
 800c268:	79fb      	ldrb	r3, [r7, #7]
 800c26a:	21f0      	movs	r1, #240	@ 0xf0
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7ff ff1d 	bl	800c0ac <ssd1306_WriteCommand>
 800c272:	4603      	mov	r3, r0
 800c274:	461a      	mov	r2, r3
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	4413      	add	r3, r2
 800c27a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0xD9);   // Set pre-charge period
 800c27c:	79fb      	ldrb	r3, [r7, #7]
 800c27e:	21d9      	movs	r1, #217	@ 0xd9
 800c280:	4618      	mov	r0, r3
 800c282:	f7ff ff13 	bl	800c0ac <ssd1306_WriteCommand>
 800c286:	4603      	mov	r3, r0
 800c288:	461a      	mov	r2, r3
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	4413      	add	r3, r2
 800c28e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0x22);
 800c290:	79fb      	ldrb	r3, [r7, #7]
 800c292:	2122      	movs	r1, #34	@ 0x22
 800c294:	4618      	mov	r0, r3
 800c296:	f7ff ff09 	bl	800c0ac <ssd1306_WriteCommand>
 800c29a:	4603      	mov	r3, r0
 800c29c:	461a      	mov	r2, r3
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(LCD_Instance, 0xDA);   // Set com pins hardware configuration
 800c2a4:	79fb      	ldrb	r3, [r7, #7]
 800c2a6:	21da      	movs	r1, #218	@ 0xda
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7ff feff 	bl	800c0ac <ssd1306_WriteCommand>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 800c2b8:	79fb      	ldrb	r3, [r7, #7]
 800c2ba:	2112      	movs	r1, #18
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7ff fef5 	bl	800c0ac <ssd1306_WriteCommand>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(LCD_Instance, 0xDB);   // Set vcomh
 800c2cc:	79fb      	ldrb	r3, [r7, #7]
 800c2ce:	21db      	movs	r1, #219	@ 0xdb
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7ff feeb 	bl	800c0ac <ssd1306_WriteCommand>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	461a      	mov	r2, r3
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	4413      	add	r3, r2
 800c2de:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0x20);   // 0x20,0.77xVcc
 800c2e0:	79fb      	ldrb	r3, [r7, #7]
 800c2e2:	2120      	movs	r1, #32
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7ff fee1 	bl	800c0ac <ssd1306_WriteCommand>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0x8D);   // Set DC-DC enable
 800c2f4:	79fb      	ldrb	r3, [r7, #7]
 800c2f6:	218d      	movs	r1, #141	@ 0x8d
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7ff fed7 	bl	800c0ac <ssd1306_WriteCommand>
 800c2fe:	4603      	mov	r3, r0
 800c300:	461a      	mov	r2, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	4413      	add	r3, r2
 800c306:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0x14);   //
 800c308:	79fb      	ldrb	r3, [r7, #7]
 800c30a:	2114      	movs	r1, #20
 800c30c:	4618      	mov	r0, r3
 800c30e:	f7ff fecd 	bl	800c0ac <ssd1306_WriteCommand>
 800c312:	4603      	mov	r3, r0
 800c314:	461a      	mov	r2, r3
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	4413      	add	r3, r2
 800c31a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(LCD_Instance, 0xAF);   // Turn on SSD1306 panel
 800c31c:	79fb      	ldrb	r3, [r7, #7]
 800c31e:	21af      	movs	r1, #175	@ 0xaf
 800c320:	4618      	mov	r0, r3
 800c322:	f7ff fec3 	bl	800c0ac <ssd1306_WriteCommand>
 800c326:	4603      	mov	r3, r0
 800c328:	461a      	mov	r2, r3
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	4413      	add	r3, r2
 800c32e:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d001      	beq.n	800c33a <ssd1306_Init+0x24e>
        return 1;
 800c336:	2301      	movs	r3, #1
 800c338:	e010      	b.n	800c35c <ssd1306_Init+0x270>
    }

    // Clear screen
    ssd1306_Fill(Black);
 800c33a:	2000      	movs	r0, #0
 800c33c:	f000 f814 	bl	800c368 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(LCD_Instance);
 800c340:	79fb      	ldrb	r3, [r7, #7]
 800c342:	4618      	mov	r0, r3
 800c344:	f000 f834 	bl	800c3b0 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800c348:	4b06      	ldr	r3, [pc, #24]	@ (800c364 <ssd1306_Init+0x278>)
 800c34a:	2200      	movs	r2, #0
 800c34c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800c34e:	4b05      	ldr	r3, [pc, #20]	@ (800c364 <ssd1306_Init+0x278>)
 800c350:	2200      	movs	r2, #0
 800c352:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800c354:	4b03      	ldr	r3, [pc, #12]	@ (800c364 <ssd1306_Init+0x278>)
 800c356:	2201      	movs	r2, #1
 800c358:	715a      	strb	r2, [r3, #5]

    return 0;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	20003fa0 	.word	0x20003fa0

0800c368 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	4603      	mov	r3, r0
 800c370:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800c372:	2300      	movs	r3, #0
 800c374:	60fb      	str	r3, [r7, #12]
 800c376:	e00d      	b.n	800c394 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800c378:	79fb      	ldrb	r3, [r7, #7]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d101      	bne.n	800c382 <ssd1306_Fill+0x1a>
 800c37e:	2100      	movs	r1, #0
 800c380:	e000      	b.n	800c384 <ssd1306_Fill+0x1c>
 800c382:	21ff      	movs	r1, #255	@ 0xff
 800c384:	4a09      	ldr	r2, [pc, #36]	@ (800c3ac <ssd1306_Fill+0x44>)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	4413      	add	r3, r2
 800c38a:	460a      	mov	r2, r1
 800c38c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3301      	adds	r3, #1
 800c392:	60fb      	str	r3, [r7, #12]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c39a:	d3ed      	bcc.n	800c378 <ssd1306_Fill+0x10>
    }
}
 800c39c:	bf00      	nop
 800c39e:	bf00      	nop
 800c3a0:	3714      	adds	r7, #20
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop
 800c3ac:	20003ba0 	.word	0x20003ba0

0800c3b0 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(uint8_t LCD_Instance)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b088      	sub	sp, #32
 800c3b4:	af04      	add	r7, sp, #16
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	73fb      	strb	r3, [r7, #15]
 800c3be:	e027      	b.n	800c410 <ssd1306_UpdateScreen+0x60>
        ssd1306_WriteCommand(LCD_Instance, 0xB0 + i);
 800c3c0:	7bfb      	ldrb	r3, [r7, #15]
 800c3c2:	3b50      	subs	r3, #80	@ 0x50
 800c3c4:	b2da      	uxtb	r2, r3
 800c3c6:	79fb      	ldrb	r3, [r7, #7]
 800c3c8:	4611      	mov	r1, r2
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7ff fe6e 	bl	800c0ac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(LCD_Instance, 0x00);
 800c3d0:	79fb      	ldrb	r3, [r7, #7]
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7ff fe69 	bl	800c0ac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(LCD_Instance, 0x10);
 800c3da:	79fb      	ldrb	r3, [r7, #7]
 800c3dc:	2110      	movs	r1, #16
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff fe64 	bl	800c0ac <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(ssd1306_CfgParam[LCD_Instance].I2C_Handle, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 800c3e4:	79fb      	ldrb	r3, [r7, #7]
 800c3e6:	4a0e      	ldr	r2, [pc, #56]	@ (800c420 <ssd1306_UpdateScreen+0x70>)
 800c3e8:	00db      	lsls	r3, r3, #3
 800c3ea:	4413      	add	r3, r2
 800c3ec:	6858      	ldr	r0, [r3, #4]
 800c3ee:	7bfb      	ldrb	r3, [r7, #15]
 800c3f0:	01db      	lsls	r3, r3, #7
 800c3f2:	4a0c      	ldr	r2, [pc, #48]	@ (800c424 <ssd1306_UpdateScreen+0x74>)
 800c3f4:	4413      	add	r3, r2
 800c3f6:	2264      	movs	r2, #100	@ 0x64
 800c3f8:	9202      	str	r2, [sp, #8]
 800c3fa:	2280      	movs	r2, #128	@ 0x80
 800c3fc:	9201      	str	r2, [sp, #4]
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	2301      	movs	r3, #1
 800c402:	2240      	movs	r2, #64	@ 0x40
 800c404:	2178      	movs	r1, #120	@ 0x78
 800c406:	f7f8 faa9 	bl	800495c <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
 800c40c:	3301      	adds	r3, #1
 800c40e:	73fb      	strb	r3, [r7, #15]
 800c410:	7bfb      	ldrb	r3, [r7, #15]
 800c412:	2b07      	cmp	r3, #7
 800c414:	d9d4      	bls.n	800c3c0 <ssd1306_UpdateScreen+0x10>
    }
}
 800c416:	bf00      	nop
 800c418:	bf00      	nop
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	08016228 	.word	0x08016228
 800c424:	20003ba0 	.word	0x20003ba0

0800c428 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	4603      	mov	r3, r0
 800c430:	71fb      	strb	r3, [r7, #7]
 800c432:	460b      	mov	r3, r1
 800c434:	71bb      	strb	r3, [r7, #6]
 800c436:	4613      	mov	r3, r2
 800c438:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800c43a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	db48      	blt.n	800c4d4 <ssd1306_DrawPixel+0xac>
 800c442:	79bb      	ldrb	r3, [r7, #6]
 800c444:	2b3f      	cmp	r3, #63	@ 0x3f
 800c446:	d845      	bhi.n	800c4d4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 800c448:	4b25      	ldr	r3, [pc, #148]	@ (800c4e0 <ssd1306_DrawPixel+0xb8>)
 800c44a:	791b      	ldrb	r3, [r3, #4]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d006      	beq.n	800c45e <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 800c450:	797b      	ldrb	r3, [r7, #5]
 800c452:	2b00      	cmp	r3, #0
 800c454:	bf0c      	ite	eq
 800c456:	2301      	moveq	r3, #1
 800c458:	2300      	movne	r3, #0
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 800c45e:	797b      	ldrb	r3, [r7, #5]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d11a      	bne.n	800c49a <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800c464:	79fa      	ldrb	r2, [r7, #7]
 800c466:	79bb      	ldrb	r3, [r7, #6]
 800c468:	08db      	lsrs	r3, r3, #3
 800c46a:	b2d8      	uxtb	r0, r3
 800c46c:	4603      	mov	r3, r0
 800c46e:	01db      	lsls	r3, r3, #7
 800c470:	4413      	add	r3, r2
 800c472:	4a1c      	ldr	r2, [pc, #112]	@ (800c4e4 <ssd1306_DrawPixel+0xbc>)
 800c474:	5cd3      	ldrb	r3, [r2, r3]
 800c476:	b25a      	sxtb	r2, r3
 800c478:	79bb      	ldrb	r3, [r7, #6]
 800c47a:	f003 0307 	and.w	r3, r3, #7
 800c47e:	2101      	movs	r1, #1
 800c480:	fa01 f303 	lsl.w	r3, r1, r3
 800c484:	b25b      	sxtb	r3, r3
 800c486:	4313      	orrs	r3, r2
 800c488:	b259      	sxtb	r1, r3
 800c48a:	79fa      	ldrb	r2, [r7, #7]
 800c48c:	4603      	mov	r3, r0
 800c48e:	01db      	lsls	r3, r3, #7
 800c490:	4413      	add	r3, r2
 800c492:	b2c9      	uxtb	r1, r1
 800c494:	4a13      	ldr	r2, [pc, #76]	@ (800c4e4 <ssd1306_DrawPixel+0xbc>)
 800c496:	54d1      	strb	r1, [r2, r3]
 800c498:	e01d      	b.n	800c4d6 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800c49a:	79fa      	ldrb	r2, [r7, #7]
 800c49c:	79bb      	ldrb	r3, [r7, #6]
 800c49e:	08db      	lsrs	r3, r3, #3
 800c4a0:	b2d8      	uxtb	r0, r3
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	01db      	lsls	r3, r3, #7
 800c4a6:	4413      	add	r3, r2
 800c4a8:	4a0e      	ldr	r2, [pc, #56]	@ (800c4e4 <ssd1306_DrawPixel+0xbc>)
 800c4aa:	5cd3      	ldrb	r3, [r2, r3]
 800c4ac:	b25a      	sxtb	r2, r3
 800c4ae:	79bb      	ldrb	r3, [r7, #6]
 800c4b0:	f003 0307 	and.w	r3, r3, #7
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	fa01 f303 	lsl.w	r3, r1, r3
 800c4ba:	b25b      	sxtb	r3, r3
 800c4bc:	43db      	mvns	r3, r3
 800c4be:	b25b      	sxtb	r3, r3
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	b259      	sxtb	r1, r3
 800c4c4:	79fa      	ldrb	r2, [r7, #7]
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	01db      	lsls	r3, r3, #7
 800c4ca:	4413      	add	r3, r2
 800c4cc:	b2c9      	uxtb	r1, r1
 800c4ce:	4a05      	ldr	r2, [pc, #20]	@ (800c4e4 <ssd1306_DrawPixel+0xbc>)
 800c4d0:	54d1      	strb	r1, [r2, r3]
 800c4d2:	e000      	b.n	800c4d6 <ssd1306_DrawPixel+0xae>
        return;
 800c4d4:	bf00      	nop
    }
}
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr
 800c4e0:	20003fa0 	.word	0x20003fa0
 800c4e4:	20003ba0 	.word	0x20003ba0

0800c4e8 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800c4e8:	b590      	push	{r4, r7, lr}
 800c4ea:	b089      	sub	sp, #36	@ 0x24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	1d38      	adds	r0, r7, #4
 800c4f2:	e880 0006 	stmia.w	r0, {r1, r2}
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	4623      	mov	r3, r4
 800c4fa:	73fb      	strb	r3, [r7, #15]
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800c500:	4b38      	ldr	r3, [pc, #224]	@ (800c5e4 <ssd1306_WriteChar+0xfc>)
 800c502:	881b      	ldrh	r3, [r3, #0]
 800c504:	461a      	mov	r2, r3
 800c506:	793b      	ldrb	r3, [r7, #4]
 800c508:	4413      	add	r3, r2
 800c50a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c50c:	dc06      	bgt.n	800c51c <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800c50e:	4b35      	ldr	r3, [pc, #212]	@ (800c5e4 <ssd1306_WriteChar+0xfc>)
 800c510:	885b      	ldrh	r3, [r3, #2]
 800c512:	461a      	mov	r2, r3
 800c514:	797b      	ldrb	r3, [r7, #5]
 800c516:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800c518:	2b3f      	cmp	r3, #63	@ 0x3f
 800c51a:	dd01      	ble.n	800c520 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 800c51c:	2300      	movs	r3, #0
 800c51e:	e05c      	b.n	800c5da <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 800c520:	2300      	movs	r3, #0
 800c522:	61fb      	str	r3, [r7, #28]
 800c524:	e04c      	b.n	800c5c0 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800c526:	68ba      	ldr	r2, [r7, #8]
 800c528:	7bfb      	ldrb	r3, [r7, #15]
 800c52a:	3b20      	subs	r3, #32
 800c52c:	7979      	ldrb	r1, [r7, #5]
 800c52e:	fb01 f303 	mul.w	r3, r1, r3
 800c532:	4619      	mov	r1, r3
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	440b      	add	r3, r1
 800c538:	005b      	lsls	r3, r3, #1
 800c53a:	4413      	add	r3, r2
 800c53c:	881b      	ldrh	r3, [r3, #0]
 800c53e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 800c540:	2300      	movs	r3, #0
 800c542:	61bb      	str	r3, [r7, #24]
 800c544:	e034      	b.n	800c5b0 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 800c546:	697a      	ldr	r2, [r7, #20]
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	fa02 f303 	lsl.w	r3, r2, r3
 800c54e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c552:	2b00      	cmp	r3, #0
 800c554:	d012      	beq.n	800c57c <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800c556:	4b23      	ldr	r3, [pc, #140]	@ (800c5e4 <ssd1306_WriteChar+0xfc>)
 800c558:	881b      	ldrh	r3, [r3, #0]
 800c55a:	b2da      	uxtb	r2, r3
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	4413      	add	r3, r2
 800c562:	b2d8      	uxtb	r0, r3
 800c564:	4b1f      	ldr	r3, [pc, #124]	@ (800c5e4 <ssd1306_WriteChar+0xfc>)
 800c566:	885b      	ldrh	r3, [r3, #2]
 800c568:	b2da      	uxtb	r2, r3
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	4413      	add	r3, r2
 800c570:	b2db      	uxtb	r3, r3
 800c572:	7bba      	ldrb	r2, [r7, #14]
 800c574:	4619      	mov	r1, r3
 800c576:	f7ff ff57 	bl	800c428 <ssd1306_DrawPixel>
 800c57a:	e016      	b.n	800c5aa <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800c57c:	4b19      	ldr	r3, [pc, #100]	@ (800c5e4 <ssd1306_WriteChar+0xfc>)
 800c57e:	881b      	ldrh	r3, [r3, #0]
 800c580:	b2da      	uxtb	r2, r3
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	b2db      	uxtb	r3, r3
 800c586:	4413      	add	r3, r2
 800c588:	b2d8      	uxtb	r0, r3
 800c58a:	4b16      	ldr	r3, [pc, #88]	@ (800c5e4 <ssd1306_WriteChar+0xfc>)
 800c58c:	885b      	ldrh	r3, [r3, #2]
 800c58e:	b2da      	uxtb	r2, r3
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	b2db      	uxtb	r3, r3
 800c594:	4413      	add	r3, r2
 800c596:	b2d9      	uxtb	r1, r3
 800c598:	7bbb      	ldrb	r3, [r7, #14]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	bf0c      	ite	eq
 800c59e:	2301      	moveq	r3, #1
 800c5a0:	2300      	movne	r3, #0
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	f7ff ff3f 	bl	800c428 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	61bb      	str	r3, [r7, #24]
 800c5b0:	793b      	ldrb	r3, [r7, #4]
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d3c5      	bcc.n	800c546 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	61fb      	str	r3, [r7, #28]
 800c5c0:	797b      	ldrb	r3, [r7, #5]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d3ad      	bcc.n	800c526 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800c5ca:	4b06      	ldr	r3, [pc, #24]	@ (800c5e4 <ssd1306_WriteChar+0xfc>)
 800c5cc:	881b      	ldrh	r3, [r3, #0]
 800c5ce:	793a      	ldrb	r2, [r7, #4]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	b29a      	uxth	r2, r3
 800c5d4:	4b03      	ldr	r3, [pc, #12]	@ (800c5e4 <ssd1306_WriteChar+0xfc>)
 800c5d6:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800c5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3724      	adds	r7, #36	@ 0x24
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd90      	pop	{r4, r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	20003fa0 	.word	0x20003fa0

0800c5e8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	1d38      	adds	r0, r7, #4
 800c5f2:	e880 0006 	stmia.w	r0, {r1, r2}
 800c5f6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 800c5f8:	e012      	b.n	800c620 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	7818      	ldrb	r0, [r3, #0]
 800c5fe:	78fb      	ldrb	r3, [r7, #3]
 800c600:	1d3a      	adds	r2, r7, #4
 800c602:	ca06      	ldmia	r2, {r1, r2}
 800c604:	f7ff ff70 	bl	800c4e8 <ssd1306_WriteChar>
 800c608:	4603      	mov	r3, r0
 800c60a:	461a      	mov	r2, r3
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	429a      	cmp	r2, r3
 800c612:	d002      	beq.n	800c61a <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	e008      	b.n	800c62c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	3301      	adds	r3, #1
 800c61e:	60fb      	str	r3, [r7, #12]
    while (*str)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d1e8      	bne.n	800c5fa <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	781b      	ldrb	r3, [r3, #0]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	4603      	mov	r3, r0
 800c63c:	460a      	mov	r2, r1
 800c63e:	71fb      	strb	r3, [r7, #7]
 800c640:	4613      	mov	r3, r2
 800c642:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800c644:	79fb      	ldrb	r3, [r7, #7]
 800c646:	b29a      	uxth	r2, r3
 800c648:	4b05      	ldr	r3, [pc, #20]	@ (800c660 <ssd1306_SetCursor+0x2c>)
 800c64a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800c64c:	79bb      	ldrb	r3, [r7, #6]
 800c64e:	b29a      	uxth	r2, r3
 800c650:	4b03      	ldr	r3, [pc, #12]	@ (800c660 <ssd1306_SetCursor+0x2c>)
 800c652:	805a      	strh	r2, [r3, #2]
}
 800c654:	bf00      	nop
 800c656:	370c      	adds	r7, #12
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr
 800c660:	20003fa0 	.word	0x20003fa0

0800c664 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c668:	4904      	ldr	r1, [pc, #16]	@ (800c67c <MX_FATFS_Init+0x18>)
 800c66a:	4805      	ldr	r0, [pc, #20]	@ (800c680 <MX_FATFS_Init+0x1c>)
 800c66c:	f001 ff3c 	bl	800e4e8 <FATFS_LinkDriver>
 800c670:	4603      	mov	r3, r0
 800c672:	461a      	mov	r2, r3
 800c674:	4b03      	ldr	r3, [pc, #12]	@ (800c684 <MX_FATFS_Init+0x20>)
 800c676:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c678:	bf00      	nop
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	20003fa8 	.word	0x20003fa8
 800c680:	2000001c 	.word	0x2000001c
 800c684:	20003fa6 	.word	0x20003fa6

0800c688 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	4603      	mov	r3, r0
 800c690:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	 return SD_disk_initialize(pdrv);
 800c692:	79fb      	ldrb	r3, [r7, #7]
 800c694:	4618      	mov	r0, r3
 800c696:	f000 f9fd 	bl	800ca94 <SD_disk_initialize>
 800c69a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800c6ae:	79fb      	ldrb	r3, [r7, #7]
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f000 fad5 	bl	800cc60 <SD_disk_status>
 800c6b6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3708      	adds	r7, #8
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60b9      	str	r1, [r7, #8]
 800c6c8:	607a      	str	r2, [r7, #4]
 800c6ca:	603b      	str	r3, [r7, #0]
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	 return SD_disk_read(pdrv, buff, sector, count);
 800c6d0:	7bf8      	ldrb	r0, [r7, #15]
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	68b9      	ldr	r1, [r7, #8]
 800c6d8:	f000 fad8 	bl	800cc8c <SD_disk_read>
 800c6dc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b084      	sub	sp, #16
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
 800c6f0:	603b      	str	r3, [r7, #0]
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	 return SD_disk_write(pdrv, buff, sector, count);
 800c6f6:	7bf8      	ldrb	r0, [r7, #15]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	68b9      	ldr	r1, [r7, #8]
 800c6fe:	f000 fb2f 	bl	800cd60 <SD_disk_write>
 800c702:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800c704:	4618      	mov	r0, r3
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	4603      	mov	r3, r0
 800c714:	603a      	str	r2, [r7, #0]
 800c716:	71fb      	strb	r3, [r7, #7]
 800c718:	460b      	mov	r3, r1
 800c71a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800c71c:	79b9      	ldrb	r1, [r7, #6]
 800c71e:	79fb      	ldrb	r3, [r7, #7]
 800c720:	683a      	ldr	r2, [r7, #0]
 800c722:	4618      	mov	r0, r3
 800c724:	f000 fba0 	bl	800ce68 <SD_disk_ioctl>
 800c728:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3708      	adds	r7, #8
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
	...

0800c734 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800c738:	2200      	movs	r2, #0
 800c73a:	2110      	movs	r1, #16
 800c73c:	4802      	ldr	r0, [pc, #8]	@ (800c748 <SELECT+0x14>)
 800c73e:	f7f7 ff97 	bl	8004670 <HAL_GPIO_WritePin>
}
 800c742:	bf00      	nop
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	40020800 	.word	0x40020800

0800c74c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800c750:	2201      	movs	r2, #1
 800c752:	2110      	movs	r1, #16
 800c754:	4802      	ldr	r0, [pc, #8]	@ (800c760 <DESELECT+0x14>)
 800c756:	f7f7 ff8b 	bl	8004670 <HAL_GPIO_WritePin>
}
 800c75a:	bf00      	nop
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	40020800 	.word	0x40020800

0800c764 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	4603      	mov	r3, r0
 800c76c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800c76e:	bf00      	nop
 800c770:	4b08      	ldr	r3, [pc, #32]	@ (800c794 <SPI_TxByte+0x30>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	689b      	ldr	r3, [r3, #8]
 800c776:	f003 0302 	and.w	r3, r3, #2
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d1f8      	bne.n	800c770 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800c77e:	1df9      	adds	r1, r7, #7
 800c780:	2364      	movs	r3, #100	@ 0x64
 800c782:	2201      	movs	r2, #1
 800c784:	4803      	ldr	r0, [pc, #12]	@ (800c794 <SPI_TxByte+0x30>)
 800c786:	f7fa f9c8 	bl	8006b1a <HAL_SPI_Transmit>
}
 800c78a:	bf00      	nop
 800c78c:	3708      	adds	r7, #8
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	20000318 	.word	0x20000318

0800c798 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800c7a4:	bf00      	nop
 800c7a6:	4b08      	ldr	r3, [pc, #32]	@ (800c7c8 <SPI_TxBuffer+0x30>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	f003 0302 	and.w	r3, r3, #2
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d1f8      	bne.n	800c7a6 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800c7b4:	887a      	ldrh	r2, [r7, #2]
 800c7b6:	2364      	movs	r3, #100	@ 0x64
 800c7b8:	6879      	ldr	r1, [r7, #4]
 800c7ba:	4803      	ldr	r0, [pc, #12]	@ (800c7c8 <SPI_TxBuffer+0x30>)
 800c7bc:	f7fa f9ad 	bl	8006b1a <HAL_SPI_Transmit>
}
 800c7c0:	bf00      	nop
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	20000318 	.word	0x20000318

0800c7cc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800c7d2:	23ff      	movs	r3, #255	@ 0xff
 800c7d4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800c7d6:	bf00      	nop
 800c7d8:	4b09      	ldr	r3, [pc, #36]	@ (800c800 <SPI_RxByte+0x34>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	f003 0302 	and.w	r3, r3, #2
 800c7e2:	2b02      	cmp	r3, #2
 800c7e4:	d1f8      	bne.n	800c7d8 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800c7e6:	1dba      	adds	r2, r7, #6
 800c7e8:	1df9      	adds	r1, r7, #7
 800c7ea:	2364      	movs	r3, #100	@ 0x64
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	4803      	ldr	r0, [pc, #12]	@ (800c800 <SPI_RxByte+0x34>)
 800c7f2:	f7fa fad6 	bl	8006da2 <HAL_SPI_TransmitReceive>
  return data;
 800c7f6:	79bb      	ldrb	r3, [r7, #6]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	20000318 	.word	0x20000318

0800c804 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800c80c:	f7ff ffde 	bl	800c7cc <SPI_RxByte>
 800c810:	4603      	mov	r3, r0
 800c812:	461a      	mov	r2, r3
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	701a      	strb	r2, [r3, #0]
}
 800c818:	bf00      	nop
 800c81a:	3708      	adds	r7, #8
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800c826:	4b0a      	ldr	r3, [pc, #40]	@ (800c850 <SD_ReadyWait+0x30>)
 800c828:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800c82c:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800c82e:	f7ff ffcd 	bl	800c7cc <SPI_RxByte>
 800c832:	4603      	mov	r3, r0
 800c834:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800c836:	79fb      	ldrb	r3, [r7, #7]
 800c838:	2bff      	cmp	r3, #255	@ 0xff
 800c83a:	d003      	beq.n	800c844 <SD_ReadyWait+0x24>
 800c83c:	4b04      	ldr	r3, [pc, #16]	@ (800c850 <SD_ReadyWait+0x30>)
 800c83e:	881b      	ldrh	r3, [r3, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d1f4      	bne.n	800c82e <SD_ReadyWait+0xe>
  return res;
 800c844:	79fb      	ldrb	r3, [r7, #7]
}
 800c846:	4618      	mov	r0, r3
 800c848:	3708      	adds	r7, #8
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	20003fae 	.word	0x20003fae

0800c854 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800c85a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800c85e:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800c860:	f7ff ff74 	bl	800c74c <DESELECT>
  for(int i = 0; i < 10; i++)
 800c864:	2300      	movs	r3, #0
 800c866:	60bb      	str	r3, [r7, #8]
 800c868:	e005      	b.n	800c876 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800c86a:	20ff      	movs	r0, #255	@ 0xff
 800c86c:	f7ff ff7a 	bl	800c764 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	3301      	adds	r3, #1
 800c874:	60bb      	str	r3, [r7, #8]
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	2b09      	cmp	r3, #9
 800c87a:	ddf6      	ble.n	800c86a <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800c87c:	f7ff ff5a 	bl	800c734 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800c880:	2340      	movs	r3, #64	@ 0x40
 800c882:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800c884:	2300      	movs	r3, #0
 800c886:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800c888:	2300      	movs	r3, #0
 800c88a:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800c88c:	2300      	movs	r3, #0
 800c88e:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800c890:	2300      	movs	r3, #0
 800c892:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800c894:	2395      	movs	r3, #149	@ 0x95
 800c896:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800c898:	463b      	mov	r3, r7
 800c89a:	2106      	movs	r1, #6
 800c89c:	4618      	mov	r0, r3
 800c89e:	f7ff ff7b 	bl	800c798 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800c8a2:	e002      	b.n	800c8aa <SD_PowerOn+0x56>
  {
    cnt--;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	3b01      	subs	r3, #1
 800c8a8:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800c8aa:	f7ff ff8f 	bl	800c7cc <SPI_RxByte>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d002      	beq.n	800c8ba <SD_PowerOn+0x66>
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1f4      	bne.n	800c8a4 <SD_PowerOn+0x50>
  }
  DESELECT();
 800c8ba:	f7ff ff47 	bl	800c74c <DESELECT>
  SPI_TxByte(0XFF);
 800c8be:	20ff      	movs	r0, #255	@ 0xff
 800c8c0:	f7ff ff50 	bl	800c764 <SPI_TxByte>
  PowerFlag = 1;
 800c8c4:	4b03      	ldr	r3, [pc, #12]	@ (800c8d4 <SD_PowerOn+0x80>)
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	701a      	strb	r2, [r3, #0]
}
 800c8ca:	bf00      	nop
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	20003fb1 	.word	0x20003fb1

0800c8d8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800c8dc:	4b03      	ldr	r3, [pc, #12]	@ (800c8ec <SD_PowerOff+0x14>)
 800c8de:	2200      	movs	r2, #0
 800c8e0:	701a      	strb	r2, [r3, #0]
}
 800c8e2:	bf00      	nop
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr
 800c8ec:	20003fb1 	.word	0x20003fb1

0800c8f0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	af00      	add	r7, sp, #0
  return PowerFlag;
 800c8f4:	4b03      	ldr	r3, [pc, #12]	@ (800c904 <SD_CheckPower+0x14>)
 800c8f6:	781b      	ldrb	r3, [r3, #0]
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	20003fb1 	.word	0x20003fb1

0800c908 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800c912:	4b13      	ldr	r3, [pc, #76]	@ (800c960 <SD_RxDataBlock+0x58>)
 800c914:	22c8      	movs	r2, #200	@ 0xc8
 800c916:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800c918:	f7ff ff58 	bl	800c7cc <SPI_RxByte>
 800c91c:	4603      	mov	r3, r0
 800c91e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800c920:	7bfb      	ldrb	r3, [r7, #15]
 800c922:	2bff      	cmp	r3, #255	@ 0xff
 800c924:	d103      	bne.n	800c92e <SD_RxDataBlock+0x26>
 800c926:	4b0e      	ldr	r3, [pc, #56]	@ (800c960 <SD_RxDataBlock+0x58>)
 800c928:	881b      	ldrh	r3, [r3, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d1f4      	bne.n	800c918 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	2bfe      	cmp	r3, #254	@ 0xfe
 800c932:	d001      	beq.n	800c938 <SD_RxDataBlock+0x30>
 800c934:	2300      	movs	r3, #0
 800c936:	e00f      	b.n	800c958 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	1c5a      	adds	r2, r3, #1
 800c93c:	607a      	str	r2, [r7, #4]
 800c93e:	4618      	mov	r0, r3
 800c940:	f7ff ff60 	bl	800c804 <SPI_RxBytePtr>
  } while(len--);
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	1e5a      	subs	r2, r3, #1
 800c948:	603a      	str	r2, [r7, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1f4      	bne.n	800c938 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800c94e:	f7ff ff3d 	bl	800c7cc <SPI_RxByte>
  SPI_RxByte();
 800c952:	f7ff ff3b 	bl	800c7cc <SPI_RxByte>
  return TRUE;
 800c956:	2301      	movs	r3, #1
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3710      	adds	r7, #16
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	20003fac 	.word	0x20003fac

0800c964 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	460b      	mov	r3, r1
 800c96e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800c970:	2300      	movs	r3, #0
 800c972:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800c974:	f7ff ff54 	bl	800c820 <SD_ReadyWait>
 800c978:	4603      	mov	r3, r0
 800c97a:	2bff      	cmp	r3, #255	@ 0xff
 800c97c:	d001      	beq.n	800c982 <SD_TxDataBlock+0x1e>
 800c97e:	2300      	movs	r3, #0
 800c980:	e02f      	b.n	800c9e2 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800c982:	78fb      	ldrb	r3, [r7, #3]
 800c984:	4618      	mov	r0, r3
 800c986:	f7ff feed 	bl	800c764 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800c98a:	78fb      	ldrb	r3, [r7, #3]
 800c98c:	2bfd      	cmp	r3, #253	@ 0xfd
 800c98e:	d020      	beq.n	800c9d2 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800c990:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f7ff feff 	bl	800c798 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800c99a:	f7ff ff17 	bl	800c7cc <SPI_RxByte>
    SPI_RxByte();
 800c99e:	f7ff ff15 	bl	800c7cc <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800c9a2:	e00b      	b.n	800c9bc <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800c9a4:	f7ff ff12 	bl	800c7cc <SPI_RxByte>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800c9ac:	7bfb      	ldrb	r3, [r7, #15]
 800c9ae:	f003 031f 	and.w	r3, r3, #31
 800c9b2:	2b05      	cmp	r3, #5
 800c9b4:	d006      	beq.n	800c9c4 <SD_TxDataBlock+0x60>
      i++;
 800c9b6:	7bbb      	ldrb	r3, [r7, #14]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800c9bc:	7bbb      	ldrb	r3, [r7, #14]
 800c9be:	2b40      	cmp	r3, #64	@ 0x40
 800c9c0:	d9f0      	bls.n	800c9a4 <SD_TxDataBlock+0x40>
 800c9c2:	e000      	b.n	800c9c6 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800c9c4:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800c9c6:	bf00      	nop
 800c9c8:	f7ff ff00 	bl	800c7cc <SPI_RxByte>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d0fa      	beq.n	800c9c8 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800c9d2:	7bfb      	ldrb	r3, [r7, #15]
 800c9d4:	f003 031f 	and.w	r3, r3, #31
 800c9d8:	2b05      	cmp	r3, #5
 800c9da:	d101      	bne.n	800c9e0 <SD_TxDataBlock+0x7c>
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e000      	b.n	800c9e2 <SD_TxDataBlock+0x7e>

  return FALSE;
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3710      	adds	r7, #16
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b084      	sub	sp, #16
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	6039      	str	r1, [r7, #0]
 800c9f4:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800c9f6:	f7ff ff13 	bl	800c820 <SD_ReadyWait>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	2bff      	cmp	r3, #255	@ 0xff
 800c9fe:	d001      	beq.n	800ca04 <SD_SendCmd+0x1a>
 800ca00:	23ff      	movs	r3, #255	@ 0xff
 800ca02:	e042      	b.n	800ca8a <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800ca04:	79fb      	ldrb	r3, [r7, #7]
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7ff feac 	bl	800c764 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	0e1b      	lsrs	r3, r3, #24
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7ff fea6 	bl	800c764 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	0c1b      	lsrs	r3, r3, #16
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7ff fea0 	bl	800c764 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	0a1b      	lsrs	r3, r3, #8
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7ff fe9a 	bl	800c764 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7ff fe95 	bl	800c764 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800ca3a:	79fb      	ldrb	r3, [r7, #7]
 800ca3c:	2b40      	cmp	r3, #64	@ 0x40
 800ca3e:	d102      	bne.n	800ca46 <SD_SendCmd+0x5c>
 800ca40:	2395      	movs	r3, #149	@ 0x95
 800ca42:	73fb      	strb	r3, [r7, #15]
 800ca44:	e007      	b.n	800ca56 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800ca46:	79fb      	ldrb	r3, [r7, #7]
 800ca48:	2b48      	cmp	r3, #72	@ 0x48
 800ca4a:	d102      	bne.n	800ca52 <SD_SendCmd+0x68>
 800ca4c:	2387      	movs	r3, #135	@ 0x87
 800ca4e:	73fb      	strb	r3, [r7, #15]
 800ca50:	e001      	b.n	800ca56 <SD_SendCmd+0x6c>
  else crc = 1;
 800ca52:	2301      	movs	r3, #1
 800ca54:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800ca56:	7bfb      	ldrb	r3, [r7, #15]
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7ff fe83 	bl	800c764 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800ca5e:	79fb      	ldrb	r3, [r7, #7]
 800ca60:	2b4c      	cmp	r3, #76	@ 0x4c
 800ca62:	d101      	bne.n	800ca68 <SD_SendCmd+0x7e>
 800ca64:	f7ff feb2 	bl	800c7cc <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800ca68:	230a      	movs	r3, #10
 800ca6a:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800ca6c:	f7ff feae 	bl	800c7cc <SPI_RxByte>
 800ca70:	4603      	mov	r3, r0
 800ca72:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800ca74:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	da05      	bge.n	800ca88 <SD_SendCmd+0x9e>
 800ca7c:	7bbb      	ldrb	r3, [r7, #14]
 800ca7e:	3b01      	subs	r3, #1
 800ca80:	73bb      	strb	r3, [r7, #14]
 800ca82:	7bbb      	ldrb	r3, [r7, #14]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d1f1      	bne.n	800ca6c <SD_SendCmd+0x82>

  return res;
 800ca88:	7b7b      	ldrb	r3, [r7, #13]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
	...

0800ca94 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800ca94:	b590      	push	{r4, r7, lr}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800ca9e:	79fb      	ldrb	r3, [r7, #7]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d001      	beq.n	800caa8 <SD_disk_initialize+0x14>
 800caa4:	2301      	movs	r3, #1
 800caa6:	e0d1      	b.n	800cc4c <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800caa8:	4b6a      	ldr	r3, [pc, #424]	@ (800cc54 <SD_disk_initialize+0x1c0>)
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	b2db      	uxtb	r3, r3
 800caae:	f003 0302 	and.w	r3, r3, #2
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d003      	beq.n	800cabe <SD_disk_initialize+0x2a>
 800cab6:	4b67      	ldr	r3, [pc, #412]	@ (800cc54 <SD_disk_initialize+0x1c0>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	e0c6      	b.n	800cc4c <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800cabe:	f7ff fec9 	bl	800c854 <SD_PowerOn>
  /* slave select */
  SELECT();
 800cac2:	f7ff fe37 	bl	800c734 <SELECT>
  /* check disk type */
  type = 0;
 800cac6:	2300      	movs	r3, #0
 800cac8:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800caca:	2100      	movs	r1, #0
 800cacc:	2040      	movs	r0, #64	@ 0x40
 800cace:	f7ff ff8c 	bl	800c9ea <SD_SendCmd>
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	f040 80a1 	bne.w	800cc1c <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800cada:	4b5f      	ldr	r3, [pc, #380]	@ (800cc58 <SD_disk_initialize+0x1c4>)
 800cadc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cae0:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800cae2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800cae6:	2048      	movs	r0, #72	@ 0x48
 800cae8:	f7ff ff7f 	bl	800c9ea <SD_SendCmd>
 800caec:	4603      	mov	r3, r0
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d155      	bne.n	800cb9e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800caf2:	2300      	movs	r3, #0
 800caf4:	73fb      	strb	r3, [r7, #15]
 800caf6:	e00c      	b.n	800cb12 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800caf8:	7bfc      	ldrb	r4, [r7, #15]
 800cafa:	f7ff fe67 	bl	800c7cc <SPI_RxByte>
 800cafe:	4603      	mov	r3, r0
 800cb00:	461a      	mov	r2, r3
 800cb02:	f104 0310 	add.w	r3, r4, #16
 800cb06:	443b      	add	r3, r7
 800cb08:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800cb0c:	7bfb      	ldrb	r3, [r7, #15]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	73fb      	strb	r3, [r7, #15]
 800cb12:	7bfb      	ldrb	r3, [r7, #15]
 800cb14:	2b03      	cmp	r3, #3
 800cb16:	d9ef      	bls.n	800caf8 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800cb18:	7abb      	ldrb	r3, [r7, #10]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d17e      	bne.n	800cc1c <SD_disk_initialize+0x188>
 800cb1e:	7afb      	ldrb	r3, [r7, #11]
 800cb20:	2baa      	cmp	r3, #170	@ 0xaa
 800cb22:	d17b      	bne.n	800cc1c <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800cb24:	2100      	movs	r1, #0
 800cb26:	2077      	movs	r0, #119	@ 0x77
 800cb28:	f7ff ff5f 	bl	800c9ea <SD_SendCmd>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d807      	bhi.n	800cb42 <SD_disk_initialize+0xae>
 800cb32:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800cb36:	2069      	movs	r0, #105	@ 0x69
 800cb38:	f7ff ff57 	bl	800c9ea <SD_SendCmd>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d004      	beq.n	800cb4c <SD_disk_initialize+0xb8>
        } while (Timer1);
 800cb42:	4b45      	ldr	r3, [pc, #276]	@ (800cc58 <SD_disk_initialize+0x1c4>)
 800cb44:	881b      	ldrh	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d1ec      	bne.n	800cb24 <SD_disk_initialize+0x90>
 800cb4a:	e000      	b.n	800cb4e <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800cb4c:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800cb4e:	4b42      	ldr	r3, [pc, #264]	@ (800cc58 <SD_disk_initialize+0x1c4>)
 800cb50:	881b      	ldrh	r3, [r3, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d062      	beq.n	800cc1c <SD_disk_initialize+0x188>
 800cb56:	2100      	movs	r1, #0
 800cb58:	207a      	movs	r0, #122	@ 0x7a
 800cb5a:	f7ff ff46 	bl	800c9ea <SD_SendCmd>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d15b      	bne.n	800cc1c <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800cb64:	2300      	movs	r3, #0
 800cb66:	73fb      	strb	r3, [r7, #15]
 800cb68:	e00c      	b.n	800cb84 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800cb6a:	7bfc      	ldrb	r4, [r7, #15]
 800cb6c:	f7ff fe2e 	bl	800c7cc <SPI_RxByte>
 800cb70:	4603      	mov	r3, r0
 800cb72:	461a      	mov	r2, r3
 800cb74:	f104 0310 	add.w	r3, r4, #16
 800cb78:	443b      	add	r3, r7
 800cb7a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
 800cb80:	3301      	adds	r3, #1
 800cb82:	73fb      	strb	r3, [r7, #15]
 800cb84:	7bfb      	ldrb	r3, [r7, #15]
 800cb86:	2b03      	cmp	r3, #3
 800cb88:	d9ef      	bls.n	800cb6a <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800cb8a:	7a3b      	ldrb	r3, [r7, #8]
 800cb8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d001      	beq.n	800cb98 <SD_disk_initialize+0x104>
 800cb94:	230c      	movs	r3, #12
 800cb96:	e000      	b.n	800cb9a <SD_disk_initialize+0x106>
 800cb98:	2304      	movs	r3, #4
 800cb9a:	73bb      	strb	r3, [r7, #14]
 800cb9c:	e03e      	b.n	800cc1c <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800cb9e:	2100      	movs	r1, #0
 800cba0:	2077      	movs	r0, #119	@ 0x77
 800cba2:	f7ff ff22 	bl	800c9ea <SD_SendCmd>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d808      	bhi.n	800cbbe <SD_disk_initialize+0x12a>
 800cbac:	2100      	movs	r1, #0
 800cbae:	2069      	movs	r0, #105	@ 0x69
 800cbb0:	f7ff ff1b 	bl	800c9ea <SD_SendCmd>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d801      	bhi.n	800cbbe <SD_disk_initialize+0x12a>
 800cbba:	2302      	movs	r3, #2
 800cbbc:	e000      	b.n	800cbc0 <SD_disk_initialize+0x12c>
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800cbc2:	7bbb      	ldrb	r3, [r7, #14]
 800cbc4:	2b02      	cmp	r3, #2
 800cbc6:	d10e      	bne.n	800cbe6 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800cbc8:	2100      	movs	r1, #0
 800cbca:	2077      	movs	r0, #119	@ 0x77
 800cbcc:	f7ff ff0d 	bl	800c9ea <SD_SendCmd>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d80e      	bhi.n	800cbf4 <SD_disk_initialize+0x160>
 800cbd6:	2100      	movs	r1, #0
 800cbd8:	2069      	movs	r0, #105	@ 0x69
 800cbda:	f7ff ff06 	bl	800c9ea <SD_SendCmd>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d107      	bne.n	800cbf4 <SD_disk_initialize+0x160>
 800cbe4:	e00c      	b.n	800cc00 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	2041      	movs	r0, #65	@ 0x41
 800cbea:	f7ff fefe 	bl	800c9ea <SD_SendCmd>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d004      	beq.n	800cbfe <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 800cbf4:	4b18      	ldr	r3, [pc, #96]	@ (800cc58 <SD_disk_initialize+0x1c4>)
 800cbf6:	881b      	ldrh	r3, [r3, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d1e2      	bne.n	800cbc2 <SD_disk_initialize+0x12e>
 800cbfc:	e000      	b.n	800cc00 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800cbfe:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800cc00:	4b15      	ldr	r3, [pc, #84]	@ (800cc58 <SD_disk_initialize+0x1c4>)
 800cc02:	881b      	ldrh	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d007      	beq.n	800cc18 <SD_disk_initialize+0x184>
 800cc08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cc0c:	2050      	movs	r0, #80	@ 0x50
 800cc0e:	f7ff feec 	bl	800c9ea <SD_SendCmd>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d001      	beq.n	800cc1c <SD_disk_initialize+0x188>
 800cc18:	2300      	movs	r3, #0
 800cc1a:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 800cc1c:	4a0f      	ldr	r2, [pc, #60]	@ (800cc5c <SD_disk_initialize+0x1c8>)
 800cc1e:	7bbb      	ldrb	r3, [r7, #14]
 800cc20:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800cc22:	f7ff fd93 	bl	800c74c <DESELECT>
  SPI_RxByte();
 800cc26:	f7ff fdd1 	bl	800c7cc <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 800cc2a:	7bbb      	ldrb	r3, [r7, #14]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d008      	beq.n	800cc42 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800cc30:	4b08      	ldr	r3, [pc, #32]	@ (800cc54 <SD_disk_initialize+0x1c0>)
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	f023 0301 	bic.w	r3, r3, #1
 800cc3a:	b2da      	uxtb	r2, r3
 800cc3c:	4b05      	ldr	r3, [pc, #20]	@ (800cc54 <SD_disk_initialize+0x1c0>)
 800cc3e:	701a      	strb	r2, [r3, #0]
 800cc40:	e001      	b.n	800cc46 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800cc42:	f7ff fe49 	bl	800c8d8 <SD_PowerOff>
  }
  return Stat;
 800cc46:	4b03      	ldr	r3, [pc, #12]	@ (800cc54 <SD_disk_initialize+0x1c0>)
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	b2db      	uxtb	r3, r3
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3714      	adds	r7, #20
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd90      	pop	{r4, r7, pc}
 800cc54:	20000030 	.word	0x20000030
 800cc58:	20003fac 	.word	0x20003fac
 800cc5c:	20003fb0 	.word	0x20003fb0

0800cc60 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	4603      	mov	r3, r0
 800cc68:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800cc6a:	79fb      	ldrb	r3, [r7, #7]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d001      	beq.n	800cc74 <SD_disk_status+0x14>
 800cc70:	2301      	movs	r3, #1
 800cc72:	e002      	b.n	800cc7a <SD_disk_status+0x1a>
  return Stat;
 800cc74:	4b04      	ldr	r3, [pc, #16]	@ (800cc88 <SD_disk_status+0x28>)
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	b2db      	uxtb	r3, r3
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	370c      	adds	r7, #12
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr
 800cc86:	bf00      	nop
 800cc88:	20000030 	.word	0x20000030

0800cc8c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b084      	sub	sp, #16
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60b9      	str	r1, [r7, #8]
 800cc94:	607a      	str	r2, [r7, #4]
 800cc96:	603b      	str	r3, [r7, #0]
 800cc98:	4603      	mov	r3, r0
 800cc9a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d102      	bne.n	800cca8 <SD_disk_read+0x1c>
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d101      	bne.n	800ccac <SD_disk_read+0x20>
 800cca8:	2304      	movs	r3, #4
 800ccaa:	e051      	b.n	800cd50 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ccac:	4b2a      	ldr	r3, [pc, #168]	@ (800cd58 <SD_disk_read+0xcc>)
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d001      	beq.n	800ccbe <SD_disk_read+0x32>
 800ccba:	2303      	movs	r3, #3
 800ccbc:	e048      	b.n	800cd50 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800ccbe:	4b27      	ldr	r3, [pc, #156]	@ (800cd5c <SD_disk_read+0xd0>)
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	f003 0304 	and.w	r3, r3, #4
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d102      	bne.n	800ccd0 <SD_disk_read+0x44>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	025b      	lsls	r3, r3, #9
 800ccce:	607b      	str	r3, [r7, #4]

  SELECT();
 800ccd0:	f7ff fd30 	bl	800c734 <SELECT>

  if (count == 1)
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d111      	bne.n	800ccfe <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800ccda:	6879      	ldr	r1, [r7, #4]
 800ccdc:	2051      	movs	r0, #81	@ 0x51
 800ccde:	f7ff fe84 	bl	800c9ea <SD_SendCmd>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d129      	bne.n	800cd3c <SD_disk_read+0xb0>
 800cce8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ccec:	68b8      	ldr	r0, [r7, #8]
 800ccee:	f7ff fe0b 	bl	800c908 <SD_RxDataBlock>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d021      	beq.n	800cd3c <SD_disk_read+0xb0>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	603b      	str	r3, [r7, #0]
 800ccfc:	e01e      	b.n	800cd3c <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800ccfe:	6879      	ldr	r1, [r7, #4]
 800cd00:	2052      	movs	r0, #82	@ 0x52
 800cd02:	f7ff fe72 	bl	800c9ea <SD_SendCmd>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d117      	bne.n	800cd3c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800cd0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cd10:	68b8      	ldr	r0, [r7, #8]
 800cd12:	f7ff fdf9 	bl	800c908 <SD_RxDataBlock>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00a      	beq.n	800cd32 <SD_disk_read+0xa6>
        buff += 512;
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800cd22:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	3b01      	subs	r3, #1
 800cd28:	603b      	str	r3, [r7, #0]
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d1ed      	bne.n	800cd0c <SD_disk_read+0x80>
 800cd30:	e000      	b.n	800cd34 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800cd32:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800cd34:	2100      	movs	r1, #0
 800cd36:	204c      	movs	r0, #76	@ 0x4c
 800cd38:	f7ff fe57 	bl	800c9ea <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800cd3c:	f7ff fd06 	bl	800c74c <DESELECT>
  SPI_RxByte();
 800cd40:	f7ff fd44 	bl	800c7cc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	bf14      	ite	ne
 800cd4a:	2301      	movne	r3, #1
 800cd4c:	2300      	moveq	r3, #0
 800cd4e:	b2db      	uxtb	r3, r3
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	20000030 	.word	0x20000030
 800cd5c:	20003fb0 	.word	0x20003fb0

0800cd60 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60b9      	str	r1, [r7, #8]
 800cd68:	607a      	str	r2, [r7, #4]
 800cd6a:	603b      	str	r3, [r7, #0]
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800cd70:	7bfb      	ldrb	r3, [r7, #15]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d102      	bne.n	800cd7c <SD_disk_write+0x1c>
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d101      	bne.n	800cd80 <SD_disk_write+0x20>
 800cd7c:	2304      	movs	r3, #4
 800cd7e:	e06b      	b.n	800ce58 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cd80:	4b37      	ldr	r3, [pc, #220]	@ (800ce60 <SD_disk_write+0x100>)
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	f003 0301 	and.w	r3, r3, #1
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d001      	beq.n	800cd92 <SD_disk_write+0x32>
 800cd8e:	2303      	movs	r3, #3
 800cd90:	e062      	b.n	800ce58 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800cd92:	4b33      	ldr	r3, [pc, #204]	@ (800ce60 <SD_disk_write+0x100>)
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	f003 0304 	and.w	r3, r3, #4
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d001      	beq.n	800cda4 <SD_disk_write+0x44>
 800cda0:	2302      	movs	r3, #2
 800cda2:	e059      	b.n	800ce58 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800cda4:	4b2f      	ldr	r3, [pc, #188]	@ (800ce64 <SD_disk_write+0x104>)
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	f003 0304 	and.w	r3, r3, #4
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d102      	bne.n	800cdb6 <SD_disk_write+0x56>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	025b      	lsls	r3, r3, #9
 800cdb4:	607b      	str	r3, [r7, #4]

  SELECT();
 800cdb6:	f7ff fcbd 	bl	800c734 <SELECT>

  if (count == 1)
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d110      	bne.n	800cde2 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800cdc0:	6879      	ldr	r1, [r7, #4]
 800cdc2:	2058      	movs	r0, #88	@ 0x58
 800cdc4:	f7ff fe11 	bl	800c9ea <SD_SendCmd>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d13a      	bne.n	800ce44 <SD_disk_write+0xe4>
 800cdce:	21fe      	movs	r1, #254	@ 0xfe
 800cdd0:	68b8      	ldr	r0, [r7, #8]
 800cdd2:	f7ff fdc7 	bl	800c964 <SD_TxDataBlock>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d033      	beq.n	800ce44 <SD_disk_write+0xe4>
      count = 0;
 800cddc:	2300      	movs	r3, #0
 800cdde:	603b      	str	r3, [r7, #0]
 800cde0:	e030      	b.n	800ce44 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800cde2:	4b20      	ldr	r3, [pc, #128]	@ (800ce64 <SD_disk_write+0x104>)
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	f003 0302 	and.w	r3, r3, #2
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d007      	beq.n	800cdfe <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800cdee:	2100      	movs	r1, #0
 800cdf0:	2077      	movs	r0, #119	@ 0x77
 800cdf2:	f7ff fdfa 	bl	800c9ea <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800cdf6:	6839      	ldr	r1, [r7, #0]
 800cdf8:	2057      	movs	r0, #87	@ 0x57
 800cdfa:	f7ff fdf6 	bl	800c9ea <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800cdfe:	6879      	ldr	r1, [r7, #4]
 800ce00:	2059      	movs	r0, #89	@ 0x59
 800ce02:	f7ff fdf2 	bl	800c9ea <SD_SendCmd>
 800ce06:	4603      	mov	r3, r0
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d11b      	bne.n	800ce44 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800ce0c:	21fc      	movs	r1, #252	@ 0xfc
 800ce0e:	68b8      	ldr	r0, [r7, #8]
 800ce10:	f7ff fda8 	bl	800c964 <SD_TxDataBlock>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d00a      	beq.n	800ce30 <SD_disk_write+0xd0>
        buff += 512;
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800ce20:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	3b01      	subs	r3, #1
 800ce26:	603b      	str	r3, [r7, #0]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d1ee      	bne.n	800ce0c <SD_disk_write+0xac>
 800ce2e:	e000      	b.n	800ce32 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800ce30:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800ce32:	21fd      	movs	r1, #253	@ 0xfd
 800ce34:	2000      	movs	r0, #0
 800ce36:	f7ff fd95 	bl	800c964 <SD_TxDataBlock>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d101      	bne.n	800ce44 <SD_disk_write+0xe4>
      {
        count = 1;
 800ce40:	2301      	movs	r3, #1
 800ce42:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800ce44:	f7ff fc82 	bl	800c74c <DESELECT>
  SPI_RxByte();
 800ce48:	f7ff fcc0 	bl	800c7cc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	bf14      	ite	ne
 800ce52:	2301      	movne	r3, #1
 800ce54:	2300      	moveq	r3, #0
 800ce56:	b2db      	uxtb	r3, r3
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3710      	adds	r7, #16
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	20000030 	.word	0x20000030
 800ce64:	20003fb0 	.word	0x20003fb0

0800ce68 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800ce68:	b590      	push	{r4, r7, lr}
 800ce6a:	b08b      	sub	sp, #44	@ 0x2c
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	4603      	mov	r3, r0
 800ce70:	603a      	str	r2, [r7, #0]
 800ce72:	71fb      	strb	r3, [r7, #7]
 800ce74:	460b      	mov	r3, r1
 800ce76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800ce7c:	79fb      	ldrb	r3, [r7, #7]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d001      	beq.n	800ce86 <SD_disk_ioctl+0x1e>
 800ce82:	2304      	movs	r3, #4
 800ce84:	e113      	b.n	800d0ae <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800ce86:	2301      	movs	r3, #1
 800ce88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800ce8c:	79bb      	ldrb	r3, [r7, #6]
 800ce8e:	2b05      	cmp	r3, #5
 800ce90:	d124      	bne.n	800cedc <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800ce92:	6a3b      	ldr	r3, [r7, #32]
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	d012      	beq.n	800cec0 <SD_disk_ioctl+0x58>
 800ce9a:	2b02      	cmp	r3, #2
 800ce9c:	dc1a      	bgt.n	800ced4 <SD_disk_ioctl+0x6c>
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d002      	beq.n	800cea8 <SD_disk_ioctl+0x40>
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d006      	beq.n	800ceb4 <SD_disk_ioctl+0x4c>
 800cea6:	e015      	b.n	800ced4 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800cea8:	f7ff fd16 	bl	800c8d8 <SD_PowerOff>
      res = RES_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ceb2:	e0fa      	b.n	800d0aa <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 800ceb4:	f7ff fcce 	bl	800c854 <SD_PowerOn>
      res = RES_OK;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800cebe:	e0f4      	b.n	800d0aa <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800cec0:	6a3b      	ldr	r3, [r7, #32]
 800cec2:	1c5c      	adds	r4, r3, #1
 800cec4:	f7ff fd14 	bl	800c8f0 <SD_CheckPower>
 800cec8:	4603      	mov	r3, r0
 800ceca:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800cecc:	2300      	movs	r3, #0
 800cece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ced2:	e0ea      	b.n	800d0aa <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 800ced4:	2304      	movs	r3, #4
 800ced6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ceda:	e0e6      	b.n	800d0aa <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 800cedc:	4b76      	ldr	r3, [pc, #472]	@ (800d0b8 <SD_disk_ioctl+0x250>)
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	f003 0301 	and.w	r3, r3, #1
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d001      	beq.n	800ceee <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800ceea:	2303      	movs	r3, #3
 800ceec:	e0df      	b.n	800d0ae <SD_disk_ioctl+0x246>
    }
    SELECT();
 800ceee:	f7ff fc21 	bl	800c734 <SELECT>
    switch (ctrl)
 800cef2:	79bb      	ldrb	r3, [r7, #6]
 800cef4:	2b0d      	cmp	r3, #13
 800cef6:	f200 80c9 	bhi.w	800d08c <SD_disk_ioctl+0x224>
 800cefa:	a201      	add	r2, pc, #4	@ (adr r2, 800cf00 <SD_disk_ioctl+0x98>)
 800cefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf00:	0800cff7 	.word	0x0800cff7
 800cf04:	0800cf39 	.word	0x0800cf39
 800cf08:	0800cfe7 	.word	0x0800cfe7
 800cf0c:	0800d08d 	.word	0x0800d08d
 800cf10:	0800d08d 	.word	0x0800d08d
 800cf14:	0800d08d 	.word	0x0800d08d
 800cf18:	0800d08d 	.word	0x0800d08d
 800cf1c:	0800d08d 	.word	0x0800d08d
 800cf20:	0800d08d 	.word	0x0800d08d
 800cf24:	0800d08d 	.word	0x0800d08d
 800cf28:	0800d08d 	.word	0x0800d08d
 800cf2c:	0800d009 	.word	0x0800d009
 800cf30:	0800d02d 	.word	0x0800d02d
 800cf34:	0800d051 	.word	0x0800d051
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800cf38:	2100      	movs	r1, #0
 800cf3a:	2049      	movs	r0, #73	@ 0x49
 800cf3c:	f7ff fd55 	bl	800c9ea <SD_SendCmd>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f040 80a6 	bne.w	800d094 <SD_disk_ioctl+0x22c>
 800cf48:	f107 030c 	add.w	r3, r7, #12
 800cf4c:	2110      	movs	r1, #16
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7ff fcda 	bl	800c908 <SD_RxDataBlock>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	f000 809c 	beq.w	800d094 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 800cf5c:	7b3b      	ldrb	r3, [r7, #12]
 800cf5e:	099b      	lsrs	r3, r3, #6
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d10d      	bne.n	800cf82 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800cf66:	7d7b      	ldrb	r3, [r7, #21]
 800cf68:	461a      	mov	r2, r3
 800cf6a:	7d3b      	ldrb	r3, [r7, #20]
 800cf6c:	021b      	lsls	r3, r3, #8
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	4413      	add	r3, r2
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	3301      	adds	r3, #1
 800cf76:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800cf78:	8bfb      	ldrh	r3, [r7, #30]
 800cf7a:	029a      	lsls	r2, r3, #10
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	601a      	str	r2, [r3, #0]
 800cf80:	e02d      	b.n	800cfde <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800cf82:	7c7b      	ldrb	r3, [r7, #17]
 800cf84:	f003 030f 	and.w	r3, r3, #15
 800cf88:	b2da      	uxtb	r2, r3
 800cf8a:	7dbb      	ldrb	r3, [r7, #22]
 800cf8c:	09db      	lsrs	r3, r3, #7
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	4413      	add	r3, r2
 800cf92:	b2da      	uxtb	r2, r3
 800cf94:	7d7b      	ldrb	r3, [r7, #21]
 800cf96:	005b      	lsls	r3, r3, #1
 800cf98:	b2db      	uxtb	r3, r3
 800cf9a:	f003 0306 	and.w	r3, r3, #6
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	4413      	add	r3, r2
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	3302      	adds	r3, #2
 800cfa6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800cfaa:	7d3b      	ldrb	r3, [r7, #20]
 800cfac:	099b      	lsrs	r3, r3, #6
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	7cfb      	ldrb	r3, [r7, #19]
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	4413      	add	r3, r2
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	7cbb      	ldrb	r3, [r7, #18]
 800cfbe:	029b      	lsls	r3, r3, #10
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	4413      	add	r3, r2
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	3301      	adds	r3, #1
 800cfce:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800cfd0:	8bfa      	ldrh	r2, [r7, #30]
 800cfd2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cfd6:	3b09      	subs	r3, #9
 800cfd8:	409a      	lsls	r2, r3
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800cfe4:	e056      	b.n	800d094 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cfec:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800cfee:	2300      	movs	r3, #0
 800cff0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800cff4:	e055      	b.n	800d0a2 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800cff6:	f7ff fc13 	bl	800c820 <SD_ReadyWait>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2bff      	cmp	r3, #255	@ 0xff
 800cffe:	d14b      	bne.n	800d098 <SD_disk_ioctl+0x230>
 800d000:	2300      	movs	r3, #0
 800d002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800d006:	e047      	b.n	800d098 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800d008:	2100      	movs	r1, #0
 800d00a:	2049      	movs	r0, #73	@ 0x49
 800d00c:	f7ff fced 	bl	800c9ea <SD_SendCmd>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d142      	bne.n	800d09c <SD_disk_ioctl+0x234>
 800d016:	2110      	movs	r1, #16
 800d018:	6a38      	ldr	r0, [r7, #32]
 800d01a:	f7ff fc75 	bl	800c908 <SD_RxDataBlock>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d03b      	beq.n	800d09c <SD_disk_ioctl+0x234>
 800d024:	2300      	movs	r3, #0
 800d026:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800d02a:	e037      	b.n	800d09c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800d02c:	2100      	movs	r1, #0
 800d02e:	204a      	movs	r0, #74	@ 0x4a
 800d030:	f7ff fcdb 	bl	800c9ea <SD_SendCmd>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d132      	bne.n	800d0a0 <SD_disk_ioctl+0x238>
 800d03a:	2110      	movs	r1, #16
 800d03c:	6a38      	ldr	r0, [r7, #32]
 800d03e:	f7ff fc63 	bl	800c908 <SD_RxDataBlock>
 800d042:	4603      	mov	r3, r0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d02b      	beq.n	800d0a0 <SD_disk_ioctl+0x238>
 800d048:	2300      	movs	r3, #0
 800d04a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800d04e:	e027      	b.n	800d0a0 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800d050:	2100      	movs	r1, #0
 800d052:	207a      	movs	r0, #122	@ 0x7a
 800d054:	f7ff fcc9 	bl	800c9ea <SD_SendCmd>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d116      	bne.n	800d08c <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 800d05e:	2300      	movs	r3, #0
 800d060:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d064:	e00b      	b.n	800d07e <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800d066:	6a3c      	ldr	r4, [r7, #32]
 800d068:	1c63      	adds	r3, r4, #1
 800d06a:	623b      	str	r3, [r7, #32]
 800d06c:	f7ff fbae 	bl	800c7cc <SPI_RxByte>
 800d070:	4603      	mov	r3, r0
 800d072:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800d074:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d078:	3301      	adds	r3, #1
 800d07a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d07e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d082:	2b03      	cmp	r3, #3
 800d084:	d9ef      	bls.n	800d066 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800d086:	2300      	movs	r3, #0
 800d088:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800d08c:	2304      	movs	r3, #4
 800d08e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d092:	e006      	b.n	800d0a2 <SD_disk_ioctl+0x23a>
      break;
 800d094:	bf00      	nop
 800d096:	e004      	b.n	800d0a2 <SD_disk_ioctl+0x23a>
      break;
 800d098:	bf00      	nop
 800d09a:	e002      	b.n	800d0a2 <SD_disk_ioctl+0x23a>
      break;
 800d09c:	bf00      	nop
 800d09e:	e000      	b.n	800d0a2 <SD_disk_ioctl+0x23a>
      break;
 800d0a0:	bf00      	nop
    }
    DESELECT();
 800d0a2:	f7ff fb53 	bl	800c74c <DESELECT>
    SPI_RxByte();
 800d0a6:	f7ff fb91 	bl	800c7cc <SPI_RxByte>
  }
  return res;
 800d0aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	372c      	adds	r7, #44	@ 0x2c
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd90      	pop	{r4, r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	20000030 	.word	0x20000030

0800d0bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b083      	sub	sp, #12
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d0c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	370c      	adds	r7, #12
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr

0800d0d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b084      	sub	sp, #16
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
 800d0da:	460b      	mov	r3, r1
 800d0dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d009      	beq.n	800d100 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	78fa      	ldrb	r2, [r7, #3]
 800d0f6:	4611      	mov	r1, r2
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	4798      	blx	r3
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d100:	7bfb      	ldrb	r3, [r7, #15]
}
 800d102:	4618      	mov	r0, r3
 800d104:	3710      	adds	r7, #16
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b084      	sub	sp, #16
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
 800d112:	460b      	mov	r3, r1
 800d114:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d116:	2300      	movs	r3, #0
 800d118:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	78fa      	ldrb	r2, [r7, #3]
 800d124:	4611      	mov	r1, r2
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	4798      	blx	r3
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d001      	beq.n	800d134 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d130:	2303      	movs	r3, #3
 800d132:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d134:	7bfb      	ldrb	r3, [r7, #15]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b084      	sub	sp, #16
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
 800d146:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d14e:	6839      	ldr	r1, [r7, #0]
 800d150:	4618      	mov	r0, r3
 800d152:	f001 f8cc 	bl	800e2ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2201      	movs	r2, #1
 800d15a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d164:	461a      	mov	r2, r3
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d172:	f003 031f 	and.w	r3, r3, #31
 800d176:	2b02      	cmp	r3, #2
 800d178:	d01a      	beq.n	800d1b0 <USBD_LL_SetupStage+0x72>
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d822      	bhi.n	800d1c4 <USBD_LL_SetupStage+0x86>
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d002      	beq.n	800d188 <USBD_LL_SetupStage+0x4a>
 800d182:	2b01      	cmp	r3, #1
 800d184:	d00a      	beq.n	800d19c <USBD_LL_SetupStage+0x5e>
 800d186:	e01d      	b.n	800d1c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d18e:	4619      	mov	r1, r3
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 fb21 	bl	800d7d8 <USBD_StdDevReq>
 800d196:	4603      	mov	r3, r0
 800d198:	73fb      	strb	r3, [r7, #15]
      break;
 800d19a:	e020      	b.n	800d1de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 fb89 	bl	800d8bc <USBD_StdItfReq>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	73fb      	strb	r3, [r7, #15]
      break;
 800d1ae:	e016      	b.n	800d1de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 fbeb 	bl	800d994 <USBD_StdEPReq>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	73fb      	strb	r3, [r7, #15]
      break;
 800d1c2:	e00c      	b.n	800d1de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d1ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f004 fca8 	bl	8011b28 <USBD_LL_StallEP>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	73fb      	strb	r3, [r7, #15]
      break;
 800d1dc:	bf00      	nop
  }

  return ret;
 800d1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3710      	adds	r7, #16
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b086      	sub	sp, #24
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	60f8      	str	r0, [r7, #12]
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	607a      	str	r2, [r7, #4]
 800d1f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800d1fa:	7afb      	ldrb	r3, [r7, #11]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d177      	bne.n	800d2f0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d206:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d20e:	2b03      	cmp	r3, #3
 800d210:	f040 80a1 	bne.w	800d356 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	693a      	ldr	r2, [r7, #16]
 800d21a:	8992      	ldrh	r2, [r2, #12]
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d91c      	bls.n	800d25a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	693a      	ldr	r2, [r7, #16]
 800d226:	8992      	ldrh	r2, [r2, #12]
 800d228:	1a9a      	subs	r2, r3, r2
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	691b      	ldr	r3, [r3, #16]
 800d232:	693a      	ldr	r2, [r7, #16]
 800d234:	8992      	ldrh	r2, [r2, #12]
 800d236:	441a      	add	r2, r3
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	6919      	ldr	r1, [r3, #16]
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	899b      	ldrh	r3, [r3, #12]
 800d244:	461a      	mov	r2, r3
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	4293      	cmp	r3, r2
 800d24c:	bf38      	it	cc
 800d24e:	4613      	movcc	r3, r2
 800d250:	461a      	mov	r2, r3
 800d252:	68f8      	ldr	r0, [r7, #12]
 800d254:	f001 f8c5 	bl	800e3e2 <USBD_CtlContinueRx>
 800d258:	e07d      	b.n	800d356 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d260:	f003 031f 	and.w	r3, r3, #31
 800d264:	2b02      	cmp	r3, #2
 800d266:	d014      	beq.n	800d292 <USBD_LL_DataOutStage+0xaa>
 800d268:	2b02      	cmp	r3, #2
 800d26a:	d81d      	bhi.n	800d2a8 <USBD_LL_DataOutStage+0xc0>
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d002      	beq.n	800d276 <USBD_LL_DataOutStage+0x8e>
 800d270:	2b01      	cmp	r3, #1
 800d272:	d003      	beq.n	800d27c <USBD_LL_DataOutStage+0x94>
 800d274:	e018      	b.n	800d2a8 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d276:	2300      	movs	r3, #0
 800d278:	75bb      	strb	r3, [r7, #22]
            break;
 800d27a:	e018      	b.n	800d2ae <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d282:	b2db      	uxtb	r3, r3
 800d284:	4619      	mov	r1, r3
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f000 fa6e 	bl	800d768 <USBD_CoreFindIF>
 800d28c:	4603      	mov	r3, r0
 800d28e:	75bb      	strb	r3, [r7, #22]
            break;
 800d290:	e00d      	b.n	800d2ae <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	4619      	mov	r1, r3
 800d29c:	68f8      	ldr	r0, [r7, #12]
 800d29e:	f000 fa70 	bl	800d782 <USBD_CoreFindEP>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	75bb      	strb	r3, [r7, #22]
            break;
 800d2a6:	e002      	b.n	800d2ae <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	75bb      	strb	r3, [r7, #22]
            break;
 800d2ac:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d2ae:	7dbb      	ldrb	r3, [r7, #22]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d119      	bne.n	800d2e8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	2b03      	cmp	r3, #3
 800d2be:	d113      	bne.n	800d2e8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d2c0:	7dba      	ldrb	r2, [r7, #22]
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	32ae      	adds	r2, #174	@ 0xae
 800d2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2ca:	691b      	ldr	r3, [r3, #16]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d00b      	beq.n	800d2e8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800d2d0:	7dba      	ldrb	r2, [r7, #22]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d2d8:	7dba      	ldrb	r2, [r7, #22]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	32ae      	adds	r2, #174	@ 0xae
 800d2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2e2:	691b      	ldr	r3, [r3, #16]
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d2e8:	68f8      	ldr	r0, [r7, #12]
 800d2ea:	f001 f88b 	bl	800e404 <USBD_CtlSendStatus>
 800d2ee:	e032      	b.n	800d356 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d2f0:	7afb      	ldrb	r3, [r7, #11]
 800d2f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2f6:	b2db      	uxtb	r3, r3
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f000 fa41 	bl	800d782 <USBD_CoreFindEP>
 800d300:	4603      	mov	r3, r0
 800d302:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d304:	7dbb      	ldrb	r3, [r7, #22]
 800d306:	2bff      	cmp	r3, #255	@ 0xff
 800d308:	d025      	beq.n	800d356 <USBD_LL_DataOutStage+0x16e>
 800d30a:	7dbb      	ldrb	r3, [r7, #22]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d122      	bne.n	800d356 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d316:	b2db      	uxtb	r3, r3
 800d318:	2b03      	cmp	r3, #3
 800d31a:	d117      	bne.n	800d34c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d31c:	7dba      	ldrb	r2, [r7, #22]
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	32ae      	adds	r2, #174	@ 0xae
 800d322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d326:	699b      	ldr	r3, [r3, #24]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d00f      	beq.n	800d34c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800d32c:	7dba      	ldrb	r2, [r7, #22]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d334:	7dba      	ldrb	r2, [r7, #22]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	32ae      	adds	r2, #174	@ 0xae
 800d33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d33e:	699b      	ldr	r3, [r3, #24]
 800d340:	7afa      	ldrb	r2, [r7, #11]
 800d342:	4611      	mov	r1, r2
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	4798      	blx	r3
 800d348:	4603      	mov	r3, r0
 800d34a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d34c:	7dfb      	ldrb	r3, [r7, #23]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d001      	beq.n	800d356 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800d352:	7dfb      	ldrb	r3, [r7, #23]
 800d354:	e000      	b.n	800d358 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800d356:	2300      	movs	r3, #0
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3718      	adds	r7, #24
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b086      	sub	sp, #24
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	460b      	mov	r3, r1
 800d36a:	607a      	str	r2, [r7, #4]
 800d36c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800d36e:	7afb      	ldrb	r3, [r7, #11]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d178      	bne.n	800d466 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	3314      	adds	r3, #20
 800d378:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d380:	2b02      	cmp	r3, #2
 800d382:	d163      	bne.n	800d44c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	693a      	ldr	r2, [r7, #16]
 800d38a:	8992      	ldrh	r2, [r2, #12]
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d91c      	bls.n	800d3ca <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	693a      	ldr	r2, [r7, #16]
 800d396:	8992      	ldrh	r2, [r2, #12]
 800d398:	1a9a      	subs	r2, r3, r2
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	8992      	ldrh	r2, [r2, #12]
 800d3a6:	441a      	add	r2, r3
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	6919      	ldr	r1, [r3, #16]
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	68f8      	ldr	r0, [r7, #12]
 800d3b8:	f001 f802 	bl	800e3c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d3bc:	2300      	movs	r3, #0
 800d3be:	2200      	movs	r2, #0
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	f004 fc5a 	bl	8011c7c <USBD_LL_PrepareReceive>
 800d3c8:	e040      	b.n	800d44c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	899b      	ldrh	r3, [r3, #12]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d11c      	bne.n	800d412 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	693a      	ldr	r2, [r7, #16]
 800d3de:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d316      	bcc.n	800d412 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	681a      	ldr	r2, [r3, #0]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d20f      	bcs.n	800d412 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	2100      	movs	r1, #0
 800d3f6:	68f8      	ldr	r0, [r7, #12]
 800d3f8:	f000 ffe2 	bl	800e3c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2200      	movs	r2, #0
 800d400:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d404:	2300      	movs	r3, #0
 800d406:	2200      	movs	r2, #0
 800d408:	2100      	movs	r1, #0
 800d40a:	68f8      	ldr	r0, [r7, #12]
 800d40c:	f004 fc36 	bl	8011c7c <USBD_LL_PrepareReceive>
 800d410:	e01c      	b.n	800d44c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	2b03      	cmp	r3, #3
 800d41c:	d10f      	bne.n	800d43e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d009      	beq.n	800d43e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2200      	movs	r2, #0
 800d42e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d438:	68db      	ldr	r3, [r3, #12]
 800d43a:	68f8      	ldr	r0, [r7, #12]
 800d43c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d43e:	2180      	movs	r1, #128	@ 0x80
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	f004 fb71 	bl	8011b28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d446:	68f8      	ldr	r0, [r7, #12]
 800d448:	f000 ffef 	bl	800e42a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d03a      	beq.n	800d4cc <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800d456:	68f8      	ldr	r0, [r7, #12]
 800d458:	f7ff fe30 	bl	800d0bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2200      	movs	r2, #0
 800d460:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d464:	e032      	b.n	800d4cc <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d466:	7afb      	ldrb	r3, [r7, #11]
 800d468:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	4619      	mov	r1, r3
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f000 f986 	bl	800d782 <USBD_CoreFindEP>
 800d476:	4603      	mov	r3, r0
 800d478:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d47a:	7dfb      	ldrb	r3, [r7, #23]
 800d47c:	2bff      	cmp	r3, #255	@ 0xff
 800d47e:	d025      	beq.n	800d4cc <USBD_LL_DataInStage+0x16c>
 800d480:	7dfb      	ldrb	r3, [r7, #23]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d122      	bne.n	800d4cc <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	2b03      	cmp	r3, #3
 800d490:	d11c      	bne.n	800d4cc <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d492:	7dfa      	ldrb	r2, [r7, #23]
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	32ae      	adds	r2, #174	@ 0xae
 800d498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d49c:	695b      	ldr	r3, [r3, #20]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d014      	beq.n	800d4cc <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800d4a2:	7dfa      	ldrb	r2, [r7, #23]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d4aa:	7dfa      	ldrb	r2, [r7, #23]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	32ae      	adds	r2, #174	@ 0xae
 800d4b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4b4:	695b      	ldr	r3, [r3, #20]
 800d4b6:	7afa      	ldrb	r2, [r7, #11]
 800d4b8:	4611      	mov	r1, r2
 800d4ba:	68f8      	ldr	r0, [r7, #12]
 800d4bc:	4798      	blx	r3
 800d4be:	4603      	mov	r3, r0
 800d4c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d4c2:	7dbb      	ldrb	r3, [r7, #22]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d001      	beq.n	800d4cc <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800d4c8:	7dbb      	ldrb	r3, [r7, #22]
 800d4ca:	e000      	b.n	800d4ce <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800d4cc:	2300      	movs	r3, #0
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3718      	adds	r7, #24
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b084      	sub	sp, #16
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d014      	beq.n	800d53c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00e      	beq.n	800d53c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	6852      	ldr	r2, [r2, #4]
 800d52a:	b2d2      	uxtb	r2, r2
 800d52c:	4611      	mov	r1, r2
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	4798      	blx	r3
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d001      	beq.n	800d53c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d538:	2303      	movs	r3, #3
 800d53a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d53c:	2340      	movs	r3, #64	@ 0x40
 800d53e:	2200      	movs	r2, #0
 800d540:	2100      	movs	r1, #0
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f004 faca 	bl	8011adc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2201      	movs	r2, #1
 800d54c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2240      	movs	r2, #64	@ 0x40
 800d554:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d558:	2340      	movs	r3, #64	@ 0x40
 800d55a:	2200      	movs	r2, #0
 800d55c:	2180      	movs	r1, #128	@ 0x80
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f004 fabc 	bl	8011adc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2201      	movs	r2, #1
 800d568:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2240      	movs	r2, #64	@ 0x40
 800d570:	841a      	strh	r2, [r3, #32]

  return ret;
 800d572:	7bfb      	ldrb	r3, [r7, #15]
}
 800d574:	4618      	mov	r0, r3
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	460b      	mov	r3, r1
 800d586:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	78fa      	ldrb	r2, [r7, #3]
 800d58c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d58e:	2300      	movs	r3, #0
}
 800d590:	4618      	mov	r0, r3
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	2b04      	cmp	r3, #4
 800d5ae:	d006      	beq.n	800d5be <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5b6:	b2da      	uxtb	r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2204      	movs	r2, #4
 800d5c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d5c6:	2300      	movs	r3, #0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	370c      	adds	r7, #12
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr

0800d5d4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	2b04      	cmp	r3, #4
 800d5e6:	d106      	bne.n	800d5f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d5f6:	2300      	movs	r3, #0
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	370c      	adds	r7, #12
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d612:	b2db      	uxtb	r3, r3
 800d614:	2b03      	cmp	r3, #3
 800d616:	d110      	bne.n	800d63a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d00b      	beq.n	800d63a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d628:	69db      	ldr	r3, [r3, #28]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d005      	beq.n	800d63a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d634:	69db      	ldr	r3, [r3, #28]
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d63a:	2300      	movs	r3, #0
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3708      	adds	r7, #8
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	460b      	mov	r3, r1
 800d64e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	32ae      	adds	r2, #174	@ 0xae
 800d65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d101      	bne.n	800d666 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d662:	2303      	movs	r3, #3
 800d664:	e01c      	b.n	800d6a0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	2b03      	cmp	r3, #3
 800d670:	d115      	bne.n	800d69e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	32ae      	adds	r2, #174	@ 0xae
 800d67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d680:	6a1b      	ldr	r3, [r3, #32]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00b      	beq.n	800d69e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	32ae      	adds	r2, #174	@ 0xae
 800d690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d694:	6a1b      	ldr	r3, [r3, #32]
 800d696:	78fa      	ldrb	r2, [r7, #3]
 800d698:	4611      	mov	r1, r2
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	32ae      	adds	r2, #174	@ 0xae
 800d6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d101      	bne.n	800d6ca <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d6c6:	2303      	movs	r3, #3
 800d6c8:	e01c      	b.n	800d704 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	d115      	bne.n	800d702 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	32ae      	adds	r2, #174	@ 0xae
 800d6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d00b      	beq.n	800d702 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	32ae      	adds	r2, #174	@ 0xae
 800d6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6fa:	78fa      	ldrb	r2, [r7, #3]
 800d6fc:	4611      	mov	r1, r2
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d702:	2300      	movs	r3, #0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d714:	2300      	movs	r3, #0
}
 800d716:	4618      	mov	r0, r3
 800d718:	370c      	adds	r7, #12
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr

0800d722 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b084      	sub	sp, #16
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d72a:	2300      	movs	r3, #0
 800d72c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2201      	movs	r2, #1
 800d732:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d00e      	beq.n	800d75e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	6852      	ldr	r2, [r2, #4]
 800d74c:	b2d2      	uxtb	r2, r2
 800d74e:	4611      	mov	r1, r2
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	4798      	blx	r3
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d001      	beq.n	800d75e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d75a:	2303      	movs	r3, #3
 800d75c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d760:	4618      	mov	r0, r3
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	460b      	mov	r3, r1
 800d772:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d774:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d776:	4618      	mov	r0, r3
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr

0800d782 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d782:	b480      	push	{r7}
 800d784:	b083      	sub	sp, #12
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
 800d78a:	460b      	mov	r3, r1
 800d78c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d78e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d790:	4618      	mov	r0, r3
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b087      	sub	sp, #28
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d7ba:	8a3b      	ldrh	r3, [r7, #16]
 800d7bc:	021b      	lsls	r3, r3, #8
 800d7be:	b21a      	sxth	r2, r3
 800d7c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	b21b      	sxth	r3, r3
 800d7c8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d7ca:	89fb      	ldrh	r3, [r7, #14]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	371c      	adds	r7, #28
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr

0800d7d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d7ee:	2b40      	cmp	r3, #64	@ 0x40
 800d7f0:	d005      	beq.n	800d7fe <USBD_StdDevReq+0x26>
 800d7f2:	2b40      	cmp	r3, #64	@ 0x40
 800d7f4:	d857      	bhi.n	800d8a6 <USBD_StdDevReq+0xce>
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00f      	beq.n	800d81a <USBD_StdDevReq+0x42>
 800d7fa:	2b20      	cmp	r3, #32
 800d7fc:	d153      	bne.n	800d8a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	32ae      	adds	r2, #174	@ 0xae
 800d808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d80c:	689b      	ldr	r3, [r3, #8]
 800d80e:	6839      	ldr	r1, [r7, #0]
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	4798      	blx	r3
 800d814:	4603      	mov	r3, r0
 800d816:	73fb      	strb	r3, [r7, #15]
      break;
 800d818:	e04a      	b.n	800d8b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	785b      	ldrb	r3, [r3, #1]
 800d81e:	2b09      	cmp	r3, #9
 800d820:	d83b      	bhi.n	800d89a <USBD_StdDevReq+0xc2>
 800d822:	a201      	add	r2, pc, #4	@ (adr r2, 800d828 <USBD_StdDevReq+0x50>)
 800d824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d828:	0800d87d 	.word	0x0800d87d
 800d82c:	0800d891 	.word	0x0800d891
 800d830:	0800d89b 	.word	0x0800d89b
 800d834:	0800d887 	.word	0x0800d887
 800d838:	0800d89b 	.word	0x0800d89b
 800d83c:	0800d85b 	.word	0x0800d85b
 800d840:	0800d851 	.word	0x0800d851
 800d844:	0800d89b 	.word	0x0800d89b
 800d848:	0800d873 	.word	0x0800d873
 800d84c:	0800d865 	.word	0x0800d865
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d850:	6839      	ldr	r1, [r7, #0]
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 fa3e 	bl	800dcd4 <USBD_GetDescriptor>
          break;
 800d858:	e024      	b.n	800d8a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d85a:	6839      	ldr	r1, [r7, #0]
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 fba3 	bl	800dfa8 <USBD_SetAddress>
          break;
 800d862:	e01f      	b.n	800d8a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d864:	6839      	ldr	r1, [r7, #0]
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 fbe2 	bl	800e030 <USBD_SetConfig>
 800d86c:	4603      	mov	r3, r0
 800d86e:	73fb      	strb	r3, [r7, #15]
          break;
 800d870:	e018      	b.n	800d8a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d872:	6839      	ldr	r1, [r7, #0]
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 fc85 	bl	800e184 <USBD_GetConfig>
          break;
 800d87a:	e013      	b.n	800d8a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d87c:	6839      	ldr	r1, [r7, #0]
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 fcb6 	bl	800e1f0 <USBD_GetStatus>
          break;
 800d884:	e00e      	b.n	800d8a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d886:	6839      	ldr	r1, [r7, #0]
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 fce5 	bl	800e258 <USBD_SetFeature>
          break;
 800d88e:	e009      	b.n	800d8a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d890:	6839      	ldr	r1, [r7, #0]
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 fd09 	bl	800e2aa <USBD_ClrFeature>
          break;
 800d898:	e004      	b.n	800d8a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d89a:	6839      	ldr	r1, [r7, #0]
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 fd60 	bl	800e362 <USBD_CtlError>
          break;
 800d8a2:	bf00      	nop
      }
      break;
 800d8a4:	e004      	b.n	800d8b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d8a6:	6839      	ldr	r1, [r7, #0]
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 fd5a 	bl	800e362 <USBD_CtlError>
      break;
 800d8ae:	bf00      	nop
  }

  return ret;
 800d8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop

0800d8bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d8d2:	2b40      	cmp	r3, #64	@ 0x40
 800d8d4:	d005      	beq.n	800d8e2 <USBD_StdItfReq+0x26>
 800d8d6:	2b40      	cmp	r3, #64	@ 0x40
 800d8d8:	d852      	bhi.n	800d980 <USBD_StdItfReq+0xc4>
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d001      	beq.n	800d8e2 <USBD_StdItfReq+0x26>
 800d8de:	2b20      	cmp	r3, #32
 800d8e0:	d14e      	bne.n	800d980 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	2b02      	cmp	r3, #2
 800d8ee:	d840      	bhi.n	800d972 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	889b      	ldrh	r3, [r3, #4]
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d836      	bhi.n	800d968 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	889b      	ldrh	r3, [r3, #4]
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	4619      	mov	r1, r3
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7ff ff30 	bl	800d768 <USBD_CoreFindIF>
 800d908:	4603      	mov	r3, r0
 800d90a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d90c:	7bbb      	ldrb	r3, [r7, #14]
 800d90e:	2bff      	cmp	r3, #255	@ 0xff
 800d910:	d01d      	beq.n	800d94e <USBD_StdItfReq+0x92>
 800d912:	7bbb      	ldrb	r3, [r7, #14]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d11a      	bne.n	800d94e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d918:	7bba      	ldrb	r2, [r7, #14]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	32ae      	adds	r2, #174	@ 0xae
 800d91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00f      	beq.n	800d948 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d928:	7bba      	ldrb	r2, [r7, #14]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d930:	7bba      	ldrb	r2, [r7, #14]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	32ae      	adds	r2, #174	@ 0xae
 800d936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	6839      	ldr	r1, [r7, #0]
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	4798      	blx	r3
 800d942:	4603      	mov	r3, r0
 800d944:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d946:	e004      	b.n	800d952 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d948:	2303      	movs	r3, #3
 800d94a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d94c:	e001      	b.n	800d952 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d94e:	2303      	movs	r3, #3
 800d950:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	88db      	ldrh	r3, [r3, #6]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d110      	bne.n	800d97c <USBD_StdItfReq+0xc0>
 800d95a:	7bfb      	ldrb	r3, [r7, #15]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d10d      	bne.n	800d97c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f000 fd4f 	bl	800e404 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d966:	e009      	b.n	800d97c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d968:	6839      	ldr	r1, [r7, #0]
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 fcf9 	bl	800e362 <USBD_CtlError>
          break;
 800d970:	e004      	b.n	800d97c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d972:	6839      	ldr	r1, [r7, #0]
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 fcf4 	bl	800e362 <USBD_CtlError>
          break;
 800d97a:	e000      	b.n	800d97e <USBD_StdItfReq+0xc2>
          break;
 800d97c:	bf00      	nop
      }
      break;
 800d97e:	e004      	b.n	800d98a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d980:	6839      	ldr	r1, [r7, #0]
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f000 fced 	bl	800e362 <USBD_CtlError>
      break;
 800d988:	bf00      	nop
  }

  return ret;
 800d98a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3710      	adds	r7, #16
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	889b      	ldrh	r3, [r3, #4]
 800d9a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d9b0:	2b40      	cmp	r3, #64	@ 0x40
 800d9b2:	d007      	beq.n	800d9c4 <USBD_StdEPReq+0x30>
 800d9b4:	2b40      	cmp	r3, #64	@ 0x40
 800d9b6:	f200 8181 	bhi.w	800dcbc <USBD_StdEPReq+0x328>
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d02a      	beq.n	800da14 <USBD_StdEPReq+0x80>
 800d9be:	2b20      	cmp	r3, #32
 800d9c0:	f040 817c 	bne.w	800dcbc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d9c4:	7bbb      	ldrb	r3, [r7, #14]
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f7ff feda 	bl	800d782 <USBD_CoreFindEP>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d9d2:	7b7b      	ldrb	r3, [r7, #13]
 800d9d4:	2bff      	cmp	r3, #255	@ 0xff
 800d9d6:	f000 8176 	beq.w	800dcc6 <USBD_StdEPReq+0x332>
 800d9da:	7b7b      	ldrb	r3, [r7, #13]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	f040 8172 	bne.w	800dcc6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800d9e2:	7b7a      	ldrb	r2, [r7, #13]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d9ea:	7b7a      	ldrb	r2, [r7, #13]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	32ae      	adds	r2, #174	@ 0xae
 800d9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9f4:	689b      	ldr	r3, [r3, #8]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	f000 8165 	beq.w	800dcc6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d9fc:	7b7a      	ldrb	r2, [r7, #13]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	32ae      	adds	r2, #174	@ 0xae
 800da02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da06:	689b      	ldr	r3, [r3, #8]
 800da08:	6839      	ldr	r1, [r7, #0]
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	4798      	blx	r3
 800da0e:	4603      	mov	r3, r0
 800da10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800da12:	e158      	b.n	800dcc6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	785b      	ldrb	r3, [r3, #1]
 800da18:	2b03      	cmp	r3, #3
 800da1a:	d008      	beq.n	800da2e <USBD_StdEPReq+0x9a>
 800da1c:	2b03      	cmp	r3, #3
 800da1e:	f300 8147 	bgt.w	800dcb0 <USBD_StdEPReq+0x31c>
 800da22:	2b00      	cmp	r3, #0
 800da24:	f000 809b 	beq.w	800db5e <USBD_StdEPReq+0x1ca>
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d03c      	beq.n	800daa6 <USBD_StdEPReq+0x112>
 800da2c:	e140      	b.n	800dcb0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da34:	b2db      	uxtb	r3, r3
 800da36:	2b02      	cmp	r3, #2
 800da38:	d002      	beq.n	800da40 <USBD_StdEPReq+0xac>
 800da3a:	2b03      	cmp	r3, #3
 800da3c:	d016      	beq.n	800da6c <USBD_StdEPReq+0xd8>
 800da3e:	e02c      	b.n	800da9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da40:	7bbb      	ldrb	r3, [r7, #14]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00d      	beq.n	800da62 <USBD_StdEPReq+0xce>
 800da46:	7bbb      	ldrb	r3, [r7, #14]
 800da48:	2b80      	cmp	r3, #128	@ 0x80
 800da4a:	d00a      	beq.n	800da62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800da4c:	7bbb      	ldrb	r3, [r7, #14]
 800da4e:	4619      	mov	r1, r3
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f004 f869 	bl	8011b28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800da56:	2180      	movs	r1, #128	@ 0x80
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f004 f865 	bl	8011b28 <USBD_LL_StallEP>
 800da5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800da60:	e020      	b.n	800daa4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800da62:	6839      	ldr	r1, [r7, #0]
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f000 fc7c 	bl	800e362 <USBD_CtlError>
              break;
 800da6a:	e01b      	b.n	800daa4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	885b      	ldrh	r3, [r3, #2]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d10e      	bne.n	800da92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800da74:	7bbb      	ldrb	r3, [r7, #14]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d00b      	beq.n	800da92 <USBD_StdEPReq+0xfe>
 800da7a:	7bbb      	ldrb	r3, [r7, #14]
 800da7c:	2b80      	cmp	r3, #128	@ 0x80
 800da7e:	d008      	beq.n	800da92 <USBD_StdEPReq+0xfe>
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	88db      	ldrh	r3, [r3, #6]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d104      	bne.n	800da92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800da88:	7bbb      	ldrb	r3, [r7, #14]
 800da8a:	4619      	mov	r1, r3
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f004 f84b 	bl	8011b28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 fcb6 	bl	800e404 <USBD_CtlSendStatus>

              break;
 800da98:	e004      	b.n	800daa4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800da9a:	6839      	ldr	r1, [r7, #0]
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f000 fc60 	bl	800e362 <USBD_CtlError>
              break;
 800daa2:	bf00      	nop
          }
          break;
 800daa4:	e109      	b.n	800dcba <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800daac:	b2db      	uxtb	r3, r3
 800daae:	2b02      	cmp	r3, #2
 800dab0:	d002      	beq.n	800dab8 <USBD_StdEPReq+0x124>
 800dab2:	2b03      	cmp	r3, #3
 800dab4:	d016      	beq.n	800dae4 <USBD_StdEPReq+0x150>
 800dab6:	e04b      	b.n	800db50 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dab8:	7bbb      	ldrb	r3, [r7, #14]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00d      	beq.n	800dada <USBD_StdEPReq+0x146>
 800dabe:	7bbb      	ldrb	r3, [r7, #14]
 800dac0:	2b80      	cmp	r3, #128	@ 0x80
 800dac2:	d00a      	beq.n	800dada <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dac4:	7bbb      	ldrb	r3, [r7, #14]
 800dac6:	4619      	mov	r1, r3
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f004 f82d 	bl	8011b28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dace:	2180      	movs	r1, #128	@ 0x80
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f004 f829 	bl	8011b28 <USBD_LL_StallEP>
 800dad6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dad8:	e040      	b.n	800db5c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dada:	6839      	ldr	r1, [r7, #0]
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f000 fc40 	bl	800e362 <USBD_CtlError>
              break;
 800dae2:	e03b      	b.n	800db5c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	885b      	ldrh	r3, [r3, #2]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d136      	bne.n	800db5a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800daec:	7bbb      	ldrb	r3, [r7, #14]
 800daee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d004      	beq.n	800db00 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800daf6:	7bbb      	ldrb	r3, [r7, #14]
 800daf8:	4619      	mov	r1, r3
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f004 f833 	bl	8011b66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 fc7f 	bl	800e404 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800db06:	7bbb      	ldrb	r3, [r7, #14]
 800db08:	4619      	mov	r1, r3
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f7ff fe39 	bl	800d782 <USBD_CoreFindEP>
 800db10:	4603      	mov	r3, r0
 800db12:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db14:	7b7b      	ldrb	r3, [r7, #13]
 800db16:	2bff      	cmp	r3, #255	@ 0xff
 800db18:	d01f      	beq.n	800db5a <USBD_StdEPReq+0x1c6>
 800db1a:	7b7b      	ldrb	r3, [r7, #13]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d11c      	bne.n	800db5a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800db20:	7b7a      	ldrb	r2, [r7, #13]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800db28:	7b7a      	ldrb	r2, [r7, #13]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	32ae      	adds	r2, #174	@ 0xae
 800db2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db32:	689b      	ldr	r3, [r3, #8]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d010      	beq.n	800db5a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800db38:	7b7a      	ldrb	r2, [r7, #13]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	32ae      	adds	r2, #174	@ 0xae
 800db3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	6839      	ldr	r1, [r7, #0]
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	4798      	blx	r3
 800db4a:	4603      	mov	r3, r0
 800db4c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800db4e:	e004      	b.n	800db5a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800db50:	6839      	ldr	r1, [r7, #0]
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 fc05 	bl	800e362 <USBD_CtlError>
              break;
 800db58:	e000      	b.n	800db5c <USBD_StdEPReq+0x1c8>
              break;
 800db5a:	bf00      	nop
          }
          break;
 800db5c:	e0ad      	b.n	800dcba <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db64:	b2db      	uxtb	r3, r3
 800db66:	2b02      	cmp	r3, #2
 800db68:	d002      	beq.n	800db70 <USBD_StdEPReq+0x1dc>
 800db6a:	2b03      	cmp	r3, #3
 800db6c:	d033      	beq.n	800dbd6 <USBD_StdEPReq+0x242>
 800db6e:	e099      	b.n	800dca4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db70:	7bbb      	ldrb	r3, [r7, #14]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d007      	beq.n	800db86 <USBD_StdEPReq+0x1f2>
 800db76:	7bbb      	ldrb	r3, [r7, #14]
 800db78:	2b80      	cmp	r3, #128	@ 0x80
 800db7a:	d004      	beq.n	800db86 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800db7c:	6839      	ldr	r1, [r7, #0]
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 fbef 	bl	800e362 <USBD_CtlError>
                break;
 800db84:	e093      	b.n	800dcae <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	da0b      	bge.n	800dba6 <USBD_StdEPReq+0x212>
 800db8e:	7bbb      	ldrb	r3, [r7, #14]
 800db90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800db94:	4613      	mov	r3, r2
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	4413      	add	r3, r2
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	3310      	adds	r3, #16
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	4413      	add	r3, r2
 800dba2:	3304      	adds	r3, #4
 800dba4:	e00b      	b.n	800dbbe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dba6:	7bbb      	ldrb	r3, [r7, #14]
 800dba8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dbac:	4613      	mov	r3, r2
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	4413      	add	r3, r2
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	4413      	add	r3, r2
 800dbbc:	3304      	adds	r3, #4
 800dbbe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	330e      	adds	r3, #14
 800dbca:	2202      	movs	r2, #2
 800dbcc:	4619      	mov	r1, r3
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 fbd8 	bl	800e384 <USBD_CtlSendData>
              break;
 800dbd4:	e06b      	b.n	800dcae <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dbd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	da11      	bge.n	800dc02 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dbde:	7bbb      	ldrb	r3, [r7, #14]
 800dbe0:	f003 020f 	and.w	r2, r3, #15
 800dbe4:	6879      	ldr	r1, [r7, #4]
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	009b      	lsls	r3, r3, #2
 800dbea:	4413      	add	r3, r2
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	440b      	add	r3, r1
 800dbf0:	3323      	adds	r3, #35	@ 0x23
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d117      	bne.n	800dc28 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800dbf8:	6839      	ldr	r1, [r7, #0]
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 fbb1 	bl	800e362 <USBD_CtlError>
                  break;
 800dc00:	e055      	b.n	800dcae <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dc02:	7bbb      	ldrb	r3, [r7, #14]
 800dc04:	f003 020f 	and.w	r2, r3, #15
 800dc08:	6879      	ldr	r1, [r7, #4]
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	4413      	add	r3, r2
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	440b      	add	r3, r1
 800dc14:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d104      	bne.n	800dc28 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800dc1e:	6839      	ldr	r1, [r7, #0]
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 fb9e 	bl	800e362 <USBD_CtlError>
                  break;
 800dc26:	e042      	b.n	800dcae <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	da0b      	bge.n	800dc48 <USBD_StdEPReq+0x2b4>
 800dc30:	7bbb      	ldrb	r3, [r7, #14]
 800dc32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dc36:	4613      	mov	r3, r2
 800dc38:	009b      	lsls	r3, r3, #2
 800dc3a:	4413      	add	r3, r2
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	3310      	adds	r3, #16
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	4413      	add	r3, r2
 800dc44:	3304      	adds	r3, #4
 800dc46:	e00b      	b.n	800dc60 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dc48:	7bbb      	ldrb	r3, [r7, #14]
 800dc4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc4e:	4613      	mov	r3, r2
 800dc50:	009b      	lsls	r3, r3, #2
 800dc52:	4413      	add	r3, r2
 800dc54:	009b      	lsls	r3, r3, #2
 800dc56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dc5a:	687a      	ldr	r2, [r7, #4]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	3304      	adds	r3, #4
 800dc60:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dc62:	7bbb      	ldrb	r3, [r7, #14]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d002      	beq.n	800dc6e <USBD_StdEPReq+0x2da>
 800dc68:	7bbb      	ldrb	r3, [r7, #14]
 800dc6a:	2b80      	cmp	r3, #128	@ 0x80
 800dc6c:	d103      	bne.n	800dc76 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	2200      	movs	r2, #0
 800dc72:	739a      	strb	r2, [r3, #14]
 800dc74:	e00e      	b.n	800dc94 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dc76:	7bbb      	ldrb	r3, [r7, #14]
 800dc78:	4619      	mov	r1, r3
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f003 ff92 	bl	8011ba4 <USBD_LL_IsStallEP>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d003      	beq.n	800dc8e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	2201      	movs	r2, #1
 800dc8a:	739a      	strb	r2, [r3, #14]
 800dc8c:	e002      	b.n	800dc94 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	2200      	movs	r2, #0
 800dc92:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	330e      	adds	r3, #14
 800dc98:	2202      	movs	r2, #2
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 fb71 	bl	800e384 <USBD_CtlSendData>
              break;
 800dca2:	e004      	b.n	800dcae <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800dca4:	6839      	ldr	r1, [r7, #0]
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 fb5b 	bl	800e362 <USBD_CtlError>
              break;
 800dcac:	bf00      	nop
          }
          break;
 800dcae:	e004      	b.n	800dcba <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800dcb0:	6839      	ldr	r1, [r7, #0]
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f000 fb55 	bl	800e362 <USBD_CtlError>
          break;
 800dcb8:	bf00      	nop
      }
      break;
 800dcba:	e005      	b.n	800dcc8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800dcbc:	6839      	ldr	r1, [r7, #0]
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 fb4f 	bl	800e362 <USBD_CtlError>
      break;
 800dcc4:	e000      	b.n	800dcc8 <USBD_StdEPReq+0x334>
      break;
 800dcc6:	bf00      	nop
  }

  return ret;
 800dcc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
	...

0800dcd4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dcde:	2300      	movs	r3, #0
 800dce0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dce2:	2300      	movs	r3, #0
 800dce4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dce6:	2300      	movs	r3, #0
 800dce8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	885b      	ldrh	r3, [r3, #2]
 800dcee:	0a1b      	lsrs	r3, r3, #8
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	3b01      	subs	r3, #1
 800dcf4:	2b06      	cmp	r3, #6
 800dcf6:	f200 8128 	bhi.w	800df4a <USBD_GetDescriptor+0x276>
 800dcfa:	a201      	add	r2, pc, #4	@ (adr r2, 800dd00 <USBD_GetDescriptor+0x2c>)
 800dcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd00:	0800dd1d 	.word	0x0800dd1d
 800dd04:	0800dd35 	.word	0x0800dd35
 800dd08:	0800dd75 	.word	0x0800dd75
 800dd0c:	0800df4b 	.word	0x0800df4b
 800dd10:	0800df4b 	.word	0x0800df4b
 800dd14:	0800deeb 	.word	0x0800deeb
 800dd18:	0800df17 	.word	0x0800df17
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	7c12      	ldrb	r2, [r2, #16]
 800dd28:	f107 0108 	add.w	r1, r7, #8
 800dd2c:	4610      	mov	r0, r2
 800dd2e:	4798      	blx	r3
 800dd30:	60f8      	str	r0, [r7, #12]
      break;
 800dd32:	e112      	b.n	800df5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	7c1b      	ldrb	r3, [r3, #16]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d10d      	bne.n	800dd58 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd44:	f107 0208 	add.w	r2, r7, #8
 800dd48:	4610      	mov	r0, r2
 800dd4a:	4798      	blx	r3
 800dd4c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	3301      	adds	r3, #1
 800dd52:	2202      	movs	r2, #2
 800dd54:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dd56:	e100      	b.n	800df5a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd60:	f107 0208 	add.w	r2, r7, #8
 800dd64:	4610      	mov	r0, r2
 800dd66:	4798      	blx	r3
 800dd68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	2202      	movs	r2, #2
 800dd70:	701a      	strb	r2, [r3, #0]
      break;
 800dd72:	e0f2      	b.n	800df5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	885b      	ldrh	r3, [r3, #2]
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	2b05      	cmp	r3, #5
 800dd7c:	f200 80ac 	bhi.w	800ded8 <USBD_GetDescriptor+0x204>
 800dd80:	a201      	add	r2, pc, #4	@ (adr r2, 800dd88 <USBD_GetDescriptor+0xb4>)
 800dd82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd86:	bf00      	nop
 800dd88:	0800dda1 	.word	0x0800dda1
 800dd8c:	0800ddd5 	.word	0x0800ddd5
 800dd90:	0800de09 	.word	0x0800de09
 800dd94:	0800de3d 	.word	0x0800de3d
 800dd98:	0800de71 	.word	0x0800de71
 800dd9c:	0800dea5 	.word	0x0800dea5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d00b      	beq.n	800ddc4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	687a      	ldr	r2, [r7, #4]
 800ddb6:	7c12      	ldrb	r2, [r2, #16]
 800ddb8:	f107 0108 	add.w	r1, r7, #8
 800ddbc:	4610      	mov	r0, r2
 800ddbe:	4798      	blx	r3
 800ddc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddc2:	e091      	b.n	800dee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ddc4:	6839      	ldr	r1, [r7, #0]
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 facb 	bl	800e362 <USBD_CtlError>
            err++;
 800ddcc:	7afb      	ldrb	r3, [r7, #11]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	72fb      	strb	r3, [r7, #11]
          break;
 800ddd2:	e089      	b.n	800dee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d00b      	beq.n	800ddf8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	7c12      	ldrb	r2, [r2, #16]
 800ddec:	f107 0108 	add.w	r1, r7, #8
 800ddf0:	4610      	mov	r0, r2
 800ddf2:	4798      	blx	r3
 800ddf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddf6:	e077      	b.n	800dee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ddf8:	6839      	ldr	r1, [r7, #0]
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 fab1 	bl	800e362 <USBD_CtlError>
            err++;
 800de00:	7afb      	ldrb	r3, [r7, #11]
 800de02:	3301      	adds	r3, #1
 800de04:	72fb      	strb	r3, [r7, #11]
          break;
 800de06:	e06f      	b.n	800dee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d00b      	beq.n	800de2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	7c12      	ldrb	r2, [r2, #16]
 800de20:	f107 0108 	add.w	r1, r7, #8
 800de24:	4610      	mov	r0, r2
 800de26:	4798      	blx	r3
 800de28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de2a:	e05d      	b.n	800dee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de2c:	6839      	ldr	r1, [r7, #0]
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 fa97 	bl	800e362 <USBD_CtlError>
            err++;
 800de34:	7afb      	ldrb	r3, [r7, #11]
 800de36:	3301      	adds	r3, #1
 800de38:	72fb      	strb	r3, [r7, #11]
          break;
 800de3a:	e055      	b.n	800dee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de42:	691b      	ldr	r3, [r3, #16]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d00b      	beq.n	800de60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de4e:	691b      	ldr	r3, [r3, #16]
 800de50:	687a      	ldr	r2, [r7, #4]
 800de52:	7c12      	ldrb	r2, [r2, #16]
 800de54:	f107 0108 	add.w	r1, r7, #8
 800de58:	4610      	mov	r0, r2
 800de5a:	4798      	blx	r3
 800de5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de5e:	e043      	b.n	800dee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de60:	6839      	ldr	r1, [r7, #0]
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f000 fa7d 	bl	800e362 <USBD_CtlError>
            err++;
 800de68:	7afb      	ldrb	r3, [r7, #11]
 800de6a:	3301      	adds	r3, #1
 800de6c:	72fb      	strb	r3, [r7, #11]
          break;
 800de6e:	e03b      	b.n	800dee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de76:	695b      	ldr	r3, [r3, #20]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d00b      	beq.n	800de94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de82:	695b      	ldr	r3, [r3, #20]
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	7c12      	ldrb	r2, [r2, #16]
 800de88:	f107 0108 	add.w	r1, r7, #8
 800de8c:	4610      	mov	r0, r2
 800de8e:	4798      	blx	r3
 800de90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de92:	e029      	b.n	800dee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de94:	6839      	ldr	r1, [r7, #0]
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 fa63 	bl	800e362 <USBD_CtlError>
            err++;
 800de9c:	7afb      	ldrb	r3, [r7, #11]
 800de9e:	3301      	adds	r3, #1
 800dea0:	72fb      	strb	r3, [r7, #11]
          break;
 800dea2:	e021      	b.n	800dee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800deaa:	699b      	ldr	r3, [r3, #24]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00b      	beq.n	800dec8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800deb6:	699b      	ldr	r3, [r3, #24]
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	7c12      	ldrb	r2, [r2, #16]
 800debc:	f107 0108 	add.w	r1, r7, #8
 800dec0:	4610      	mov	r0, r2
 800dec2:	4798      	blx	r3
 800dec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dec6:	e00f      	b.n	800dee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dec8:	6839      	ldr	r1, [r7, #0]
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 fa49 	bl	800e362 <USBD_CtlError>
            err++;
 800ded0:	7afb      	ldrb	r3, [r7, #11]
 800ded2:	3301      	adds	r3, #1
 800ded4:	72fb      	strb	r3, [r7, #11]
          break;
 800ded6:	e007      	b.n	800dee8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ded8:	6839      	ldr	r1, [r7, #0]
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 fa41 	bl	800e362 <USBD_CtlError>
          err++;
 800dee0:	7afb      	ldrb	r3, [r7, #11]
 800dee2:	3301      	adds	r3, #1
 800dee4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dee6:	bf00      	nop
      }
      break;
 800dee8:	e037      	b.n	800df5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	7c1b      	ldrb	r3, [r3, #16]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d109      	bne.n	800df06 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800def8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800defa:	f107 0208 	add.w	r2, r7, #8
 800defe:	4610      	mov	r0, r2
 800df00:	4798      	blx	r3
 800df02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df04:	e029      	b.n	800df5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800df06:	6839      	ldr	r1, [r7, #0]
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 fa2a 	bl	800e362 <USBD_CtlError>
        err++;
 800df0e:	7afb      	ldrb	r3, [r7, #11]
 800df10:	3301      	adds	r3, #1
 800df12:	72fb      	strb	r3, [r7, #11]
      break;
 800df14:	e021      	b.n	800df5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	7c1b      	ldrb	r3, [r3, #16]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d10d      	bne.n	800df3a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df26:	f107 0208 	add.w	r2, r7, #8
 800df2a:	4610      	mov	r0, r2
 800df2c:	4798      	blx	r3
 800df2e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	3301      	adds	r3, #1
 800df34:	2207      	movs	r2, #7
 800df36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df38:	e00f      	b.n	800df5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800df3a:	6839      	ldr	r1, [r7, #0]
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f000 fa10 	bl	800e362 <USBD_CtlError>
        err++;
 800df42:	7afb      	ldrb	r3, [r7, #11]
 800df44:	3301      	adds	r3, #1
 800df46:	72fb      	strb	r3, [r7, #11]
      break;
 800df48:	e007      	b.n	800df5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800df4a:	6839      	ldr	r1, [r7, #0]
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f000 fa08 	bl	800e362 <USBD_CtlError>
      err++;
 800df52:	7afb      	ldrb	r3, [r7, #11]
 800df54:	3301      	adds	r3, #1
 800df56:	72fb      	strb	r3, [r7, #11]
      break;
 800df58:	bf00      	nop
  }

  if (err != 0U)
 800df5a:	7afb      	ldrb	r3, [r7, #11]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d11e      	bne.n	800df9e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	88db      	ldrh	r3, [r3, #6]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d016      	beq.n	800df96 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800df68:	893b      	ldrh	r3, [r7, #8]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00e      	beq.n	800df8c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	88da      	ldrh	r2, [r3, #6]
 800df72:	893b      	ldrh	r3, [r7, #8]
 800df74:	4293      	cmp	r3, r2
 800df76:	bf28      	it	cs
 800df78:	4613      	movcs	r3, r2
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800df7e:	893b      	ldrh	r3, [r7, #8]
 800df80:	461a      	mov	r2, r3
 800df82:	68f9      	ldr	r1, [r7, #12]
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 f9fd 	bl	800e384 <USBD_CtlSendData>
 800df8a:	e009      	b.n	800dfa0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800df8c:	6839      	ldr	r1, [r7, #0]
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 f9e7 	bl	800e362 <USBD_CtlError>
 800df94:	e004      	b.n	800dfa0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f000 fa34 	bl	800e404 <USBD_CtlSendStatus>
 800df9c:	e000      	b.n	800dfa0 <USBD_GetDescriptor+0x2cc>
    return;
 800df9e:	bf00      	nop
  }
}
 800dfa0:	3710      	adds	r7, #16
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop

0800dfa8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	889b      	ldrh	r3, [r3, #4]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d131      	bne.n	800e01e <USBD_SetAddress+0x76>
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	88db      	ldrh	r3, [r3, #6]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d12d      	bne.n	800e01e <USBD_SetAddress+0x76>
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	885b      	ldrh	r3, [r3, #2]
 800dfc6:	2b7f      	cmp	r3, #127	@ 0x7f
 800dfc8:	d829      	bhi.n	800e01e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	885b      	ldrh	r3, [r3, #2]
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dfd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	2b03      	cmp	r3, #3
 800dfe0:	d104      	bne.n	800dfec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dfe2:	6839      	ldr	r1, [r7, #0]
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f000 f9bc 	bl	800e362 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfea:	e01d      	b.n	800e028 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	7bfa      	ldrb	r2, [r7, #15]
 800dff0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dff4:	7bfb      	ldrb	r3, [r7, #15]
 800dff6:	4619      	mov	r1, r3
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f003 fdff 	bl	8011bfc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 fa00 	bl	800e404 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e004:	7bfb      	ldrb	r3, [r7, #15]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d004      	beq.n	800e014 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2202      	movs	r2, #2
 800e00e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e012:	e009      	b.n	800e028 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2201      	movs	r2, #1
 800e018:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e01c:	e004      	b.n	800e028 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e01e:	6839      	ldr	r1, [r7, #0]
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 f99e 	bl	800e362 <USBD_CtlError>
  }
}
 800e026:	bf00      	nop
 800e028:	bf00      	nop
 800e02a:	3710      	adds	r7, #16
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e03a:	2300      	movs	r3, #0
 800e03c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	885b      	ldrh	r3, [r3, #2]
 800e042:	b2da      	uxtb	r2, r3
 800e044:	4b4e      	ldr	r3, [pc, #312]	@ (800e180 <USBD_SetConfig+0x150>)
 800e046:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e048:	4b4d      	ldr	r3, [pc, #308]	@ (800e180 <USBD_SetConfig+0x150>)
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d905      	bls.n	800e05c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e050:	6839      	ldr	r1, [r7, #0]
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 f985 	bl	800e362 <USBD_CtlError>
    return USBD_FAIL;
 800e058:	2303      	movs	r3, #3
 800e05a:	e08c      	b.n	800e176 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e062:	b2db      	uxtb	r3, r3
 800e064:	2b02      	cmp	r3, #2
 800e066:	d002      	beq.n	800e06e <USBD_SetConfig+0x3e>
 800e068:	2b03      	cmp	r3, #3
 800e06a:	d029      	beq.n	800e0c0 <USBD_SetConfig+0x90>
 800e06c:	e075      	b.n	800e15a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e06e:	4b44      	ldr	r3, [pc, #272]	@ (800e180 <USBD_SetConfig+0x150>)
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d020      	beq.n	800e0b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e076:	4b42      	ldr	r3, [pc, #264]	@ (800e180 <USBD_SetConfig+0x150>)
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	461a      	mov	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e080:	4b3f      	ldr	r3, [pc, #252]	@ (800e180 <USBD_SetConfig+0x150>)
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	4619      	mov	r1, r3
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f7ff f823 	bl	800d0d2 <USBD_SetClassConfig>
 800e08c:	4603      	mov	r3, r0
 800e08e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e090:	7bfb      	ldrb	r3, [r7, #15]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d008      	beq.n	800e0a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e096:	6839      	ldr	r1, [r7, #0]
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 f962 	bl	800e362 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2202      	movs	r2, #2
 800e0a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e0a6:	e065      	b.n	800e174 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 f9ab 	bl	800e404 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2203      	movs	r2, #3
 800e0b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e0b6:	e05d      	b.n	800e174 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f000 f9a3 	bl	800e404 <USBD_CtlSendStatus>
      break;
 800e0be:	e059      	b.n	800e174 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e0c0:	4b2f      	ldr	r3, [pc, #188]	@ (800e180 <USBD_SetConfig+0x150>)
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d112      	bne.n	800e0ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2202      	movs	r2, #2
 800e0cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e0d0:	4b2b      	ldr	r3, [pc, #172]	@ (800e180 <USBD_SetConfig+0x150>)
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e0da:	4b29      	ldr	r3, [pc, #164]	@ (800e180 <USBD_SetConfig+0x150>)
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	4619      	mov	r1, r3
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f7ff f812 	bl	800d10a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 f98c 	bl	800e404 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e0ec:	e042      	b.n	800e174 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e0ee:	4b24      	ldr	r3, [pc, #144]	@ (800e180 <USBD_SetConfig+0x150>)
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d02a      	beq.n	800e152 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	b2db      	uxtb	r3, r3
 800e102:	4619      	mov	r1, r3
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f7ff f800 	bl	800d10a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e10a:	4b1d      	ldr	r3, [pc, #116]	@ (800e180 <USBD_SetConfig+0x150>)
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	461a      	mov	r2, r3
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e114:	4b1a      	ldr	r3, [pc, #104]	@ (800e180 <USBD_SetConfig+0x150>)
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	4619      	mov	r1, r3
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f7fe ffd9 	bl	800d0d2 <USBD_SetClassConfig>
 800e120:	4603      	mov	r3, r0
 800e122:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e124:	7bfb      	ldrb	r3, [r7, #15]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d00f      	beq.n	800e14a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e12a:	6839      	ldr	r1, [r7, #0]
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f000 f918 	bl	800e362 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	b2db      	uxtb	r3, r3
 800e138:	4619      	mov	r1, r3
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f7fe ffe5 	bl	800d10a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2202      	movs	r2, #2
 800e144:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e148:	e014      	b.n	800e174 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 f95a 	bl	800e404 <USBD_CtlSendStatus>
      break;
 800e150:	e010      	b.n	800e174 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f000 f956 	bl	800e404 <USBD_CtlSendStatus>
      break;
 800e158:	e00c      	b.n	800e174 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e15a:	6839      	ldr	r1, [r7, #0]
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f000 f900 	bl	800e362 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e162:	4b07      	ldr	r3, [pc, #28]	@ (800e180 <USBD_SetConfig+0x150>)
 800e164:	781b      	ldrb	r3, [r3, #0]
 800e166:	4619      	mov	r1, r3
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f7fe ffce 	bl	800d10a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e16e:	2303      	movs	r3, #3
 800e170:	73fb      	strb	r3, [r7, #15]
      break;
 800e172:	bf00      	nop
  }

  return ret;
 800e174:	7bfb      	ldrb	r3, [r7, #15]
}
 800e176:	4618      	mov	r0, r3
 800e178:	3710      	adds	r7, #16
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	20003fb2 	.word	0x20003fb2

0800e184 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	88db      	ldrh	r3, [r3, #6]
 800e192:	2b01      	cmp	r3, #1
 800e194:	d004      	beq.n	800e1a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e196:	6839      	ldr	r1, [r7, #0]
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f000 f8e2 	bl	800e362 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e19e:	e023      	b.n	800e1e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	2b02      	cmp	r3, #2
 800e1aa:	dc02      	bgt.n	800e1b2 <USBD_GetConfig+0x2e>
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	dc03      	bgt.n	800e1b8 <USBD_GetConfig+0x34>
 800e1b0:	e015      	b.n	800e1de <USBD_GetConfig+0x5a>
 800e1b2:	2b03      	cmp	r3, #3
 800e1b4:	d00b      	beq.n	800e1ce <USBD_GetConfig+0x4a>
 800e1b6:	e012      	b.n	800e1de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	3308      	adds	r3, #8
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f000 f8dc 	bl	800e384 <USBD_CtlSendData>
        break;
 800e1cc:	e00c      	b.n	800e1e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	3304      	adds	r3, #4
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 f8d4 	bl	800e384 <USBD_CtlSendData>
        break;
 800e1dc:	e004      	b.n	800e1e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e1de:	6839      	ldr	r1, [r7, #0]
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f000 f8be 	bl	800e362 <USBD_CtlError>
        break;
 800e1e6:	bf00      	nop
}
 800e1e8:	bf00      	nop
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e200:	b2db      	uxtb	r3, r3
 800e202:	3b01      	subs	r3, #1
 800e204:	2b02      	cmp	r3, #2
 800e206:	d81e      	bhi.n	800e246 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	88db      	ldrh	r3, [r3, #6]
 800e20c:	2b02      	cmp	r3, #2
 800e20e:	d004      	beq.n	800e21a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e210:	6839      	ldr	r1, [r7, #0]
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 f8a5 	bl	800e362 <USBD_CtlError>
        break;
 800e218:	e01a      	b.n	800e250 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2201      	movs	r2, #1
 800e21e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e226:	2b00      	cmp	r3, #0
 800e228:	d005      	beq.n	800e236 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	68db      	ldr	r3, [r3, #12]
 800e22e:	f043 0202 	orr.w	r2, r3, #2
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	330c      	adds	r3, #12
 800e23a:	2202      	movs	r2, #2
 800e23c:	4619      	mov	r1, r3
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f000 f8a0 	bl	800e384 <USBD_CtlSendData>
      break;
 800e244:	e004      	b.n	800e250 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e246:	6839      	ldr	r1, [r7, #0]
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f000 f88a 	bl	800e362 <USBD_CtlError>
      break;
 800e24e:	bf00      	nop
  }
}
 800e250:	bf00      	nop
 800e252:	3708      	adds	r7, #8
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	885b      	ldrh	r3, [r3, #2]
 800e266:	2b01      	cmp	r3, #1
 800e268:	d107      	bne.n	800e27a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2201      	movs	r2, #1
 800e26e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 f8c6 	bl	800e404 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e278:	e013      	b.n	800e2a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	885b      	ldrh	r3, [r3, #2]
 800e27e:	2b02      	cmp	r3, #2
 800e280:	d10b      	bne.n	800e29a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	889b      	ldrh	r3, [r3, #4]
 800e286:	0a1b      	lsrs	r3, r3, #8
 800e288:	b29b      	uxth	r3, r3
 800e28a:	b2da      	uxtb	r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f000 f8b6 	bl	800e404 <USBD_CtlSendStatus>
}
 800e298:	e003      	b.n	800e2a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e29a:	6839      	ldr	r1, [r7, #0]
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f000 f860 	bl	800e362 <USBD_CtlError>
}
 800e2a2:	bf00      	nop
 800e2a4:	3708      	adds	r7, #8
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}

0800e2aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b082      	sub	sp, #8
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
 800e2b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2ba:	b2db      	uxtb	r3, r3
 800e2bc:	3b01      	subs	r3, #1
 800e2be:	2b02      	cmp	r3, #2
 800e2c0:	d80b      	bhi.n	800e2da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	885b      	ldrh	r3, [r3, #2]
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d10c      	bne.n	800e2e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 f896 	bl	800e404 <USBD_CtlSendStatus>
      }
      break;
 800e2d8:	e004      	b.n	800e2e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e2da:	6839      	ldr	r1, [r7, #0]
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f000 f840 	bl	800e362 <USBD_CtlError>
      break;
 800e2e2:	e000      	b.n	800e2e6 <USBD_ClrFeature+0x3c>
      break;
 800e2e4:	bf00      	nop
  }
}
 800e2e6:	bf00      	nop
 800e2e8:	3708      	adds	r7, #8
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e2ee:	b580      	push	{r7, lr}
 800e2f0:	b084      	sub	sp, #16
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
 800e2f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	781a      	ldrb	r2, [r3, #0]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	3301      	adds	r3, #1
 800e308:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	781a      	ldrb	r2, [r3, #0]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	3301      	adds	r3, #1
 800e316:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e318:	68f8      	ldr	r0, [r7, #12]
 800e31a:	f7ff fa3f 	bl	800d79c <SWAPBYTE>
 800e31e:	4603      	mov	r3, r0
 800e320:	461a      	mov	r2, r3
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	3301      	adds	r3, #1
 800e32a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	3301      	adds	r3, #1
 800e330:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e332:	68f8      	ldr	r0, [r7, #12]
 800e334:	f7ff fa32 	bl	800d79c <SWAPBYTE>
 800e338:	4603      	mov	r3, r0
 800e33a:	461a      	mov	r2, r3
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	3301      	adds	r3, #1
 800e344:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	3301      	adds	r3, #1
 800e34a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f7ff fa25 	bl	800d79c <SWAPBYTE>
 800e352:	4603      	mov	r3, r0
 800e354:	461a      	mov	r2, r3
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	80da      	strh	r2, [r3, #6]
}
 800e35a:	bf00      	nop
 800e35c:	3710      	adds	r7, #16
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b082      	sub	sp, #8
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
 800e36a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e36c:	2180      	movs	r1, #128	@ 0x80
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f003 fbda 	bl	8011b28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e374:	2100      	movs	r1, #0
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f003 fbd6 	bl	8011b28 <USBD_LL_StallEP>
}
 800e37c:	bf00      	nop
 800e37e:	3708      	adds	r7, #8
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b084      	sub	sp, #16
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2202      	movs	r2, #2
 800e394:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	687a      	ldr	r2, [r7, #4]
 800e39c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	68ba      	ldr	r2, [r7, #8]
 800e3a2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	68ba      	ldr	r2, [r7, #8]
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	68f8      	ldr	r0, [r7, #12]
 800e3b2:	f003 fc42 	bl	8011c3a <USBD_LL_Transmit>

  return USBD_OK;
 800e3b6:	2300      	movs	r3, #0
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	60b9      	str	r1, [r7, #8]
 800e3ca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	68ba      	ldr	r2, [r7, #8]
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	68f8      	ldr	r0, [r7, #12]
 800e3d4:	f003 fc31 	bl	8011c3a <USBD_LL_Transmit>

  return USBD_OK;
 800e3d8:	2300      	movs	r3, #0
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	3710      	adds	r7, #16
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e3e2:	b580      	push	{r7, lr}
 800e3e4:	b084      	sub	sp, #16
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	60f8      	str	r0, [r7, #12]
 800e3ea:	60b9      	str	r1, [r7, #8]
 800e3ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	68ba      	ldr	r2, [r7, #8]
 800e3f2:	2100      	movs	r1, #0
 800e3f4:	68f8      	ldr	r0, [r7, #12]
 800e3f6:	f003 fc41 	bl	8011c7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e3fa:	2300      	movs	r3, #0
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3710      	adds	r7, #16
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2204      	movs	r2, #4
 800e410:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e414:	2300      	movs	r3, #0
 800e416:	2200      	movs	r2, #0
 800e418:	2100      	movs	r1, #0
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f003 fc0d 	bl	8011c3a <USBD_LL_Transmit>

  return USBD_OK;
 800e420:	2300      	movs	r3, #0
}
 800e422:	4618      	mov	r0, r3
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}

0800e42a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e42a:	b580      	push	{r7, lr}
 800e42c:	b082      	sub	sp, #8
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2205      	movs	r2, #5
 800e436:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e43a:	2300      	movs	r3, #0
 800e43c:	2200      	movs	r2, #0
 800e43e:	2100      	movs	r1, #0
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f003 fc1b 	bl	8011c7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e446:	2300      	movs	r3, #0
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3708      	adds	r7, #8
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e450:	b480      	push	{r7}
 800e452:	b087      	sub	sp, #28
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	4613      	mov	r3, r2
 800e45c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e45e:	2301      	movs	r3, #1
 800e460:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e462:	2300      	movs	r3, #0
 800e464:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e466:	4b1f      	ldr	r3, [pc, #124]	@ (800e4e4 <FATFS_LinkDriverEx+0x94>)
 800e468:	7a5b      	ldrb	r3, [r3, #9]
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d131      	bne.n	800e4d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e470:	4b1c      	ldr	r3, [pc, #112]	@ (800e4e4 <FATFS_LinkDriverEx+0x94>)
 800e472:	7a5b      	ldrb	r3, [r3, #9]
 800e474:	b2db      	uxtb	r3, r3
 800e476:	461a      	mov	r2, r3
 800e478:	4b1a      	ldr	r3, [pc, #104]	@ (800e4e4 <FATFS_LinkDriverEx+0x94>)
 800e47a:	2100      	movs	r1, #0
 800e47c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e47e:	4b19      	ldr	r3, [pc, #100]	@ (800e4e4 <FATFS_LinkDriverEx+0x94>)
 800e480:	7a5b      	ldrb	r3, [r3, #9]
 800e482:	b2db      	uxtb	r3, r3
 800e484:	4a17      	ldr	r2, [pc, #92]	@ (800e4e4 <FATFS_LinkDriverEx+0x94>)
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	4413      	add	r3, r2
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e48e:	4b15      	ldr	r3, [pc, #84]	@ (800e4e4 <FATFS_LinkDriverEx+0x94>)
 800e490:	7a5b      	ldrb	r3, [r3, #9]
 800e492:	b2db      	uxtb	r3, r3
 800e494:	461a      	mov	r2, r3
 800e496:	4b13      	ldr	r3, [pc, #76]	@ (800e4e4 <FATFS_LinkDriverEx+0x94>)
 800e498:	4413      	add	r3, r2
 800e49a:	79fa      	ldrb	r2, [r7, #7]
 800e49c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e49e:	4b11      	ldr	r3, [pc, #68]	@ (800e4e4 <FATFS_LinkDriverEx+0x94>)
 800e4a0:	7a5b      	ldrb	r3, [r3, #9]
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	1c5a      	adds	r2, r3, #1
 800e4a6:	b2d1      	uxtb	r1, r2
 800e4a8:	4a0e      	ldr	r2, [pc, #56]	@ (800e4e4 <FATFS_LinkDriverEx+0x94>)
 800e4aa:	7251      	strb	r1, [r2, #9]
 800e4ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e4ae:	7dbb      	ldrb	r3, [r7, #22]
 800e4b0:	3330      	adds	r3, #48	@ 0x30
 800e4b2:	b2da      	uxtb	r2, r3
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	223a      	movs	r2, #58	@ 0x3a
 800e4be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	3302      	adds	r3, #2
 800e4c4:	222f      	movs	r2, #47	@ 0x2f
 800e4c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	3303      	adds	r3, #3
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	371c      	adds	r7, #28
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	20003fb4 	.word	0x20003fb4

0800e4e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	6839      	ldr	r1, [r7, #0]
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f7ff ffaa 	bl	800e450 <FATFS_LinkDriverEx>
 800e4fc:	4603      	mov	r3, r0
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3708      	adds	r7, #8
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
	...

0800e508 <__NVIC_SetPriority>:
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	4603      	mov	r3, r0
 800e510:	6039      	str	r1, [r7, #0]
 800e512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	db0a      	blt.n	800e532 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	b2da      	uxtb	r2, r3
 800e520:	490c      	ldr	r1, [pc, #48]	@ (800e554 <__NVIC_SetPriority+0x4c>)
 800e522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e526:	0112      	lsls	r2, r2, #4
 800e528:	b2d2      	uxtb	r2, r2
 800e52a:	440b      	add	r3, r1
 800e52c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800e530:	e00a      	b.n	800e548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	b2da      	uxtb	r2, r3
 800e536:	4908      	ldr	r1, [pc, #32]	@ (800e558 <__NVIC_SetPriority+0x50>)
 800e538:	79fb      	ldrb	r3, [r7, #7]
 800e53a:	f003 030f 	and.w	r3, r3, #15
 800e53e:	3b04      	subs	r3, #4
 800e540:	0112      	lsls	r2, r2, #4
 800e542:	b2d2      	uxtb	r2, r2
 800e544:	440b      	add	r3, r1
 800e546:	761a      	strb	r2, [r3, #24]
}
 800e548:	bf00      	nop
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr
 800e554:	e000e100 	.word	0xe000e100
 800e558:	e000ed00 	.word	0xe000ed00

0800e55c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e55c:	b580      	push	{r7, lr}
 800e55e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e560:	2100      	movs	r1, #0
 800e562:	f06f 0004 	mvn.w	r0, #4
 800e566:	f7ff ffcf 	bl	800e508 <__NVIC_SetPriority>
#endif
}
 800e56a:	bf00      	nop
 800e56c:	bd80      	pop	{r7, pc}
	...

0800e570 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e576:	f3ef 8305 	mrs	r3, IPSR
 800e57a:	603b      	str	r3, [r7, #0]
  return(result);
 800e57c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d003      	beq.n	800e58a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e582:	f06f 0305 	mvn.w	r3, #5
 800e586:	607b      	str	r3, [r7, #4]
 800e588:	e00c      	b.n	800e5a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e58a:	4b0a      	ldr	r3, [pc, #40]	@ (800e5b4 <osKernelInitialize+0x44>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d105      	bne.n	800e59e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e592:	4b08      	ldr	r3, [pc, #32]	@ (800e5b4 <osKernelInitialize+0x44>)
 800e594:	2201      	movs	r2, #1
 800e596:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e598:	2300      	movs	r3, #0
 800e59a:	607b      	str	r3, [r7, #4]
 800e59c:	e002      	b.n	800e5a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e59e:	f04f 33ff 	mov.w	r3, #4294967295
 800e5a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e5a4:	687b      	ldr	r3, [r7, #4]
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	370c      	adds	r7, #12
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr
 800e5b2:	bf00      	nop
 800e5b4:	20003fc0 	.word	0x20003fc0

0800e5b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5be:	f3ef 8305 	mrs	r3, IPSR
 800e5c2:	603b      	str	r3, [r7, #0]
  return(result);
 800e5c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d003      	beq.n	800e5d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e5ca:	f06f 0305 	mvn.w	r3, #5
 800e5ce:	607b      	str	r3, [r7, #4]
 800e5d0:	e010      	b.n	800e5f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e5d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e600 <osKernelStart+0x48>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d109      	bne.n	800e5ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e5da:	f7ff ffbf 	bl	800e55c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e5de:	4b08      	ldr	r3, [pc, #32]	@ (800e600 <osKernelStart+0x48>)
 800e5e0:	2202      	movs	r2, #2
 800e5e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e5e4:	f001 fbb4 	bl	800fd50 <vTaskStartScheduler>
      stat = osOK;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	607b      	str	r3, [r7, #4]
 800e5ec:	e002      	b.n	800e5f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e5f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e5f4:	687b      	ldr	r3, [r7, #4]
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	20003fc0 	.word	0x20003fc0

0800e604 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e60a:	f3ef 8305 	mrs	r3, IPSR
 800e60e:	603b      	str	r3, [r7, #0]
  return(result);
 800e610:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e612:	2b00      	cmp	r3, #0
 800e614:	d003      	beq.n	800e61e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800e616:	f001 fcbf 	bl	800ff98 <xTaskGetTickCountFromISR>
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	e002      	b.n	800e624 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800e61e:	f001 fcab 	bl	800ff78 <xTaskGetTickCount>
 800e622:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800e624:	687b      	ldr	r3, [r7, #4]
}
 800e626:	4618      	mov	r0, r3
 800e628:	3708      	adds	r7, #8
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}

0800e62e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e62e:	b580      	push	{r7, lr}
 800e630:	b08e      	sub	sp, #56	@ 0x38
 800e632:	af04      	add	r7, sp, #16
 800e634:	60f8      	str	r0, [r7, #12]
 800e636:	60b9      	str	r1, [r7, #8]
 800e638:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e63a:	2300      	movs	r3, #0
 800e63c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e63e:	f3ef 8305 	mrs	r3, IPSR
 800e642:	617b      	str	r3, [r7, #20]
  return(result);
 800e644:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e646:	2b00      	cmp	r3, #0
 800e648:	d17e      	bne.n	800e748 <osThreadNew+0x11a>
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d07b      	beq.n	800e748 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e650:	2380      	movs	r3, #128	@ 0x80
 800e652:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e654:	2318      	movs	r3, #24
 800e656:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e658:	2300      	movs	r3, #0
 800e65a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800e65c:	f04f 33ff 	mov.w	r3, #4294967295
 800e660:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d045      	beq.n	800e6f4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d002      	beq.n	800e676 <osThreadNew+0x48>
        name = attr->name;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	699b      	ldr	r3, [r3, #24]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d002      	beq.n	800e684 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	699b      	ldr	r3, [r3, #24]
 800e682:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d008      	beq.n	800e69c <osThreadNew+0x6e>
 800e68a:	69fb      	ldr	r3, [r7, #28]
 800e68c:	2b38      	cmp	r3, #56	@ 0x38
 800e68e:	d805      	bhi.n	800e69c <osThreadNew+0x6e>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	685b      	ldr	r3, [r3, #4]
 800e694:	f003 0301 	and.w	r3, r3, #1
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d001      	beq.n	800e6a0 <osThreadNew+0x72>
        return (NULL);
 800e69c:	2300      	movs	r3, #0
 800e69e:	e054      	b.n	800e74a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	695b      	ldr	r3, [r3, #20]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d003      	beq.n	800e6b0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	695b      	ldr	r3, [r3, #20]
 800e6ac:	089b      	lsrs	r3, r3, #2
 800e6ae:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	689b      	ldr	r3, [r3, #8]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00e      	beq.n	800e6d6 <osThreadNew+0xa8>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	68db      	ldr	r3, [r3, #12]
 800e6bc:	2b5b      	cmp	r3, #91	@ 0x5b
 800e6be:	d90a      	bls.n	800e6d6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d006      	beq.n	800e6d6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	695b      	ldr	r3, [r3, #20]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d002      	beq.n	800e6d6 <osThreadNew+0xa8>
        mem = 1;
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	61bb      	str	r3, [r7, #24]
 800e6d4:	e010      	b.n	800e6f8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	689b      	ldr	r3, [r3, #8]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d10c      	bne.n	800e6f8 <osThreadNew+0xca>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d108      	bne.n	800e6f8 <osThreadNew+0xca>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	691b      	ldr	r3, [r3, #16]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d104      	bne.n	800e6f8 <osThreadNew+0xca>
          mem = 0;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	61bb      	str	r3, [r7, #24]
 800e6f2:	e001      	b.n	800e6f8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e6f8:	69bb      	ldr	r3, [r7, #24]
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d110      	bne.n	800e720 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e702:	687a      	ldr	r2, [r7, #4]
 800e704:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e706:	9202      	str	r2, [sp, #8]
 800e708:	9301      	str	r3, [sp, #4]
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	9300      	str	r3, [sp, #0]
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	6a3a      	ldr	r2, [r7, #32]
 800e712:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f001 f93f 	bl	800f998 <xTaskCreateStatic>
 800e71a:	4603      	mov	r3, r0
 800e71c:	613b      	str	r3, [r7, #16]
 800e71e:	e013      	b.n	800e748 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e720:	69bb      	ldr	r3, [r7, #24]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d110      	bne.n	800e748 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e726:	6a3b      	ldr	r3, [r7, #32]
 800e728:	b29a      	uxth	r2, r3
 800e72a:	f107 0310 	add.w	r3, r7, #16
 800e72e:	9301      	str	r3, [sp, #4]
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	9300      	str	r3, [sp, #0]
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e738:	68f8      	ldr	r0, [r7, #12]
 800e73a:	f001 f98d 	bl	800fa58 <xTaskCreate>
 800e73e:	4603      	mov	r3, r0
 800e740:	2b01      	cmp	r3, #1
 800e742:	d001      	beq.n	800e748 <osThreadNew+0x11a>
            hTask = NULL;
 800e744:	2300      	movs	r3, #0
 800e746:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e748:	693b      	ldr	r3, [r7, #16]
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3728      	adds	r7, #40	@ 0x28
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}

0800e752 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 800e752:	b580      	push	{r7, lr}
 800e754:	b086      	sub	sp, #24
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e75e:	f3ef 8305 	mrs	r3, IPSR
 800e762:	60fb      	str	r3, [r7, #12]
  return(result);
 800e764:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 800e766:	2b00      	cmp	r3, #0
 800e768:	d102      	bne.n	800e770 <osThreadGetStackSpace+0x1e>
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d102      	bne.n	800e776 <osThreadGetStackSpace+0x24>
    sz = 0U;
 800e770:	2300      	movs	r3, #0
 800e772:	617b      	str	r3, [r7, #20]
 800e774:	e005      	b.n	800e782 <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 800e776:	6938      	ldr	r0, [r7, #16]
 800e778:	f001 ff16 	bl	80105a8 <uxTaskGetStackHighWaterMark>
 800e77c:	4603      	mov	r3, r0
 800e77e:	009b      	lsls	r3, r3, #2
 800e780:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 800e782:	697b      	ldr	r3, [r7, #20]
}
 800e784:	4618      	mov	r0, r3
 800e786:	3718      	adds	r7, #24
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e794:	f3ef 8305 	mrs	r3, IPSR
 800e798:	60bb      	str	r3, [r7, #8]
  return(result);
 800e79a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d003      	beq.n	800e7a8 <osDelay+0x1c>
    stat = osErrorISR;
 800e7a0:	f06f 0305 	mvn.w	r3, #5
 800e7a4:	60fb      	str	r3, [r7, #12]
 800e7a6:	e007      	b.n	800e7b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d002      	beq.n	800e7b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f001 fa96 	bl	800fce4 <vTaskDelay>
    }
  }

  return (stat);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b084      	sub	sp, #16
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f002 fc32 	bl	8011034 <pvTimerGetTimerID>
 800e7d0:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d005      	beq.n	800e7e4 <TimerCallback+0x22>
    callb->func (callb->arg);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	68fa      	ldr	r2, [r7, #12]
 800e7de:	6852      	ldr	r2, [r2, #4]
 800e7e0:	4610      	mov	r0, r2
 800e7e2:	4798      	blx	r3
  }
}
 800e7e4:	bf00      	nop
 800e7e6:	3710      	adds	r7, #16
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b08c      	sub	sp, #48	@ 0x30
 800e7f0:	af02      	add	r7, sp, #8
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	607a      	str	r2, [r7, #4]
 800e7f6:	603b      	str	r3, [r7, #0]
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e800:	f3ef 8305 	mrs	r3, IPSR
 800e804:	613b      	str	r3, [r7, #16]
  return(result);
 800e806:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d163      	bne.n	800e8d4 <osTimerNew+0xe8>
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d060      	beq.n	800e8d4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800e812:	2008      	movs	r0, #8
 800e814:	f002 fe82 	bl	801151c <pvPortMalloc>
 800e818:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d059      	beq.n	800e8d4 <osTimerNew+0xe8>
      callb->func = func;
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	68fa      	ldr	r2, [r7, #12]
 800e824:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800e82c:	7afb      	ldrb	r3, [r7, #11]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d102      	bne.n	800e838 <osTimerNew+0x4c>
        reload = pdFALSE;
 800e832:	2300      	movs	r3, #0
 800e834:	61fb      	str	r3, [r7, #28]
 800e836:	e001      	b.n	800e83c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800e838:	2301      	movs	r3, #1
 800e83a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800e83c:	f04f 33ff 	mov.w	r3, #4294967295
 800e840:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800e842:	2300      	movs	r3, #0
 800e844:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d01c      	beq.n	800e886 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d002      	beq.n	800e85a <osTimerNew+0x6e>
          name = attr->name;
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d006      	beq.n	800e870 <osTimerNew+0x84>
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	2b2b      	cmp	r3, #43	@ 0x2b
 800e868:	d902      	bls.n	800e870 <osTimerNew+0x84>
          mem = 1;
 800e86a:	2301      	movs	r3, #1
 800e86c:	61bb      	str	r3, [r7, #24]
 800e86e:	e00c      	b.n	800e88a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d108      	bne.n	800e88a <osTimerNew+0x9e>
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d104      	bne.n	800e88a <osTimerNew+0x9e>
            mem = 0;
 800e880:	2300      	movs	r3, #0
 800e882:	61bb      	str	r3, [r7, #24]
 800e884:	e001      	b.n	800e88a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800e886:	2300      	movs	r3, #0
 800e888:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e88a:	69bb      	ldr	r3, [r7, #24]
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d10c      	bne.n	800e8aa <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	689b      	ldr	r3, [r3, #8]
 800e894:	9301      	str	r3, [sp, #4]
 800e896:	4b12      	ldr	r3, [pc, #72]	@ (800e8e0 <osTimerNew+0xf4>)
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	69fa      	ldr	r2, [r7, #28]
 800e89e:	2101      	movs	r1, #1
 800e8a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e8a2:	f002 f83a 	bl	801091a <xTimerCreateStatic>
 800e8a6:	6238      	str	r0, [r7, #32]
 800e8a8:	e00b      	b.n	800e8c2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d108      	bne.n	800e8c2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800e8b0:	4b0b      	ldr	r3, [pc, #44]	@ (800e8e0 <osTimerNew+0xf4>)
 800e8b2:	9300      	str	r3, [sp, #0]
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	69fa      	ldr	r2, [r7, #28]
 800e8b8:	2101      	movs	r1, #1
 800e8ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e8bc:	f002 f80c 	bl	80108d8 <xTimerCreate>
 800e8c0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800e8c2:	6a3b      	ldr	r3, [r7, #32]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d105      	bne.n	800e8d4 <osTimerNew+0xe8>
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d002      	beq.n	800e8d4 <osTimerNew+0xe8>
        vPortFree (callb);
 800e8ce:	6978      	ldr	r0, [r7, #20]
 800e8d0:	f002 fef2 	bl	80116b8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800e8d4:	6a3b      	ldr	r3, [r7, #32]
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3728      	adds	r7, #40	@ 0x28
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	0800e7c3 	.word	0x0800e7c3

0800e8e4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b088      	sub	sp, #32
 800e8e8:	af02      	add	r7, sp, #8
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8f2:	f3ef 8305 	mrs	r3, IPSR
 800e8f6:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d003      	beq.n	800e906 <osTimerStart+0x22>
    stat = osErrorISR;
 800e8fe:	f06f 0305 	mvn.w	r3, #5
 800e902:	617b      	str	r3, [r7, #20]
 800e904:	e017      	b.n	800e936 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d103      	bne.n	800e914 <osTimerStart+0x30>
    stat = osErrorParameter;
 800e90c:	f06f 0303 	mvn.w	r3, #3
 800e910:	617b      	str	r3, [r7, #20]
 800e912:	e010      	b.n	800e936 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800e914:	2300      	movs	r3, #0
 800e916:	9300      	str	r3, [sp, #0]
 800e918:	2300      	movs	r3, #0
 800e91a:	683a      	ldr	r2, [r7, #0]
 800e91c:	2104      	movs	r1, #4
 800e91e:	6938      	ldr	r0, [r7, #16]
 800e920:	f002 f878 	bl	8010a14 <xTimerGenericCommand>
 800e924:	4603      	mov	r3, r0
 800e926:	2b01      	cmp	r3, #1
 800e928:	d102      	bne.n	800e930 <osTimerStart+0x4c>
      stat = osOK;
 800e92a:	2300      	movs	r3, #0
 800e92c:	617b      	str	r3, [r7, #20]
 800e92e:	e002      	b.n	800e936 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800e930:	f06f 0302 	mvn.w	r3, #2
 800e934:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e936:	697b      	ldr	r3, [r7, #20]
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3718      	adds	r7, #24
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e940:	b580      	push	{r7, lr}
 800e942:	b08a      	sub	sp, #40	@ 0x28
 800e944:	af02      	add	r7, sp, #8
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e94c:	2300      	movs	r3, #0
 800e94e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e950:	f3ef 8305 	mrs	r3, IPSR
 800e954:	613b      	str	r3, [r7, #16]
  return(result);
 800e956:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d15f      	bne.n	800ea1c <osMessageQueueNew+0xdc>
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d05c      	beq.n	800ea1c <osMessageQueueNew+0xdc>
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d059      	beq.n	800ea1c <osMessageQueueNew+0xdc>
    mem = -1;
 800e968:	f04f 33ff 	mov.w	r3, #4294967295
 800e96c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d029      	beq.n	800e9c8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	689b      	ldr	r3, [r3, #8]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d012      	beq.n	800e9a2 <osMessageQueueNew+0x62>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	2b4f      	cmp	r3, #79	@ 0x4f
 800e982:	d90e      	bls.n	800e9a2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d00a      	beq.n	800e9a2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	695a      	ldr	r2, [r3, #20]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	68b9      	ldr	r1, [r7, #8]
 800e994:	fb01 f303 	mul.w	r3, r1, r3
 800e998:	429a      	cmp	r2, r3
 800e99a:	d302      	bcc.n	800e9a2 <osMessageQueueNew+0x62>
        mem = 1;
 800e99c:	2301      	movs	r3, #1
 800e99e:	61bb      	str	r3, [r7, #24]
 800e9a0:	e014      	b.n	800e9cc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	689b      	ldr	r3, [r3, #8]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d110      	bne.n	800e9cc <osMessageQueueNew+0x8c>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	68db      	ldr	r3, [r3, #12]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d10c      	bne.n	800e9cc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d108      	bne.n	800e9cc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	695b      	ldr	r3, [r3, #20]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d104      	bne.n	800e9cc <osMessageQueueNew+0x8c>
          mem = 0;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	61bb      	str	r3, [r7, #24]
 800e9c6:	e001      	b.n	800e9cc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	2b01      	cmp	r3, #1
 800e9d0:	d10b      	bne.n	800e9ea <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	691a      	ldr	r2, [r3, #16]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	689b      	ldr	r3, [r3, #8]
 800e9da:	2100      	movs	r1, #0
 800e9dc:	9100      	str	r1, [sp, #0]
 800e9de:	68b9      	ldr	r1, [r7, #8]
 800e9e0:	68f8      	ldr	r0, [r7, #12]
 800e9e2:	f000 fa67 	bl	800eeb4 <xQueueGenericCreateStatic>
 800e9e6:	61f8      	str	r0, [r7, #28]
 800e9e8:	e008      	b.n	800e9fc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d105      	bne.n	800e9fc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	68b9      	ldr	r1, [r7, #8]
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	f000 fada 	bl	800efae <xQueueGenericCreate>
 800e9fa:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e9fc:	69fb      	ldr	r3, [r7, #28]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00c      	beq.n	800ea1c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d003      	beq.n	800ea10 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	617b      	str	r3, [r7, #20]
 800ea0e:	e001      	b.n	800ea14 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ea10:	2300      	movs	r3, #0
 800ea12:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ea14:	6979      	ldr	r1, [r7, #20]
 800ea16:	69f8      	ldr	r0, [r7, #28]
 800ea18:	f000 ff60 	bl	800f8dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ea1c:	69fb      	ldr	r3, [r7, #28]
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3720      	adds	r7, #32
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
	...

0800ea28 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b088      	sub	sp, #32
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	60f8      	str	r0, [r7, #12]
 800ea30:	60b9      	str	r1, [r7, #8]
 800ea32:	603b      	str	r3, [r7, #0]
 800ea34:	4613      	mov	r3, r2
 800ea36:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea40:	f3ef 8305 	mrs	r3, IPSR
 800ea44:	617b      	str	r3, [r7, #20]
  return(result);
 800ea46:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d028      	beq.n	800ea9e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d005      	beq.n	800ea5e <osMessageQueuePut+0x36>
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d002      	beq.n	800ea5e <osMessageQueuePut+0x36>
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d003      	beq.n	800ea66 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ea5e:	f06f 0303 	mvn.w	r3, #3
 800ea62:	61fb      	str	r3, [r7, #28]
 800ea64:	e038      	b.n	800ead8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ea66:	2300      	movs	r3, #0
 800ea68:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ea6a:	f107 0210 	add.w	r2, r7, #16
 800ea6e:	2300      	movs	r3, #0
 800ea70:	68b9      	ldr	r1, [r7, #8]
 800ea72:	69b8      	ldr	r0, [r7, #24]
 800ea74:	f000 fbfc 	bl	800f270 <xQueueGenericSendFromISR>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	2b01      	cmp	r3, #1
 800ea7c:	d003      	beq.n	800ea86 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ea7e:	f06f 0302 	mvn.w	r3, #2
 800ea82:	61fb      	str	r3, [r7, #28]
 800ea84:	e028      	b.n	800ead8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d025      	beq.n	800ead8 <osMessageQueuePut+0xb0>
 800ea8c:	4b15      	ldr	r3, [pc, #84]	@ (800eae4 <osMessageQueuePut+0xbc>)
 800ea8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea92:	601a      	str	r2, [r3, #0]
 800ea94:	f3bf 8f4f 	dsb	sy
 800ea98:	f3bf 8f6f 	isb	sy
 800ea9c:	e01c      	b.n	800ead8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d002      	beq.n	800eaaa <osMessageQueuePut+0x82>
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d103      	bne.n	800eab2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800eaaa:	f06f 0303 	mvn.w	r3, #3
 800eaae:	61fb      	str	r3, [r7, #28]
 800eab0:	e012      	b.n	800ead8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800eab2:	2300      	movs	r3, #0
 800eab4:	683a      	ldr	r2, [r7, #0]
 800eab6:	68b9      	ldr	r1, [r7, #8]
 800eab8:	69b8      	ldr	r0, [r7, #24]
 800eaba:	f000 fad7 	bl	800f06c <xQueueGenericSend>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d009      	beq.n	800ead8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d003      	beq.n	800ead2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800eaca:	f06f 0301 	mvn.w	r3, #1
 800eace:	61fb      	str	r3, [r7, #28]
 800ead0:	e002      	b.n	800ead8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ead2:	f06f 0302 	mvn.w	r3, #2
 800ead6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ead8:	69fb      	ldr	r3, [r7, #28]
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3720      	adds	r7, #32
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	e000ed04 	.word	0xe000ed04

0800eae8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b088      	sub	sp, #32
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	60f8      	str	r0, [r7, #12]
 800eaf0:	60b9      	str	r1, [r7, #8]
 800eaf2:	607a      	str	r2, [r7, #4]
 800eaf4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800eafa:	2300      	movs	r3, #0
 800eafc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eafe:	f3ef 8305 	mrs	r3, IPSR
 800eb02:	617b      	str	r3, [r7, #20]
  return(result);
 800eb04:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d028      	beq.n	800eb5c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eb0a:	69bb      	ldr	r3, [r7, #24]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d005      	beq.n	800eb1c <osMessageQueueGet+0x34>
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d002      	beq.n	800eb1c <osMessageQueueGet+0x34>
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d003      	beq.n	800eb24 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800eb1c:	f06f 0303 	mvn.w	r3, #3
 800eb20:	61fb      	str	r3, [r7, #28]
 800eb22:	e037      	b.n	800eb94 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800eb24:	2300      	movs	r3, #0
 800eb26:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800eb28:	f107 0310 	add.w	r3, r7, #16
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	68b9      	ldr	r1, [r7, #8]
 800eb30:	69b8      	ldr	r0, [r7, #24]
 800eb32:	f000 fd1d 	bl	800f570 <xQueueReceiveFromISR>
 800eb36:	4603      	mov	r3, r0
 800eb38:	2b01      	cmp	r3, #1
 800eb3a:	d003      	beq.n	800eb44 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800eb3c:	f06f 0302 	mvn.w	r3, #2
 800eb40:	61fb      	str	r3, [r7, #28]
 800eb42:	e027      	b.n	800eb94 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d024      	beq.n	800eb94 <osMessageQueueGet+0xac>
 800eb4a:	4b15      	ldr	r3, [pc, #84]	@ (800eba0 <osMessageQueueGet+0xb8>)
 800eb4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb50:	601a      	str	r2, [r3, #0]
 800eb52:	f3bf 8f4f 	dsb	sy
 800eb56:	f3bf 8f6f 	isb	sy
 800eb5a:	e01b      	b.n	800eb94 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eb5c:	69bb      	ldr	r3, [r7, #24]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d002      	beq.n	800eb68 <osMessageQueueGet+0x80>
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d103      	bne.n	800eb70 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800eb68:	f06f 0303 	mvn.w	r3, #3
 800eb6c:	61fb      	str	r3, [r7, #28]
 800eb6e:	e011      	b.n	800eb94 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800eb70:	683a      	ldr	r2, [r7, #0]
 800eb72:	68b9      	ldr	r1, [r7, #8]
 800eb74:	69b8      	ldr	r0, [r7, #24]
 800eb76:	f000 fc19 	bl	800f3ac <xQueueReceive>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d009      	beq.n	800eb94 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d003      	beq.n	800eb8e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800eb86:	f06f 0301 	mvn.w	r3, #1
 800eb8a:	61fb      	str	r3, [r7, #28]
 800eb8c:	e002      	b.n	800eb94 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800eb8e:	f06f 0302 	mvn.w	r3, #2
 800eb92:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800eb94:	69fb      	ldr	r3, [r7, #28]
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3720      	adds	r7, #32
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}
 800eb9e:	bf00      	nop
 800eba0:	e000ed04 	.word	0xe000ed04

0800eba4 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b08a      	sub	sp, #40	@ 0x28
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800ebb0:	6a3b      	ldr	r3, [r7, #32]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d102      	bne.n	800ebbc <osMessageQueueGetSpace+0x18>
    space = 0U;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebba:	e023      	b.n	800ec04 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebbc:	f3ef 8305 	mrs	r3, IPSR
 800ebc0:	61bb      	str	r3, [r7, #24]
  return(result);
 800ebc2:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d019      	beq.n	800ebfc <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ebc8:	f3ef 8211 	mrs	r2, BASEPRI
 800ebcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebd0:	f383 8811 	msr	BASEPRI, r3
 800ebd4:	f3bf 8f6f 	isb	sy
 800ebd8:	f3bf 8f4f 	dsb	sy
 800ebdc:	613a      	str	r2, [r7, #16]
 800ebde:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ebe0:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800ebe2:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800ebe4:	6a3b      	ldr	r3, [r7, #32]
 800ebe6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ebe8:	6a3b      	ldr	r3, [r7, #32]
 800ebea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebec:	1ad3      	subs	r3, r2, r3
 800ebee:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ebfa:	e003      	b.n	800ec04 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800ebfc:	6a38      	ldr	r0, [r7, #32]
 800ebfe:	f000 fd39 	bl	800f674 <uxQueueSpacesAvailable>
 800ec02:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 800ec04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3728      	adds	r7, #40	@ 0x28
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
	...

0800ec10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ec10:	b480      	push	{r7}
 800ec12:	b085      	sub	sp, #20
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	60f8      	str	r0, [r7, #12]
 800ec18:	60b9      	str	r1, [r7, #8]
 800ec1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	4a07      	ldr	r2, [pc, #28]	@ (800ec3c <vApplicationGetIdleTaskMemory+0x2c>)
 800ec20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	4a06      	ldr	r2, [pc, #24]	@ (800ec40 <vApplicationGetIdleTaskMemory+0x30>)
 800ec26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2280      	movs	r2, #128	@ 0x80
 800ec2c:	601a      	str	r2, [r3, #0]
}
 800ec2e:	bf00      	nop
 800ec30:	3714      	adds	r7, #20
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop
 800ec3c:	20003fc4 	.word	0x20003fc4
 800ec40:	20004020 	.word	0x20004020

0800ec44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ec44:	b480      	push	{r7}
 800ec46:	b085      	sub	sp, #20
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	4a07      	ldr	r2, [pc, #28]	@ (800ec70 <vApplicationGetTimerTaskMemory+0x2c>)
 800ec54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	4a06      	ldr	r2, [pc, #24]	@ (800ec74 <vApplicationGetTimerTaskMemory+0x30>)
 800ec5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ec62:	601a      	str	r2, [r3, #0]
}
 800ec64:	bf00      	nop
 800ec66:	3714      	adds	r7, #20
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr
 800ec70:	20004220 	.word	0x20004220
 800ec74:	2000427c 	.word	0x2000427c

0800ec78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f103 0208 	add.w	r2, r3, #8
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f103 0208 	add.w	r2, r3, #8
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f103 0208 	add.w	r2, r3, #8
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ecac:	bf00      	nop
 800ecae:	370c      	adds	r7, #12
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ecc6:	bf00      	nop
 800ecc8:	370c      	adds	r7, #12
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr

0800ecd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ecd2:	b480      	push	{r7}
 800ecd4:	b085      	sub	sp, #20
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
 800ecda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	68fa      	ldr	r2, [r7, #12]
 800ece6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	689a      	ldr	r2, [r3, #8]
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	689b      	ldr	r3, [r3, #8]
 800ecf4:	683a      	ldr	r2, [r7, #0]
 800ecf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	683a      	ldr	r2, [r7, #0]
 800ecfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	687a      	ldr	r2, [r7, #4]
 800ed02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	1c5a      	adds	r2, r3, #1
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	601a      	str	r2, [r3, #0]
}
 800ed0e:	bf00      	nop
 800ed10:	3714      	adds	r7, #20
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr

0800ed1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ed1a:	b480      	push	{r7}
 800ed1c:	b085      	sub	sp, #20
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	6078      	str	r0, [r7, #4]
 800ed22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed30:	d103      	bne.n	800ed3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	691b      	ldr	r3, [r3, #16]
 800ed36:	60fb      	str	r3, [r7, #12]
 800ed38:	e00c      	b.n	800ed54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	3308      	adds	r3, #8
 800ed3e:	60fb      	str	r3, [r7, #12]
 800ed40:	e002      	b.n	800ed48 <vListInsert+0x2e>
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	685b      	ldr	r3, [r3, #4]
 800ed46:	60fb      	str	r3, [r7, #12]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	685b      	ldr	r3, [r3, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	68ba      	ldr	r2, [r7, #8]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d2f6      	bcs.n	800ed42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	685a      	ldr	r2, [r3, #4]
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	683a      	ldr	r2, [r7, #0]
 800ed62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	68fa      	ldr	r2, [r7, #12]
 800ed68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	683a      	ldr	r2, [r7, #0]
 800ed6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	1c5a      	adds	r2, r3, #1
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	601a      	str	r2, [r3, #0]
}
 800ed80:	bf00      	nop
 800ed82:	3714      	adds	r7, #20
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b085      	sub	sp, #20
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	691b      	ldr	r3, [r3, #16]
 800ed98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	687a      	ldr	r2, [r7, #4]
 800eda0:	6892      	ldr	r2, [r2, #8]
 800eda2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	689b      	ldr	r3, [r3, #8]
 800eda8:	687a      	ldr	r2, [r7, #4]
 800edaa:	6852      	ldr	r2, [r2, #4]
 800edac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	687a      	ldr	r2, [r7, #4]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d103      	bne.n	800edc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	689a      	ldr	r2, [r3, #8]
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	1e5a      	subs	r2, r3, #1
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	681b      	ldr	r3, [r3, #0]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3714      	adds	r7, #20
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr

0800ede0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d10b      	bne.n	800ee0c <xQueueGenericReset+0x2c>
	__asm volatile
 800edf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edf8:	f383 8811 	msr	BASEPRI, r3
 800edfc:	f3bf 8f6f 	isb	sy
 800ee00:	f3bf 8f4f 	dsb	sy
 800ee04:	60bb      	str	r3, [r7, #8]
}
 800ee06:	bf00      	nop
 800ee08:	bf00      	nop
 800ee0a:	e7fd      	b.n	800ee08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ee0c:	f002 fa64 	bl	80112d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681a      	ldr	r2, [r3, #0]
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee18:	68f9      	ldr	r1, [r7, #12]
 800ee1a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ee1c:	fb01 f303 	mul.w	r3, r1, r3
 800ee20:	441a      	add	r2, r3
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	68f9      	ldr	r1, [r7, #12]
 800ee40:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ee42:	fb01 f303 	mul.w	r3, r1, r3
 800ee46:	441a      	add	r2, r3
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	22ff      	movs	r2, #255	@ 0xff
 800ee50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	22ff      	movs	r2, #255	@ 0xff
 800ee58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d114      	bne.n	800ee8c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	691b      	ldr	r3, [r3, #16]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d01a      	beq.n	800eea0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	3310      	adds	r3, #16
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f001 fa0e 	bl	8010290 <xTaskRemoveFromEventList>
 800ee74:	4603      	mov	r3, r0
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d012      	beq.n	800eea0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ee7a:	4b0d      	ldr	r3, [pc, #52]	@ (800eeb0 <xQueueGenericReset+0xd0>)
 800ee7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee80:	601a      	str	r2, [r3, #0]
 800ee82:	f3bf 8f4f 	dsb	sy
 800ee86:	f3bf 8f6f 	isb	sy
 800ee8a:	e009      	b.n	800eea0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	3310      	adds	r3, #16
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7ff fef1 	bl	800ec78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	3324      	adds	r3, #36	@ 0x24
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7ff feec 	bl	800ec78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eea0:	f002 fa4c 	bl	801133c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eea4:	2301      	movs	r3, #1
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	e000ed04 	.word	0xe000ed04

0800eeb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b08e      	sub	sp, #56	@ 0x38
 800eeb8:	af02      	add	r7, sp, #8
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	60b9      	str	r1, [r7, #8]
 800eebe:	607a      	str	r2, [r7, #4]
 800eec0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d10b      	bne.n	800eee0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800eec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eecc:	f383 8811 	msr	BASEPRI, r3
 800eed0:	f3bf 8f6f 	isb	sy
 800eed4:	f3bf 8f4f 	dsb	sy
 800eed8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800eeda:	bf00      	nop
 800eedc:	bf00      	nop
 800eede:	e7fd      	b.n	800eedc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d10b      	bne.n	800eefe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800eee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeea:	f383 8811 	msr	BASEPRI, r3
 800eeee:	f3bf 8f6f 	isb	sy
 800eef2:	f3bf 8f4f 	dsb	sy
 800eef6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800eef8:	bf00      	nop
 800eefa:	bf00      	nop
 800eefc:	e7fd      	b.n	800eefa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d002      	beq.n	800ef0a <xQueueGenericCreateStatic+0x56>
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d001      	beq.n	800ef0e <xQueueGenericCreateStatic+0x5a>
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	e000      	b.n	800ef10 <xQueueGenericCreateStatic+0x5c>
 800ef0e:	2300      	movs	r3, #0
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d10b      	bne.n	800ef2c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ef14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef18:	f383 8811 	msr	BASEPRI, r3
 800ef1c:	f3bf 8f6f 	isb	sy
 800ef20:	f3bf 8f4f 	dsb	sy
 800ef24:	623b      	str	r3, [r7, #32]
}
 800ef26:	bf00      	nop
 800ef28:	bf00      	nop
 800ef2a:	e7fd      	b.n	800ef28 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d102      	bne.n	800ef38 <xQueueGenericCreateStatic+0x84>
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d101      	bne.n	800ef3c <xQueueGenericCreateStatic+0x88>
 800ef38:	2301      	movs	r3, #1
 800ef3a:	e000      	b.n	800ef3e <xQueueGenericCreateStatic+0x8a>
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d10b      	bne.n	800ef5a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ef42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef46:	f383 8811 	msr	BASEPRI, r3
 800ef4a:	f3bf 8f6f 	isb	sy
 800ef4e:	f3bf 8f4f 	dsb	sy
 800ef52:	61fb      	str	r3, [r7, #28]
}
 800ef54:	bf00      	nop
 800ef56:	bf00      	nop
 800ef58:	e7fd      	b.n	800ef56 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ef5a:	2350      	movs	r3, #80	@ 0x50
 800ef5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	2b50      	cmp	r3, #80	@ 0x50
 800ef62:	d00b      	beq.n	800ef7c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ef64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef68:	f383 8811 	msr	BASEPRI, r3
 800ef6c:	f3bf 8f6f 	isb	sy
 800ef70:	f3bf 8f4f 	dsb	sy
 800ef74:	61bb      	str	r3, [r7, #24]
}
 800ef76:	bf00      	nop
 800ef78:	bf00      	nop
 800ef7a:	e7fd      	b.n	800ef78 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ef7c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ef82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d00d      	beq.n	800efa4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ef88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ef90:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ef94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef96:	9300      	str	r3, [sp, #0]
 800ef98:	4613      	mov	r3, r2
 800ef9a:	687a      	ldr	r2, [r7, #4]
 800ef9c:	68b9      	ldr	r1, [r7, #8]
 800ef9e:	68f8      	ldr	r0, [r7, #12]
 800efa0:	f000 f840 	bl	800f024 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800efa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3730      	adds	r7, #48	@ 0x30
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}

0800efae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800efae:	b580      	push	{r7, lr}
 800efb0:	b08a      	sub	sp, #40	@ 0x28
 800efb2:	af02      	add	r7, sp, #8
 800efb4:	60f8      	str	r0, [r7, #12]
 800efb6:	60b9      	str	r1, [r7, #8]
 800efb8:	4613      	mov	r3, r2
 800efba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d10b      	bne.n	800efda <xQueueGenericCreate+0x2c>
	__asm volatile
 800efc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efc6:	f383 8811 	msr	BASEPRI, r3
 800efca:	f3bf 8f6f 	isb	sy
 800efce:	f3bf 8f4f 	dsb	sy
 800efd2:	613b      	str	r3, [r7, #16]
}
 800efd4:	bf00      	nop
 800efd6:	bf00      	nop
 800efd8:	e7fd      	b.n	800efd6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	fb02 f303 	mul.w	r3, r2, r3
 800efe2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800efe4:	69fb      	ldr	r3, [r7, #28]
 800efe6:	3350      	adds	r3, #80	@ 0x50
 800efe8:	4618      	mov	r0, r3
 800efea:	f002 fa97 	bl	801151c <pvPortMalloc>
 800efee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800eff0:	69bb      	ldr	r3, [r7, #24]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d011      	beq.n	800f01a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800eff6:	69bb      	ldr	r3, [r7, #24]
 800eff8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	3350      	adds	r3, #80	@ 0x50
 800effe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	2200      	movs	r2, #0
 800f004:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f008:	79fa      	ldrb	r2, [r7, #7]
 800f00a:	69bb      	ldr	r3, [r7, #24]
 800f00c:	9300      	str	r3, [sp, #0]
 800f00e:	4613      	mov	r3, r2
 800f010:	697a      	ldr	r2, [r7, #20]
 800f012:	68b9      	ldr	r1, [r7, #8]
 800f014:	68f8      	ldr	r0, [r7, #12]
 800f016:	f000 f805 	bl	800f024 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f01a:	69bb      	ldr	r3, [r7, #24]
	}
 800f01c:	4618      	mov	r0, r3
 800f01e:	3720      	adds	r7, #32
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}

0800f024 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b084      	sub	sp, #16
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	607a      	str	r2, [r7, #4]
 800f030:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d103      	bne.n	800f040 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f038:	69bb      	ldr	r3, [r7, #24]
 800f03a:	69ba      	ldr	r2, [r7, #24]
 800f03c:	601a      	str	r2, [r3, #0]
 800f03e:	e002      	b.n	800f046 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f040:	69bb      	ldr	r3, [r7, #24]
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f046:	69bb      	ldr	r3, [r7, #24]
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	68ba      	ldr	r2, [r7, #8]
 800f050:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f052:	2101      	movs	r1, #1
 800f054:	69b8      	ldr	r0, [r7, #24]
 800f056:	f7ff fec3 	bl	800ede0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f05a:	69bb      	ldr	r3, [r7, #24]
 800f05c:	78fa      	ldrb	r2, [r7, #3]
 800f05e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f062:	bf00      	nop
 800f064:	3710      	adds	r7, #16
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
	...

0800f06c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b08e      	sub	sp, #56	@ 0x38
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	607a      	str	r2, [r7, #4]
 800f078:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f07a:	2300      	movs	r3, #0
 800f07c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f084:	2b00      	cmp	r3, #0
 800f086:	d10b      	bne.n	800f0a0 <xQueueGenericSend+0x34>
	__asm volatile
 800f088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f08c:	f383 8811 	msr	BASEPRI, r3
 800f090:	f3bf 8f6f 	isb	sy
 800f094:	f3bf 8f4f 	dsb	sy
 800f098:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f09a:	bf00      	nop
 800f09c:	bf00      	nop
 800f09e:	e7fd      	b.n	800f09c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d103      	bne.n	800f0ae <xQueueGenericSend+0x42>
 800f0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d101      	bne.n	800f0b2 <xQueueGenericSend+0x46>
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e000      	b.n	800f0b4 <xQueueGenericSend+0x48>
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d10b      	bne.n	800f0d0 <xQueueGenericSend+0x64>
	__asm volatile
 800f0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0bc:	f383 8811 	msr	BASEPRI, r3
 800f0c0:	f3bf 8f6f 	isb	sy
 800f0c4:	f3bf 8f4f 	dsb	sy
 800f0c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f0ca:	bf00      	nop
 800f0cc:	bf00      	nop
 800f0ce:	e7fd      	b.n	800f0cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	2b02      	cmp	r3, #2
 800f0d4:	d103      	bne.n	800f0de <xQueueGenericSend+0x72>
 800f0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d101      	bne.n	800f0e2 <xQueueGenericSend+0x76>
 800f0de:	2301      	movs	r3, #1
 800f0e0:	e000      	b.n	800f0e4 <xQueueGenericSend+0x78>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d10b      	bne.n	800f100 <xQueueGenericSend+0x94>
	__asm volatile
 800f0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0ec:	f383 8811 	msr	BASEPRI, r3
 800f0f0:	f3bf 8f6f 	isb	sy
 800f0f4:	f3bf 8f4f 	dsb	sy
 800f0f8:	623b      	str	r3, [r7, #32]
}
 800f0fa:	bf00      	nop
 800f0fc:	bf00      	nop
 800f0fe:	e7fd      	b.n	800f0fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f100:	f001 fabe 	bl	8010680 <xTaskGetSchedulerState>
 800f104:	4603      	mov	r3, r0
 800f106:	2b00      	cmp	r3, #0
 800f108:	d102      	bne.n	800f110 <xQueueGenericSend+0xa4>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d101      	bne.n	800f114 <xQueueGenericSend+0xa8>
 800f110:	2301      	movs	r3, #1
 800f112:	e000      	b.n	800f116 <xQueueGenericSend+0xaa>
 800f114:	2300      	movs	r3, #0
 800f116:	2b00      	cmp	r3, #0
 800f118:	d10b      	bne.n	800f132 <xQueueGenericSend+0xc6>
	__asm volatile
 800f11a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f11e:	f383 8811 	msr	BASEPRI, r3
 800f122:	f3bf 8f6f 	isb	sy
 800f126:	f3bf 8f4f 	dsb	sy
 800f12a:	61fb      	str	r3, [r7, #28]
}
 800f12c:	bf00      	nop
 800f12e:	bf00      	nop
 800f130:	e7fd      	b.n	800f12e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f132:	f002 f8d1 	bl	80112d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f138:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f13c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f13e:	429a      	cmp	r2, r3
 800f140:	d302      	bcc.n	800f148 <xQueueGenericSend+0xdc>
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	2b02      	cmp	r3, #2
 800f146:	d129      	bne.n	800f19c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f148:	683a      	ldr	r2, [r7, #0]
 800f14a:	68b9      	ldr	r1, [r7, #8]
 800f14c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f14e:	f000 fab5 	bl	800f6bc <prvCopyDataToQueue>
 800f152:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d010      	beq.n	800f17e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f15e:	3324      	adds	r3, #36	@ 0x24
 800f160:	4618      	mov	r0, r3
 800f162:	f001 f895 	bl	8010290 <xTaskRemoveFromEventList>
 800f166:	4603      	mov	r3, r0
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d013      	beq.n	800f194 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f16c:	4b3f      	ldr	r3, [pc, #252]	@ (800f26c <xQueueGenericSend+0x200>)
 800f16e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f172:	601a      	str	r2, [r3, #0]
 800f174:	f3bf 8f4f 	dsb	sy
 800f178:	f3bf 8f6f 	isb	sy
 800f17c:	e00a      	b.n	800f194 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f180:	2b00      	cmp	r3, #0
 800f182:	d007      	beq.n	800f194 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f184:	4b39      	ldr	r3, [pc, #228]	@ (800f26c <xQueueGenericSend+0x200>)
 800f186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f18a:	601a      	str	r2, [r3, #0]
 800f18c:	f3bf 8f4f 	dsb	sy
 800f190:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f194:	f002 f8d2 	bl	801133c <vPortExitCritical>
				return pdPASS;
 800f198:	2301      	movs	r3, #1
 800f19a:	e063      	b.n	800f264 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d103      	bne.n	800f1aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f1a2:	f002 f8cb 	bl	801133c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	e05c      	b.n	800f264 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f1aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d106      	bne.n	800f1be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f1b0:	f107 0314 	add.w	r3, r7, #20
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f001 f8cf 	bl	8010358 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f1be:	f002 f8bd 	bl	801133c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f1c2:	f000 fe2d 	bl	800fe20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f1c6:	f002 f887 	bl	80112d8 <vPortEnterCritical>
 800f1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f1d0:	b25b      	sxtb	r3, r3
 800f1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d6:	d103      	bne.n	800f1e0 <xQueueGenericSend+0x174>
 800f1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1da:	2200      	movs	r2, #0
 800f1dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f1e6:	b25b      	sxtb	r3, r3
 800f1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ec:	d103      	bne.n	800f1f6 <xQueueGenericSend+0x18a>
 800f1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f1f6:	f002 f8a1 	bl	801133c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1fa:	1d3a      	adds	r2, r7, #4
 800f1fc:	f107 0314 	add.w	r3, r7, #20
 800f200:	4611      	mov	r1, r2
 800f202:	4618      	mov	r0, r3
 800f204:	f001 f8be 	bl	8010384 <xTaskCheckForTimeOut>
 800f208:	4603      	mov	r3, r0
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d124      	bne.n	800f258 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f20e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f210:	f000 fb4c 	bl	800f8ac <prvIsQueueFull>
 800f214:	4603      	mov	r3, r0
 800f216:	2b00      	cmp	r3, #0
 800f218:	d018      	beq.n	800f24c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f21c:	3310      	adds	r3, #16
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	4611      	mov	r1, r2
 800f222:	4618      	mov	r0, r3
 800f224:	f000 ffe2 	bl	80101ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f228:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f22a:	f000 fad7 	bl	800f7dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f22e:	f000 fe05 	bl	800fe3c <xTaskResumeAll>
 800f232:	4603      	mov	r3, r0
 800f234:	2b00      	cmp	r3, #0
 800f236:	f47f af7c 	bne.w	800f132 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f23a:	4b0c      	ldr	r3, [pc, #48]	@ (800f26c <xQueueGenericSend+0x200>)
 800f23c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f240:	601a      	str	r2, [r3, #0]
 800f242:	f3bf 8f4f 	dsb	sy
 800f246:	f3bf 8f6f 	isb	sy
 800f24a:	e772      	b.n	800f132 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f24c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f24e:	f000 fac5 	bl	800f7dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f252:	f000 fdf3 	bl	800fe3c <xTaskResumeAll>
 800f256:	e76c      	b.n	800f132 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f258:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f25a:	f000 fabf 	bl	800f7dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f25e:	f000 fded 	bl	800fe3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f262:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f264:	4618      	mov	r0, r3
 800f266:	3738      	adds	r7, #56	@ 0x38
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	e000ed04 	.word	0xe000ed04

0800f270 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b090      	sub	sp, #64	@ 0x40
 800f274:	af00      	add	r7, sp, #0
 800f276:	60f8      	str	r0, [r7, #12]
 800f278:	60b9      	str	r1, [r7, #8]
 800f27a:	607a      	str	r2, [r7, #4]
 800f27c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800f282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f284:	2b00      	cmp	r3, #0
 800f286:	d10b      	bne.n	800f2a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800f288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f28c:	f383 8811 	msr	BASEPRI, r3
 800f290:	f3bf 8f6f 	isb	sy
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f29a:	bf00      	nop
 800f29c:	bf00      	nop
 800f29e:	e7fd      	b.n	800f29c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d103      	bne.n	800f2ae <xQueueGenericSendFromISR+0x3e>
 800f2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d101      	bne.n	800f2b2 <xQueueGenericSendFromISR+0x42>
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	e000      	b.n	800f2b4 <xQueueGenericSendFromISR+0x44>
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d10b      	bne.n	800f2d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800f2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2bc:	f383 8811 	msr	BASEPRI, r3
 800f2c0:	f3bf 8f6f 	isb	sy
 800f2c4:	f3bf 8f4f 	dsb	sy
 800f2c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f2ca:	bf00      	nop
 800f2cc:	bf00      	nop
 800f2ce:	e7fd      	b.n	800f2cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	2b02      	cmp	r3, #2
 800f2d4:	d103      	bne.n	800f2de <xQueueGenericSendFromISR+0x6e>
 800f2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2da:	2b01      	cmp	r3, #1
 800f2dc:	d101      	bne.n	800f2e2 <xQueueGenericSendFromISR+0x72>
 800f2de:	2301      	movs	r3, #1
 800f2e0:	e000      	b.n	800f2e4 <xQueueGenericSendFromISR+0x74>
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d10b      	bne.n	800f300 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800f2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ec:	f383 8811 	msr	BASEPRI, r3
 800f2f0:	f3bf 8f6f 	isb	sy
 800f2f4:	f3bf 8f4f 	dsb	sy
 800f2f8:	623b      	str	r3, [r7, #32]
}
 800f2fa:	bf00      	nop
 800f2fc:	bf00      	nop
 800f2fe:	e7fd      	b.n	800f2fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f300:	f002 f8ca 	bl	8011498 <vPortValidateInterruptPriority>
	__asm volatile
 800f304:	f3ef 8211 	mrs	r2, BASEPRI
 800f308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f30c:	f383 8811 	msr	BASEPRI, r3
 800f310:	f3bf 8f6f 	isb	sy
 800f314:	f3bf 8f4f 	dsb	sy
 800f318:	61fa      	str	r2, [r7, #28]
 800f31a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800f31c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f31e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f328:	429a      	cmp	r2, r3
 800f32a:	d302      	bcc.n	800f332 <xQueueGenericSendFromISR+0xc2>
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	2b02      	cmp	r3, #2
 800f330:	d12f      	bne.n	800f392 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f334:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f338:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f340:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f342:	683a      	ldr	r2, [r7, #0]
 800f344:	68b9      	ldr	r1, [r7, #8]
 800f346:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f348:	f000 f9b8 	bl	800f6bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f34c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f354:	d112      	bne.n	800f37c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d016      	beq.n	800f38c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f360:	3324      	adds	r3, #36	@ 0x24
 800f362:	4618      	mov	r0, r3
 800f364:	f000 ff94 	bl	8010290 <xTaskRemoveFromEventList>
 800f368:	4603      	mov	r3, r0
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d00e      	beq.n	800f38c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d00b      	beq.n	800f38c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2201      	movs	r2, #1
 800f378:	601a      	str	r2, [r3, #0]
 800f37a:	e007      	b.n	800f38c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f37c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f380:	3301      	adds	r3, #1
 800f382:	b2db      	uxtb	r3, r3
 800f384:	b25a      	sxtb	r2, r3
 800f386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f38c:	2301      	movs	r3, #1
 800f38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800f390:	e001      	b.n	800f396 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f392:	2300      	movs	r3, #0
 800f394:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f398:	617b      	str	r3, [r7, #20]
	__asm volatile
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	f383 8811 	msr	BASEPRI, r3
}
 800f3a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f3a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3740      	adds	r7, #64	@ 0x40
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b08c      	sub	sp, #48	@ 0x30
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d10b      	bne.n	800f3de <xQueueReceive+0x32>
	__asm volatile
 800f3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ca:	f383 8811 	msr	BASEPRI, r3
 800f3ce:	f3bf 8f6f 	isb	sy
 800f3d2:	f3bf 8f4f 	dsb	sy
 800f3d6:	623b      	str	r3, [r7, #32]
}
 800f3d8:	bf00      	nop
 800f3da:	bf00      	nop
 800f3dc:	e7fd      	b.n	800f3da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d103      	bne.n	800f3ec <xQueueReceive+0x40>
 800f3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d101      	bne.n	800f3f0 <xQueueReceive+0x44>
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	e000      	b.n	800f3f2 <xQueueReceive+0x46>
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d10b      	bne.n	800f40e <xQueueReceive+0x62>
	__asm volatile
 800f3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3fa:	f383 8811 	msr	BASEPRI, r3
 800f3fe:	f3bf 8f6f 	isb	sy
 800f402:	f3bf 8f4f 	dsb	sy
 800f406:	61fb      	str	r3, [r7, #28]
}
 800f408:	bf00      	nop
 800f40a:	bf00      	nop
 800f40c:	e7fd      	b.n	800f40a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f40e:	f001 f937 	bl	8010680 <xTaskGetSchedulerState>
 800f412:	4603      	mov	r3, r0
 800f414:	2b00      	cmp	r3, #0
 800f416:	d102      	bne.n	800f41e <xQueueReceive+0x72>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d101      	bne.n	800f422 <xQueueReceive+0x76>
 800f41e:	2301      	movs	r3, #1
 800f420:	e000      	b.n	800f424 <xQueueReceive+0x78>
 800f422:	2300      	movs	r3, #0
 800f424:	2b00      	cmp	r3, #0
 800f426:	d10b      	bne.n	800f440 <xQueueReceive+0x94>
	__asm volatile
 800f428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f42c:	f383 8811 	msr	BASEPRI, r3
 800f430:	f3bf 8f6f 	isb	sy
 800f434:	f3bf 8f4f 	dsb	sy
 800f438:	61bb      	str	r3, [r7, #24]
}
 800f43a:	bf00      	nop
 800f43c:	bf00      	nop
 800f43e:	e7fd      	b.n	800f43c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f440:	f001 ff4a 	bl	80112d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f448:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d01f      	beq.n	800f490 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f450:	68b9      	ldr	r1, [r7, #8]
 800f452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f454:	f000 f99c 	bl	800f790 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f45a:	1e5a      	subs	r2, r3, #1
 800f45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f45e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d00f      	beq.n	800f488 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f46a:	3310      	adds	r3, #16
 800f46c:	4618      	mov	r0, r3
 800f46e:	f000 ff0f 	bl	8010290 <xTaskRemoveFromEventList>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d007      	beq.n	800f488 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f478:	4b3c      	ldr	r3, [pc, #240]	@ (800f56c <xQueueReceive+0x1c0>)
 800f47a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f47e:	601a      	str	r2, [r3, #0]
 800f480:	f3bf 8f4f 	dsb	sy
 800f484:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f488:	f001 ff58 	bl	801133c <vPortExitCritical>
				return pdPASS;
 800f48c:	2301      	movs	r3, #1
 800f48e:	e069      	b.n	800f564 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d103      	bne.n	800f49e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f496:	f001 ff51 	bl	801133c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f49a:	2300      	movs	r3, #0
 800f49c:	e062      	b.n	800f564 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d106      	bne.n	800f4b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f4a4:	f107 0310 	add.w	r3, r7, #16
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f000 ff55 	bl	8010358 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f4b2:	f001 ff43 	bl	801133c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f4b6:	f000 fcb3 	bl	800fe20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f4ba:	f001 ff0d 	bl	80112d8 <vPortEnterCritical>
 800f4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f4c4:	b25b      	sxtb	r3, r3
 800f4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ca:	d103      	bne.n	800f4d4 <xQueueReceive+0x128>
 800f4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f4da:	b25b      	sxtb	r3, r3
 800f4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4e0:	d103      	bne.n	800f4ea <xQueueReceive+0x13e>
 800f4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f4ea:	f001 ff27 	bl	801133c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f4ee:	1d3a      	adds	r2, r7, #4
 800f4f0:	f107 0310 	add.w	r3, r7, #16
 800f4f4:	4611      	mov	r1, r2
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f000 ff44 	bl	8010384 <xTaskCheckForTimeOut>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d123      	bne.n	800f54a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f504:	f000 f9bc 	bl	800f880 <prvIsQueueEmpty>
 800f508:	4603      	mov	r3, r0
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d017      	beq.n	800f53e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f510:	3324      	adds	r3, #36	@ 0x24
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	4611      	mov	r1, r2
 800f516:	4618      	mov	r0, r3
 800f518:	f000 fe68 	bl	80101ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f51c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f51e:	f000 f95d 	bl	800f7dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f522:	f000 fc8b 	bl	800fe3c <xTaskResumeAll>
 800f526:	4603      	mov	r3, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d189      	bne.n	800f440 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f52c:	4b0f      	ldr	r3, [pc, #60]	@ (800f56c <xQueueReceive+0x1c0>)
 800f52e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f532:	601a      	str	r2, [r3, #0]
 800f534:	f3bf 8f4f 	dsb	sy
 800f538:	f3bf 8f6f 	isb	sy
 800f53c:	e780      	b.n	800f440 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f53e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f540:	f000 f94c 	bl	800f7dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f544:	f000 fc7a 	bl	800fe3c <xTaskResumeAll>
 800f548:	e77a      	b.n	800f440 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f54a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f54c:	f000 f946 	bl	800f7dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f550:	f000 fc74 	bl	800fe3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f554:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f556:	f000 f993 	bl	800f880 <prvIsQueueEmpty>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	f43f af6f 	beq.w	800f440 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f562:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f564:	4618      	mov	r0, r3
 800f566:	3730      	adds	r7, #48	@ 0x30
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	e000ed04 	.word	0xe000ed04

0800f570 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b08e      	sub	sp, #56	@ 0x38
 800f574:	af00      	add	r7, sp, #0
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f582:	2b00      	cmp	r3, #0
 800f584:	d10b      	bne.n	800f59e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800f586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f58a:	f383 8811 	msr	BASEPRI, r3
 800f58e:	f3bf 8f6f 	isb	sy
 800f592:	f3bf 8f4f 	dsb	sy
 800f596:	623b      	str	r3, [r7, #32]
}
 800f598:	bf00      	nop
 800f59a:	bf00      	nop
 800f59c:	e7fd      	b.n	800f59a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d103      	bne.n	800f5ac <xQueueReceiveFromISR+0x3c>
 800f5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d101      	bne.n	800f5b0 <xQueueReceiveFromISR+0x40>
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	e000      	b.n	800f5b2 <xQueueReceiveFromISR+0x42>
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d10b      	bne.n	800f5ce <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800f5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ba:	f383 8811 	msr	BASEPRI, r3
 800f5be:	f3bf 8f6f 	isb	sy
 800f5c2:	f3bf 8f4f 	dsb	sy
 800f5c6:	61fb      	str	r3, [r7, #28]
}
 800f5c8:	bf00      	nop
 800f5ca:	bf00      	nop
 800f5cc:	e7fd      	b.n	800f5ca <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f5ce:	f001 ff63 	bl	8011498 <vPortValidateInterruptPriority>
	__asm volatile
 800f5d2:	f3ef 8211 	mrs	r2, BASEPRI
 800f5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5da:	f383 8811 	msr	BASEPRI, r3
 800f5de:	f3bf 8f6f 	isb	sy
 800f5e2:	f3bf 8f4f 	dsb	sy
 800f5e6:	61ba      	str	r2, [r7, #24]
 800f5e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f5ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f5ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5f2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d02f      	beq.n	800f65a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f604:	68b9      	ldr	r1, [r7, #8]
 800f606:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f608:	f000 f8c2 	bl	800f790 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f60e:	1e5a      	subs	r2, r3, #1
 800f610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f612:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f614:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f61c:	d112      	bne.n	800f644 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f620:	691b      	ldr	r3, [r3, #16]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d016      	beq.n	800f654 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f628:	3310      	adds	r3, #16
 800f62a:	4618      	mov	r0, r3
 800f62c:	f000 fe30 	bl	8010290 <xTaskRemoveFromEventList>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	d00e      	beq.n	800f654 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d00b      	beq.n	800f654 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2201      	movs	r2, #1
 800f640:	601a      	str	r2, [r3, #0]
 800f642:	e007      	b.n	800f654 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f644:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f648:	3301      	adds	r3, #1
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	b25a      	sxtb	r2, r3
 800f64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800f654:	2301      	movs	r3, #1
 800f656:	637b      	str	r3, [r7, #52]	@ 0x34
 800f658:	e001      	b.n	800f65e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800f65a:	2300      	movs	r3, #0
 800f65c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f660:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	f383 8811 	msr	BASEPRI, r3
}
 800f668:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	3738      	adds	r7, #56	@ 0x38
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b086      	sub	sp, #24
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d10b      	bne.n	800f69e <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 800f686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f68a:	f383 8811 	msr	BASEPRI, r3
 800f68e:	f3bf 8f6f 	isb	sy
 800f692:	f3bf 8f4f 	dsb	sy
 800f696:	60fb      	str	r3, [r7, #12]
}
 800f698:	bf00      	nop
 800f69a:	bf00      	nop
 800f69c:	e7fd      	b.n	800f69a <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800f69e:	f001 fe1b 	bl	80112d8 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6aa:	1ad3      	subs	r3, r2, r3
 800f6ac:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f6ae:	f001 fe45 	bl	801133c <vPortExitCritical>

	return uxReturn;
 800f6b2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3718      	adds	r7, #24
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b086      	sub	sp, #24
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	60b9      	str	r1, [r7, #8]
 800f6c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d10d      	bne.n	800f6f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d14d      	bne.n	800f77e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f000 ffe8 	bl	80106bc <xTaskPriorityDisinherit>
 800f6ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	609a      	str	r2, [r3, #8]
 800f6f4:	e043      	b.n	800f77e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d119      	bne.n	800f730 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	6858      	ldr	r0, [r3, #4]
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f704:	461a      	mov	r2, r3
 800f706:	68b9      	ldr	r1, [r7, #8]
 800f708:	f003 f925 	bl	8012956 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	685a      	ldr	r2, [r3, #4]
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f714:	441a      	add	r2, r3
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	685a      	ldr	r2, [r3, #4]
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	429a      	cmp	r2, r3
 800f724:	d32b      	bcc.n	800f77e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	605a      	str	r2, [r3, #4]
 800f72e:	e026      	b.n	800f77e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	68d8      	ldr	r0, [r3, #12]
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f738:	461a      	mov	r2, r3
 800f73a:	68b9      	ldr	r1, [r7, #8]
 800f73c:	f003 f90b 	bl	8012956 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	68da      	ldr	r2, [r3, #12]
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f748:	425b      	negs	r3, r3
 800f74a:	441a      	add	r2, r3
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	68da      	ldr	r2, [r3, #12]
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d207      	bcs.n	800f76c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	689a      	ldr	r2, [r3, #8]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f764:	425b      	negs	r3, r3
 800f766:	441a      	add	r2, r3
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2b02      	cmp	r3, #2
 800f770:	d105      	bne.n	800f77e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d002      	beq.n	800f77e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	3b01      	subs	r3, #1
 800f77c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	1c5a      	adds	r2, r3, #1
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f786:	697b      	ldr	r3, [r7, #20]
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3718      	adds	r7, #24
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d018      	beq.n	800f7d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	68da      	ldr	r2, [r3, #12]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7aa:	441a      	add	r2, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	68da      	ldr	r2, [r3, #12]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d303      	bcc.n	800f7c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	68d9      	ldr	r1, [r3, #12]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	6838      	ldr	r0, [r7, #0]
 800f7d0:	f003 f8c1 	bl	8012956 <memcpy>
	}
}
 800f7d4:	bf00      	nop
 800f7d6:	3708      	adds	r7, #8
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f7e4:	f001 fd78 	bl	80112d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f7ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f7f0:	e011      	b.n	800f816 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d012      	beq.n	800f820 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	3324      	adds	r3, #36	@ 0x24
 800f7fe:	4618      	mov	r0, r3
 800f800:	f000 fd46 	bl	8010290 <xTaskRemoveFromEventList>
 800f804:	4603      	mov	r3, r0
 800f806:	2b00      	cmp	r3, #0
 800f808:	d001      	beq.n	800f80e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f80a:	f000 fe1f 	bl	801044c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f80e:	7bfb      	ldrb	r3, [r7, #15]
 800f810:	3b01      	subs	r3, #1
 800f812:	b2db      	uxtb	r3, r3
 800f814:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	dce9      	bgt.n	800f7f2 <prvUnlockQueue+0x16>
 800f81e:	e000      	b.n	800f822 <prvUnlockQueue+0x46>
					break;
 800f820:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	22ff      	movs	r2, #255	@ 0xff
 800f826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f82a:	f001 fd87 	bl	801133c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f82e:	f001 fd53 	bl	80112d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f838:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f83a:	e011      	b.n	800f860 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	691b      	ldr	r3, [r3, #16]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d012      	beq.n	800f86a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	3310      	adds	r3, #16
 800f848:	4618      	mov	r0, r3
 800f84a:	f000 fd21 	bl	8010290 <xTaskRemoveFromEventList>
 800f84e:	4603      	mov	r3, r0
 800f850:	2b00      	cmp	r3, #0
 800f852:	d001      	beq.n	800f858 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f854:	f000 fdfa 	bl	801044c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f858:	7bbb      	ldrb	r3, [r7, #14]
 800f85a:	3b01      	subs	r3, #1
 800f85c:	b2db      	uxtb	r3, r3
 800f85e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f860:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f864:	2b00      	cmp	r3, #0
 800f866:	dce9      	bgt.n	800f83c <prvUnlockQueue+0x60>
 800f868:	e000      	b.n	800f86c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f86a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	22ff      	movs	r2, #255	@ 0xff
 800f870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f874:	f001 fd62 	bl	801133c <vPortExitCritical>
}
 800f878:	bf00      	nop
 800f87a:	3710      	adds	r7, #16
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}

0800f880 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b084      	sub	sp, #16
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f888:	f001 fd26 	bl	80112d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f890:	2b00      	cmp	r3, #0
 800f892:	d102      	bne.n	800f89a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f894:	2301      	movs	r3, #1
 800f896:	60fb      	str	r3, [r7, #12]
 800f898:	e001      	b.n	800f89e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f89a:	2300      	movs	r3, #0
 800f89c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f89e:	f001 fd4d 	bl	801133c <vPortExitCritical>

	return xReturn;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3710      	adds	r7, #16
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}

0800f8ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b084      	sub	sp, #16
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f8b4:	f001 fd10 	bl	80112d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d102      	bne.n	800f8ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	60fb      	str	r3, [r7, #12]
 800f8c8:	e001      	b.n	800f8ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f8ce:	f001 fd35 	bl	801133c <vPortExitCritical>

	return xReturn;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3710      	adds	r7, #16
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f8dc:	b480      	push	{r7}
 800f8de:	b085      	sub	sp, #20
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	60fb      	str	r3, [r7, #12]
 800f8ea:	e014      	b.n	800f916 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f8ec:	4a0f      	ldr	r2, [pc, #60]	@ (800f92c <vQueueAddToRegistry+0x50>)
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d10b      	bne.n	800f910 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f8f8:	490c      	ldr	r1, [pc, #48]	@ (800f92c <vQueueAddToRegistry+0x50>)
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	683a      	ldr	r2, [r7, #0]
 800f8fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f902:	4a0a      	ldr	r2, [pc, #40]	@ (800f92c <vQueueAddToRegistry+0x50>)
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	00db      	lsls	r3, r3, #3
 800f908:	4413      	add	r3, r2
 800f90a:	687a      	ldr	r2, [r7, #4]
 800f90c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f90e:	e006      	b.n	800f91e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	3301      	adds	r3, #1
 800f914:	60fb      	str	r3, [r7, #12]
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2b07      	cmp	r3, #7
 800f91a:	d9e7      	bls.n	800f8ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f91c:	bf00      	nop
 800f91e:	bf00      	nop
 800f920:	3714      	adds	r7, #20
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr
 800f92a:	bf00      	nop
 800f92c:	2000467c 	.word	0x2000467c

0800f930 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f930:	b580      	push	{r7, lr}
 800f932:	b086      	sub	sp, #24
 800f934:	af00      	add	r7, sp, #0
 800f936:	60f8      	str	r0, [r7, #12]
 800f938:	60b9      	str	r1, [r7, #8]
 800f93a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f940:	f001 fcca 	bl	80112d8 <vPortEnterCritical>
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f94a:	b25b      	sxtb	r3, r3
 800f94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f950:	d103      	bne.n	800f95a <vQueueWaitForMessageRestricted+0x2a>
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	2200      	movs	r2, #0
 800f956:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f960:	b25b      	sxtb	r3, r3
 800f962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f966:	d103      	bne.n	800f970 <vQueueWaitForMessageRestricted+0x40>
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	2200      	movs	r2, #0
 800f96c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f970:	f001 fce4 	bl	801133c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d106      	bne.n	800f98a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	3324      	adds	r3, #36	@ 0x24
 800f980:	687a      	ldr	r2, [r7, #4]
 800f982:	68b9      	ldr	r1, [r7, #8]
 800f984:	4618      	mov	r0, r3
 800f986:	f000 fc57 	bl	8010238 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f98a:	6978      	ldr	r0, [r7, #20]
 800f98c:	f7ff ff26 	bl	800f7dc <prvUnlockQueue>
	}
 800f990:	bf00      	nop
 800f992:	3718      	adds	r7, #24
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}

0800f998 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b08e      	sub	sp, #56	@ 0x38
 800f99c:	af04      	add	r7, sp, #16
 800f99e:	60f8      	str	r0, [r7, #12]
 800f9a0:	60b9      	str	r1, [r7, #8]
 800f9a2:	607a      	str	r2, [r7, #4]
 800f9a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f9a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d10b      	bne.n	800f9c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800f9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9b0:	f383 8811 	msr	BASEPRI, r3
 800f9b4:	f3bf 8f6f 	isb	sy
 800f9b8:	f3bf 8f4f 	dsb	sy
 800f9bc:	623b      	str	r3, [r7, #32]
}
 800f9be:	bf00      	nop
 800f9c0:	bf00      	nop
 800f9c2:	e7fd      	b.n	800f9c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d10b      	bne.n	800f9e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800f9ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9ce:	f383 8811 	msr	BASEPRI, r3
 800f9d2:	f3bf 8f6f 	isb	sy
 800f9d6:	f3bf 8f4f 	dsb	sy
 800f9da:	61fb      	str	r3, [r7, #28]
}
 800f9dc:	bf00      	nop
 800f9de:	bf00      	nop
 800f9e0:	e7fd      	b.n	800f9de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f9e2:	235c      	movs	r3, #92	@ 0x5c
 800f9e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	2b5c      	cmp	r3, #92	@ 0x5c
 800f9ea:	d00b      	beq.n	800fa04 <xTaskCreateStatic+0x6c>
	__asm volatile
 800f9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9f0:	f383 8811 	msr	BASEPRI, r3
 800f9f4:	f3bf 8f6f 	isb	sy
 800f9f8:	f3bf 8f4f 	dsb	sy
 800f9fc:	61bb      	str	r3, [r7, #24]
}
 800f9fe:	bf00      	nop
 800fa00:	bf00      	nop
 800fa02:	e7fd      	b.n	800fa00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fa04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fa06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d01e      	beq.n	800fa4a <xTaskCreateStatic+0xb2>
 800fa0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d01b      	beq.n	800fa4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fa12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fa1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa1e:	2202      	movs	r2, #2
 800fa20:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fa24:	2300      	movs	r3, #0
 800fa26:	9303      	str	r3, [sp, #12]
 800fa28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa2a:	9302      	str	r3, [sp, #8]
 800fa2c:	f107 0314 	add.w	r3, r7, #20
 800fa30:	9301      	str	r3, [sp, #4]
 800fa32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa34:	9300      	str	r3, [sp, #0]
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	687a      	ldr	r2, [r7, #4]
 800fa3a:	68b9      	ldr	r1, [r7, #8]
 800fa3c:	68f8      	ldr	r0, [r7, #12]
 800fa3e:	f000 f850 	bl	800fae2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fa42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fa44:	f000 f8de 	bl	800fc04 <prvAddNewTaskToReadyList>
 800fa48:	e001      	b.n	800fa4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fa4e:	697b      	ldr	r3, [r7, #20]
	}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3728      	adds	r7, #40	@ 0x28
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b08c      	sub	sp, #48	@ 0x30
 800fa5c:	af04      	add	r7, sp, #16
 800fa5e:	60f8      	str	r0, [r7, #12]
 800fa60:	60b9      	str	r1, [r7, #8]
 800fa62:	603b      	str	r3, [r7, #0]
 800fa64:	4613      	mov	r3, r2
 800fa66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fa68:	88fb      	ldrh	r3, [r7, #6]
 800fa6a:	009b      	lsls	r3, r3, #2
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f001 fd55 	bl	801151c <pvPortMalloc>
 800fa72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d00e      	beq.n	800fa98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fa7a:	205c      	movs	r0, #92	@ 0x5c
 800fa7c:	f001 fd4e 	bl	801151c <pvPortMalloc>
 800fa80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fa82:	69fb      	ldr	r3, [r7, #28]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d003      	beq.n	800fa90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fa88:	69fb      	ldr	r3, [r7, #28]
 800fa8a:	697a      	ldr	r2, [r7, #20]
 800fa8c:	631a      	str	r2, [r3, #48]	@ 0x30
 800fa8e:	e005      	b.n	800fa9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fa90:	6978      	ldr	r0, [r7, #20]
 800fa92:	f001 fe11 	bl	80116b8 <vPortFree>
 800fa96:	e001      	b.n	800fa9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fa98:	2300      	movs	r3, #0
 800fa9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fa9c:	69fb      	ldr	r3, [r7, #28]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d017      	beq.n	800fad2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800faa2:	69fb      	ldr	r3, [r7, #28]
 800faa4:	2200      	movs	r2, #0
 800faa6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800faaa:	88fa      	ldrh	r2, [r7, #6]
 800faac:	2300      	movs	r3, #0
 800faae:	9303      	str	r3, [sp, #12]
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	9302      	str	r3, [sp, #8]
 800fab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fab6:	9301      	str	r3, [sp, #4]
 800fab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faba:	9300      	str	r3, [sp, #0]
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	68b9      	ldr	r1, [r7, #8]
 800fac0:	68f8      	ldr	r0, [r7, #12]
 800fac2:	f000 f80e 	bl	800fae2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fac6:	69f8      	ldr	r0, [r7, #28]
 800fac8:	f000 f89c 	bl	800fc04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800facc:	2301      	movs	r3, #1
 800face:	61bb      	str	r3, [r7, #24]
 800fad0:	e002      	b.n	800fad8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fad2:	f04f 33ff 	mov.w	r3, #4294967295
 800fad6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fad8:	69bb      	ldr	r3, [r7, #24]
	}
 800fada:	4618      	mov	r0, r3
 800fadc:	3720      	adds	r7, #32
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}

0800fae2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fae2:	b580      	push	{r7, lr}
 800fae4:	b088      	sub	sp, #32
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	60f8      	str	r0, [r7, #12]
 800faea:	60b9      	str	r1, [r7, #8]
 800faec:	607a      	str	r2, [r7, #4]
 800faee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800faf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faf2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	009b      	lsls	r3, r3, #2
 800faf8:	461a      	mov	r2, r3
 800fafa:	21a5      	movs	r1, #165	@ 0xa5
 800fafc:	f002 feab 	bl	8012856 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fb00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fb0a:	3b01      	subs	r3, #1
 800fb0c:	009b      	lsls	r3, r3, #2
 800fb0e:	4413      	add	r3, r2
 800fb10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	f023 0307 	bic.w	r3, r3, #7
 800fb18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fb1a:	69bb      	ldr	r3, [r7, #24]
 800fb1c:	f003 0307 	and.w	r3, r3, #7
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d00b      	beq.n	800fb3c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800fb24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb28:	f383 8811 	msr	BASEPRI, r3
 800fb2c:	f3bf 8f6f 	isb	sy
 800fb30:	f3bf 8f4f 	dsb	sy
 800fb34:	617b      	str	r3, [r7, #20]
}
 800fb36:	bf00      	nop
 800fb38:	bf00      	nop
 800fb3a:	e7fd      	b.n	800fb38 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d01f      	beq.n	800fb82 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fb42:	2300      	movs	r3, #0
 800fb44:	61fb      	str	r3, [r7, #28]
 800fb46:	e012      	b.n	800fb6e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fb48:	68ba      	ldr	r2, [r7, #8]
 800fb4a:	69fb      	ldr	r3, [r7, #28]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	7819      	ldrb	r1, [r3, #0]
 800fb50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb52:	69fb      	ldr	r3, [r7, #28]
 800fb54:	4413      	add	r3, r2
 800fb56:	3334      	adds	r3, #52	@ 0x34
 800fb58:	460a      	mov	r2, r1
 800fb5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fb5c:	68ba      	ldr	r2, [r7, #8]
 800fb5e:	69fb      	ldr	r3, [r7, #28]
 800fb60:	4413      	add	r3, r2
 800fb62:	781b      	ldrb	r3, [r3, #0]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d006      	beq.n	800fb76 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fb68:	69fb      	ldr	r3, [r7, #28]
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	61fb      	str	r3, [r7, #28]
 800fb6e:	69fb      	ldr	r3, [r7, #28]
 800fb70:	2b0f      	cmp	r3, #15
 800fb72:	d9e9      	bls.n	800fb48 <prvInitialiseNewTask+0x66>
 800fb74:	e000      	b.n	800fb78 <prvInitialiseNewTask+0x96>
			{
				break;
 800fb76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fb78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fb80:	e003      	b.n	800fb8a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fb82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb84:	2200      	movs	r2, #0
 800fb86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb8c:	2b37      	cmp	r3, #55	@ 0x37
 800fb8e:	d901      	bls.n	800fb94 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fb90:	2337      	movs	r3, #55	@ 0x37
 800fb92:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fb98:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fb9e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba2:	2200      	movs	r2, #0
 800fba4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba8:	3304      	adds	r3, #4
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7ff f884 	bl	800ecb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb2:	3318      	adds	r3, #24
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7ff f87f 	bl	800ecb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbc2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fbc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fbd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbd8:	2200      	movs	r2, #0
 800fbda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fbde:	683a      	ldr	r2, [r7, #0]
 800fbe0:	68f9      	ldr	r1, [r7, #12]
 800fbe2:	69b8      	ldr	r0, [r7, #24]
 800fbe4:	f001 fa48 	bl	8011078 <pxPortInitialiseStack>
 800fbe8:	4602      	mov	r2, r0
 800fbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fbee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d002      	beq.n	800fbfa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fbfa:	bf00      	nop
 800fbfc:	3720      	adds	r7, #32
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
	...

0800fc04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fc0c:	f001 fb64 	bl	80112d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fc10:	4b2d      	ldr	r3, [pc, #180]	@ (800fcc8 <prvAddNewTaskToReadyList+0xc4>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	3301      	adds	r3, #1
 800fc16:	4a2c      	ldr	r2, [pc, #176]	@ (800fcc8 <prvAddNewTaskToReadyList+0xc4>)
 800fc18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fc1a:	4b2c      	ldr	r3, [pc, #176]	@ (800fccc <prvAddNewTaskToReadyList+0xc8>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d109      	bne.n	800fc36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fc22:	4a2a      	ldr	r2, [pc, #168]	@ (800fccc <prvAddNewTaskToReadyList+0xc8>)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fc28:	4b27      	ldr	r3, [pc, #156]	@ (800fcc8 <prvAddNewTaskToReadyList+0xc4>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d110      	bne.n	800fc52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fc30:	f000 fc30 	bl	8010494 <prvInitialiseTaskLists>
 800fc34:	e00d      	b.n	800fc52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fc36:	4b26      	ldr	r3, [pc, #152]	@ (800fcd0 <prvAddNewTaskToReadyList+0xcc>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d109      	bne.n	800fc52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fc3e:	4b23      	ldr	r3, [pc, #140]	@ (800fccc <prvAddNewTaskToReadyList+0xc8>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d802      	bhi.n	800fc52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fc4c:	4a1f      	ldr	r2, [pc, #124]	@ (800fccc <prvAddNewTaskToReadyList+0xc8>)
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fc52:	4b20      	ldr	r3, [pc, #128]	@ (800fcd4 <prvAddNewTaskToReadyList+0xd0>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	3301      	adds	r3, #1
 800fc58:	4a1e      	ldr	r2, [pc, #120]	@ (800fcd4 <prvAddNewTaskToReadyList+0xd0>)
 800fc5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fc5c:	4b1d      	ldr	r3, [pc, #116]	@ (800fcd4 <prvAddNewTaskToReadyList+0xd0>)
 800fc5e:	681a      	ldr	r2, [r3, #0]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc68:	4b1b      	ldr	r3, [pc, #108]	@ (800fcd8 <prvAddNewTaskToReadyList+0xd4>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d903      	bls.n	800fc78 <prvAddNewTaskToReadyList+0x74>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc74:	4a18      	ldr	r2, [pc, #96]	@ (800fcd8 <prvAddNewTaskToReadyList+0xd4>)
 800fc76:	6013      	str	r3, [r2, #0]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc7c:	4613      	mov	r3, r2
 800fc7e:	009b      	lsls	r3, r3, #2
 800fc80:	4413      	add	r3, r2
 800fc82:	009b      	lsls	r3, r3, #2
 800fc84:	4a15      	ldr	r2, [pc, #84]	@ (800fcdc <prvAddNewTaskToReadyList+0xd8>)
 800fc86:	441a      	add	r2, r3
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	3304      	adds	r3, #4
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	4610      	mov	r0, r2
 800fc90:	f7ff f81f 	bl	800ecd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fc94:	f001 fb52 	bl	801133c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fc98:	4b0d      	ldr	r3, [pc, #52]	@ (800fcd0 <prvAddNewTaskToReadyList+0xcc>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d00e      	beq.n	800fcbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fca0:	4b0a      	ldr	r3, [pc, #40]	@ (800fccc <prvAddNewTaskToReadyList+0xc8>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d207      	bcs.n	800fcbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fcae:	4b0c      	ldr	r3, [pc, #48]	@ (800fce0 <prvAddNewTaskToReadyList+0xdc>)
 800fcb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fcb4:	601a      	str	r2, [r3, #0]
 800fcb6:	f3bf 8f4f 	dsb	sy
 800fcba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fcbe:	bf00      	nop
 800fcc0:	3708      	adds	r7, #8
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	20004b90 	.word	0x20004b90
 800fccc:	200046bc 	.word	0x200046bc
 800fcd0:	20004b9c 	.word	0x20004b9c
 800fcd4:	20004bac 	.word	0x20004bac
 800fcd8:	20004b98 	.word	0x20004b98
 800fcdc:	200046c0 	.word	0x200046c0
 800fce0:	e000ed04 	.word	0xe000ed04

0800fce4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b084      	sub	sp, #16
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fcec:	2300      	movs	r3, #0
 800fcee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d018      	beq.n	800fd28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fcf6:	4b14      	ldr	r3, [pc, #80]	@ (800fd48 <vTaskDelay+0x64>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d00b      	beq.n	800fd16 <vTaskDelay+0x32>
	__asm volatile
 800fcfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd02:	f383 8811 	msr	BASEPRI, r3
 800fd06:	f3bf 8f6f 	isb	sy
 800fd0a:	f3bf 8f4f 	dsb	sy
 800fd0e:	60bb      	str	r3, [r7, #8]
}
 800fd10:	bf00      	nop
 800fd12:	bf00      	nop
 800fd14:	e7fd      	b.n	800fd12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fd16:	f000 f883 	bl	800fe20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fd1a:	2100      	movs	r1, #0
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f000 fd3d 	bl	801079c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fd22:	f000 f88b 	bl	800fe3c <xTaskResumeAll>
 800fd26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d107      	bne.n	800fd3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800fd2e:	4b07      	ldr	r3, [pc, #28]	@ (800fd4c <vTaskDelay+0x68>)
 800fd30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd34:	601a      	str	r2, [r3, #0]
 800fd36:	f3bf 8f4f 	dsb	sy
 800fd3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fd3e:	bf00      	nop
 800fd40:	3710      	adds	r7, #16
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	bf00      	nop
 800fd48:	20004bb8 	.word	0x20004bb8
 800fd4c:	e000ed04 	.word	0xe000ed04

0800fd50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b08a      	sub	sp, #40	@ 0x28
 800fd54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fd56:	2300      	movs	r3, #0
 800fd58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fd5e:	463a      	mov	r2, r7
 800fd60:	1d39      	adds	r1, r7, #4
 800fd62:	f107 0308 	add.w	r3, r7, #8
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7fe ff52 	bl	800ec10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fd6c:	6839      	ldr	r1, [r7, #0]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	68ba      	ldr	r2, [r7, #8]
 800fd72:	9202      	str	r2, [sp, #8]
 800fd74:	9301      	str	r3, [sp, #4]
 800fd76:	2300      	movs	r3, #0
 800fd78:	9300      	str	r3, [sp, #0]
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	460a      	mov	r2, r1
 800fd7e:	4922      	ldr	r1, [pc, #136]	@ (800fe08 <vTaskStartScheduler+0xb8>)
 800fd80:	4822      	ldr	r0, [pc, #136]	@ (800fe0c <vTaskStartScheduler+0xbc>)
 800fd82:	f7ff fe09 	bl	800f998 <xTaskCreateStatic>
 800fd86:	4603      	mov	r3, r0
 800fd88:	4a21      	ldr	r2, [pc, #132]	@ (800fe10 <vTaskStartScheduler+0xc0>)
 800fd8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fd8c:	4b20      	ldr	r3, [pc, #128]	@ (800fe10 <vTaskStartScheduler+0xc0>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d002      	beq.n	800fd9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fd94:	2301      	movs	r3, #1
 800fd96:	617b      	str	r3, [r7, #20]
 800fd98:	e001      	b.n	800fd9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	d102      	bne.n	800fdaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fda4:	f000 fd4e 	bl	8010844 <xTimerCreateTimerTask>
 800fda8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d116      	bne.n	800fdde <vTaskStartScheduler+0x8e>
	__asm volatile
 800fdb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdb4:	f383 8811 	msr	BASEPRI, r3
 800fdb8:	f3bf 8f6f 	isb	sy
 800fdbc:	f3bf 8f4f 	dsb	sy
 800fdc0:	613b      	str	r3, [r7, #16]
}
 800fdc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fdc4:	4b13      	ldr	r3, [pc, #76]	@ (800fe14 <vTaskStartScheduler+0xc4>)
 800fdc6:	f04f 32ff 	mov.w	r2, #4294967295
 800fdca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fdcc:	4b12      	ldr	r3, [pc, #72]	@ (800fe18 <vTaskStartScheduler+0xc8>)
 800fdce:	2201      	movs	r2, #1
 800fdd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fdd2:	4b12      	ldr	r3, [pc, #72]	@ (800fe1c <vTaskStartScheduler+0xcc>)
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fdd8:	f001 f9da 	bl	8011190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fddc:	e00f      	b.n	800fdfe <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fde4:	d10b      	bne.n	800fdfe <vTaskStartScheduler+0xae>
	__asm volatile
 800fde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdea:	f383 8811 	msr	BASEPRI, r3
 800fdee:	f3bf 8f6f 	isb	sy
 800fdf2:	f3bf 8f4f 	dsb	sy
 800fdf6:	60fb      	str	r3, [r7, #12]
}
 800fdf8:	bf00      	nop
 800fdfa:	bf00      	nop
 800fdfc:	e7fd      	b.n	800fdfa <vTaskStartScheduler+0xaa>
}
 800fdfe:	bf00      	nop
 800fe00:	3718      	adds	r7, #24
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	08014bb8 	.word	0x08014bb8
 800fe0c:	08010465 	.word	0x08010465
 800fe10:	20004bb4 	.word	0x20004bb4
 800fe14:	20004bb0 	.word	0x20004bb0
 800fe18:	20004b9c 	.word	0x20004b9c
 800fe1c:	20004b94 	.word	0x20004b94

0800fe20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fe20:	b480      	push	{r7}
 800fe22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fe24:	4b04      	ldr	r3, [pc, #16]	@ (800fe38 <vTaskSuspendAll+0x18>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	3301      	adds	r3, #1
 800fe2a:	4a03      	ldr	r2, [pc, #12]	@ (800fe38 <vTaskSuspendAll+0x18>)
 800fe2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fe2e:	bf00      	nop
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr
 800fe38:	20004bb8 	.word	0x20004bb8

0800fe3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b084      	sub	sp, #16
 800fe40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fe42:	2300      	movs	r3, #0
 800fe44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fe46:	2300      	movs	r3, #0
 800fe48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fe4a:	4b42      	ldr	r3, [pc, #264]	@ (800ff54 <xTaskResumeAll+0x118>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d10b      	bne.n	800fe6a <xTaskResumeAll+0x2e>
	__asm volatile
 800fe52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe56:	f383 8811 	msr	BASEPRI, r3
 800fe5a:	f3bf 8f6f 	isb	sy
 800fe5e:	f3bf 8f4f 	dsb	sy
 800fe62:	603b      	str	r3, [r7, #0]
}
 800fe64:	bf00      	nop
 800fe66:	bf00      	nop
 800fe68:	e7fd      	b.n	800fe66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fe6a:	f001 fa35 	bl	80112d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fe6e:	4b39      	ldr	r3, [pc, #228]	@ (800ff54 <xTaskResumeAll+0x118>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	3b01      	subs	r3, #1
 800fe74:	4a37      	ldr	r2, [pc, #220]	@ (800ff54 <xTaskResumeAll+0x118>)
 800fe76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe78:	4b36      	ldr	r3, [pc, #216]	@ (800ff54 <xTaskResumeAll+0x118>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d162      	bne.n	800ff46 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fe80:	4b35      	ldr	r3, [pc, #212]	@ (800ff58 <xTaskResumeAll+0x11c>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d05e      	beq.n	800ff46 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fe88:	e02f      	b.n	800feea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe8a:	4b34      	ldr	r3, [pc, #208]	@ (800ff5c <xTaskResumeAll+0x120>)
 800fe8c:	68db      	ldr	r3, [r3, #12]
 800fe8e:	68db      	ldr	r3, [r3, #12]
 800fe90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	3318      	adds	r3, #24
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7fe ff78 	bl	800ed8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	3304      	adds	r3, #4
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7fe ff73 	bl	800ed8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800feaa:	4b2d      	ldr	r3, [pc, #180]	@ (800ff60 <xTaskResumeAll+0x124>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	429a      	cmp	r2, r3
 800feb0:	d903      	bls.n	800feba <xTaskResumeAll+0x7e>
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800feb6:	4a2a      	ldr	r2, [pc, #168]	@ (800ff60 <xTaskResumeAll+0x124>)
 800feb8:	6013      	str	r3, [r2, #0]
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800febe:	4613      	mov	r3, r2
 800fec0:	009b      	lsls	r3, r3, #2
 800fec2:	4413      	add	r3, r2
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	4a27      	ldr	r2, [pc, #156]	@ (800ff64 <xTaskResumeAll+0x128>)
 800fec8:	441a      	add	r2, r3
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	3304      	adds	r3, #4
 800fece:	4619      	mov	r1, r3
 800fed0:	4610      	mov	r0, r2
 800fed2:	f7fe fefe 	bl	800ecd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800feda:	4b23      	ldr	r3, [pc, #140]	@ (800ff68 <xTaskResumeAll+0x12c>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fee0:	429a      	cmp	r2, r3
 800fee2:	d302      	bcc.n	800feea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800fee4:	4b21      	ldr	r3, [pc, #132]	@ (800ff6c <xTaskResumeAll+0x130>)
 800fee6:	2201      	movs	r2, #1
 800fee8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800feea:	4b1c      	ldr	r3, [pc, #112]	@ (800ff5c <xTaskResumeAll+0x120>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d1cb      	bne.n	800fe8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d001      	beq.n	800fefc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fef8:	f000 fba2 	bl	8010640 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fefc:	4b1c      	ldr	r3, [pc, #112]	@ (800ff70 <xTaskResumeAll+0x134>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d010      	beq.n	800ff2a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ff08:	f000 f858 	bl	800ffbc <xTaskIncrementTick>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d002      	beq.n	800ff18 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ff12:	4b16      	ldr	r3, [pc, #88]	@ (800ff6c <xTaskResumeAll+0x130>)
 800ff14:	2201      	movs	r2, #1
 800ff16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	3b01      	subs	r3, #1
 800ff1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d1f1      	bne.n	800ff08 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ff24:	4b12      	ldr	r3, [pc, #72]	@ (800ff70 <xTaskResumeAll+0x134>)
 800ff26:	2200      	movs	r2, #0
 800ff28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ff2a:	4b10      	ldr	r3, [pc, #64]	@ (800ff6c <xTaskResumeAll+0x130>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d009      	beq.n	800ff46 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ff32:	2301      	movs	r3, #1
 800ff34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ff36:	4b0f      	ldr	r3, [pc, #60]	@ (800ff74 <xTaskResumeAll+0x138>)
 800ff38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff3c:	601a      	str	r2, [r3, #0]
 800ff3e:	f3bf 8f4f 	dsb	sy
 800ff42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ff46:	f001 f9f9 	bl	801133c <vPortExitCritical>

	return xAlreadyYielded;
 800ff4a:	68bb      	ldr	r3, [r7, #8]
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3710      	adds	r7, #16
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	20004bb8 	.word	0x20004bb8
 800ff58:	20004b90 	.word	0x20004b90
 800ff5c:	20004b50 	.word	0x20004b50
 800ff60:	20004b98 	.word	0x20004b98
 800ff64:	200046c0 	.word	0x200046c0
 800ff68:	200046bc 	.word	0x200046bc
 800ff6c:	20004ba4 	.word	0x20004ba4
 800ff70:	20004ba0 	.word	0x20004ba0
 800ff74:	e000ed04 	.word	0xe000ed04

0800ff78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ff7e:	4b05      	ldr	r3, [pc, #20]	@ (800ff94 <xTaskGetTickCount+0x1c>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ff84:	687b      	ldr	r3, [r7, #4]
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	370c      	adds	r7, #12
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr
 800ff92:	bf00      	nop
 800ff94:	20004b94 	.word	0x20004b94

0800ff98 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ff9e:	f001 fa7b 	bl	8011498 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ffa6:	4b04      	ldr	r3, [pc, #16]	@ (800ffb8 <xTaskGetTickCountFromISR+0x20>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ffac:	683b      	ldr	r3, [r7, #0]
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3708      	adds	r7, #8
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}
 800ffb6:	bf00      	nop
 800ffb8:	20004b94 	.word	0x20004b94

0800ffbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b086      	sub	sp, #24
 800ffc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffc6:	4b4f      	ldr	r3, [pc, #316]	@ (8010104 <xTaskIncrementTick+0x148>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	f040 8090 	bne.w	80100f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ffd0:	4b4d      	ldr	r3, [pc, #308]	@ (8010108 <xTaskIncrementTick+0x14c>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	3301      	adds	r3, #1
 800ffd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ffd8:	4a4b      	ldr	r2, [pc, #300]	@ (8010108 <xTaskIncrementTick+0x14c>)
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d121      	bne.n	8010028 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ffe4:	4b49      	ldr	r3, [pc, #292]	@ (801010c <xTaskIncrementTick+0x150>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d00b      	beq.n	8010006 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ffee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fff2:	f383 8811 	msr	BASEPRI, r3
 800fff6:	f3bf 8f6f 	isb	sy
 800fffa:	f3bf 8f4f 	dsb	sy
 800fffe:	603b      	str	r3, [r7, #0]
}
 8010000:	bf00      	nop
 8010002:	bf00      	nop
 8010004:	e7fd      	b.n	8010002 <xTaskIncrementTick+0x46>
 8010006:	4b41      	ldr	r3, [pc, #260]	@ (801010c <xTaskIncrementTick+0x150>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	60fb      	str	r3, [r7, #12]
 801000c:	4b40      	ldr	r3, [pc, #256]	@ (8010110 <xTaskIncrementTick+0x154>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	4a3e      	ldr	r2, [pc, #248]	@ (801010c <xTaskIncrementTick+0x150>)
 8010012:	6013      	str	r3, [r2, #0]
 8010014:	4a3e      	ldr	r2, [pc, #248]	@ (8010110 <xTaskIncrementTick+0x154>)
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	6013      	str	r3, [r2, #0]
 801001a:	4b3e      	ldr	r3, [pc, #248]	@ (8010114 <xTaskIncrementTick+0x158>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	3301      	adds	r3, #1
 8010020:	4a3c      	ldr	r2, [pc, #240]	@ (8010114 <xTaskIncrementTick+0x158>)
 8010022:	6013      	str	r3, [r2, #0]
 8010024:	f000 fb0c 	bl	8010640 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010028:	4b3b      	ldr	r3, [pc, #236]	@ (8010118 <xTaskIncrementTick+0x15c>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	693a      	ldr	r2, [r7, #16]
 801002e:	429a      	cmp	r2, r3
 8010030:	d349      	bcc.n	80100c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010032:	4b36      	ldr	r3, [pc, #216]	@ (801010c <xTaskIncrementTick+0x150>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d104      	bne.n	8010046 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801003c:	4b36      	ldr	r3, [pc, #216]	@ (8010118 <xTaskIncrementTick+0x15c>)
 801003e:	f04f 32ff 	mov.w	r2, #4294967295
 8010042:	601a      	str	r2, [r3, #0]
					break;
 8010044:	e03f      	b.n	80100c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010046:	4b31      	ldr	r3, [pc, #196]	@ (801010c <xTaskIncrementTick+0x150>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	68db      	ldr	r3, [r3, #12]
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	685b      	ldr	r3, [r3, #4]
 8010054:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010056:	693a      	ldr	r2, [r7, #16]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	429a      	cmp	r2, r3
 801005c:	d203      	bcs.n	8010066 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801005e:	4a2e      	ldr	r2, [pc, #184]	@ (8010118 <xTaskIncrementTick+0x15c>)
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010064:	e02f      	b.n	80100c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	3304      	adds	r3, #4
 801006a:	4618      	mov	r0, r3
 801006c:	f7fe fe8e 	bl	800ed8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010074:	2b00      	cmp	r3, #0
 8010076:	d004      	beq.n	8010082 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	3318      	adds	r3, #24
 801007c:	4618      	mov	r0, r3
 801007e:	f7fe fe85 	bl	800ed8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010086:	4b25      	ldr	r3, [pc, #148]	@ (801011c <xTaskIncrementTick+0x160>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	429a      	cmp	r2, r3
 801008c:	d903      	bls.n	8010096 <xTaskIncrementTick+0xda>
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010092:	4a22      	ldr	r2, [pc, #136]	@ (801011c <xTaskIncrementTick+0x160>)
 8010094:	6013      	str	r3, [r2, #0]
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801009a:	4613      	mov	r3, r2
 801009c:	009b      	lsls	r3, r3, #2
 801009e:	4413      	add	r3, r2
 80100a0:	009b      	lsls	r3, r3, #2
 80100a2:	4a1f      	ldr	r2, [pc, #124]	@ (8010120 <xTaskIncrementTick+0x164>)
 80100a4:	441a      	add	r2, r3
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	3304      	adds	r3, #4
 80100aa:	4619      	mov	r1, r3
 80100ac:	4610      	mov	r0, r2
 80100ae:	f7fe fe10 	bl	800ecd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100b6:	4b1b      	ldr	r3, [pc, #108]	@ (8010124 <xTaskIncrementTick+0x168>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100bc:	429a      	cmp	r2, r3
 80100be:	d3b8      	bcc.n	8010032 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80100c0:	2301      	movs	r3, #1
 80100c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100c4:	e7b5      	b.n	8010032 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80100c6:	4b17      	ldr	r3, [pc, #92]	@ (8010124 <xTaskIncrementTick+0x168>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100cc:	4914      	ldr	r1, [pc, #80]	@ (8010120 <xTaskIncrementTick+0x164>)
 80100ce:	4613      	mov	r3, r2
 80100d0:	009b      	lsls	r3, r3, #2
 80100d2:	4413      	add	r3, r2
 80100d4:	009b      	lsls	r3, r3, #2
 80100d6:	440b      	add	r3, r1
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	2b01      	cmp	r3, #1
 80100dc:	d901      	bls.n	80100e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80100de:	2301      	movs	r3, #1
 80100e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80100e2:	4b11      	ldr	r3, [pc, #68]	@ (8010128 <xTaskIncrementTick+0x16c>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d007      	beq.n	80100fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80100ea:	2301      	movs	r3, #1
 80100ec:	617b      	str	r3, [r7, #20]
 80100ee:	e004      	b.n	80100fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80100f0:	4b0e      	ldr	r3, [pc, #56]	@ (801012c <xTaskIncrementTick+0x170>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	3301      	adds	r3, #1
 80100f6:	4a0d      	ldr	r2, [pc, #52]	@ (801012c <xTaskIncrementTick+0x170>)
 80100f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80100fa:	697b      	ldr	r3, [r7, #20]
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3718      	adds	r7, #24
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	20004bb8 	.word	0x20004bb8
 8010108:	20004b94 	.word	0x20004b94
 801010c:	20004b48 	.word	0x20004b48
 8010110:	20004b4c 	.word	0x20004b4c
 8010114:	20004ba8 	.word	0x20004ba8
 8010118:	20004bb0 	.word	0x20004bb0
 801011c:	20004b98 	.word	0x20004b98
 8010120:	200046c0 	.word	0x200046c0
 8010124:	200046bc 	.word	0x200046bc
 8010128:	20004ba4 	.word	0x20004ba4
 801012c:	20004ba0 	.word	0x20004ba0

08010130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010130:	b480      	push	{r7}
 8010132:	b085      	sub	sp, #20
 8010134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010136:	4b28      	ldr	r3, [pc, #160]	@ (80101d8 <vTaskSwitchContext+0xa8>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d003      	beq.n	8010146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801013e:	4b27      	ldr	r3, [pc, #156]	@ (80101dc <vTaskSwitchContext+0xac>)
 8010140:	2201      	movs	r2, #1
 8010142:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010144:	e042      	b.n	80101cc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8010146:	4b25      	ldr	r3, [pc, #148]	@ (80101dc <vTaskSwitchContext+0xac>)
 8010148:	2200      	movs	r2, #0
 801014a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801014c:	4b24      	ldr	r3, [pc, #144]	@ (80101e0 <vTaskSwitchContext+0xb0>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	60fb      	str	r3, [r7, #12]
 8010152:	e011      	b.n	8010178 <vTaskSwitchContext+0x48>
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d10b      	bne.n	8010172 <vTaskSwitchContext+0x42>
	__asm volatile
 801015a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801015e:	f383 8811 	msr	BASEPRI, r3
 8010162:	f3bf 8f6f 	isb	sy
 8010166:	f3bf 8f4f 	dsb	sy
 801016a:	607b      	str	r3, [r7, #4]
}
 801016c:	bf00      	nop
 801016e:	bf00      	nop
 8010170:	e7fd      	b.n	801016e <vTaskSwitchContext+0x3e>
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	3b01      	subs	r3, #1
 8010176:	60fb      	str	r3, [r7, #12]
 8010178:	491a      	ldr	r1, [pc, #104]	@ (80101e4 <vTaskSwitchContext+0xb4>)
 801017a:	68fa      	ldr	r2, [r7, #12]
 801017c:	4613      	mov	r3, r2
 801017e:	009b      	lsls	r3, r3, #2
 8010180:	4413      	add	r3, r2
 8010182:	009b      	lsls	r3, r3, #2
 8010184:	440b      	add	r3, r1
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d0e3      	beq.n	8010154 <vTaskSwitchContext+0x24>
 801018c:	68fa      	ldr	r2, [r7, #12]
 801018e:	4613      	mov	r3, r2
 8010190:	009b      	lsls	r3, r3, #2
 8010192:	4413      	add	r3, r2
 8010194:	009b      	lsls	r3, r3, #2
 8010196:	4a13      	ldr	r2, [pc, #76]	@ (80101e4 <vTaskSwitchContext+0xb4>)
 8010198:	4413      	add	r3, r2
 801019a:	60bb      	str	r3, [r7, #8]
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	685a      	ldr	r2, [r3, #4]
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	605a      	str	r2, [r3, #4]
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	685a      	ldr	r2, [r3, #4]
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	3308      	adds	r3, #8
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d104      	bne.n	80101bc <vTaskSwitchContext+0x8c>
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	685a      	ldr	r2, [r3, #4]
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	605a      	str	r2, [r3, #4]
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	68db      	ldr	r3, [r3, #12]
 80101c2:	4a09      	ldr	r2, [pc, #36]	@ (80101e8 <vTaskSwitchContext+0xb8>)
 80101c4:	6013      	str	r3, [r2, #0]
 80101c6:	4a06      	ldr	r2, [pc, #24]	@ (80101e0 <vTaskSwitchContext+0xb0>)
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	6013      	str	r3, [r2, #0]
}
 80101cc:	bf00      	nop
 80101ce:	3714      	adds	r7, #20
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr
 80101d8:	20004bb8 	.word	0x20004bb8
 80101dc:	20004ba4 	.word	0x20004ba4
 80101e0:	20004b98 	.word	0x20004b98
 80101e4:	200046c0 	.word	0x200046c0
 80101e8:	200046bc 	.word	0x200046bc

080101ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d10b      	bne.n	8010214 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80101fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010200:	f383 8811 	msr	BASEPRI, r3
 8010204:	f3bf 8f6f 	isb	sy
 8010208:	f3bf 8f4f 	dsb	sy
 801020c:	60fb      	str	r3, [r7, #12]
}
 801020e:	bf00      	nop
 8010210:	bf00      	nop
 8010212:	e7fd      	b.n	8010210 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010214:	4b07      	ldr	r3, [pc, #28]	@ (8010234 <vTaskPlaceOnEventList+0x48>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	3318      	adds	r3, #24
 801021a:	4619      	mov	r1, r3
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f7fe fd7c 	bl	800ed1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010222:	2101      	movs	r1, #1
 8010224:	6838      	ldr	r0, [r7, #0]
 8010226:	f000 fab9 	bl	801079c <prvAddCurrentTaskToDelayedList>
}
 801022a:	bf00      	nop
 801022c:	3710      	adds	r7, #16
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	200046bc 	.word	0x200046bc

08010238 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010238:	b580      	push	{r7, lr}
 801023a:	b086      	sub	sp, #24
 801023c:	af00      	add	r7, sp, #0
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d10b      	bne.n	8010262 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801024a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801024e:	f383 8811 	msr	BASEPRI, r3
 8010252:	f3bf 8f6f 	isb	sy
 8010256:	f3bf 8f4f 	dsb	sy
 801025a:	617b      	str	r3, [r7, #20]
}
 801025c:	bf00      	nop
 801025e:	bf00      	nop
 8010260:	e7fd      	b.n	801025e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010262:	4b0a      	ldr	r3, [pc, #40]	@ (801028c <vTaskPlaceOnEventListRestricted+0x54>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	3318      	adds	r3, #24
 8010268:	4619      	mov	r1, r3
 801026a:	68f8      	ldr	r0, [r7, #12]
 801026c:	f7fe fd31 	bl	800ecd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d002      	beq.n	801027c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8010276:	f04f 33ff 	mov.w	r3, #4294967295
 801027a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801027c:	6879      	ldr	r1, [r7, #4]
 801027e:	68b8      	ldr	r0, [r7, #8]
 8010280:	f000 fa8c 	bl	801079c <prvAddCurrentTaskToDelayedList>
	}
 8010284:	bf00      	nop
 8010286:	3718      	adds	r7, #24
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	200046bc 	.word	0x200046bc

08010290 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b086      	sub	sp, #24
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	68db      	ldr	r3, [r3, #12]
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d10b      	bne.n	80102be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80102a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102aa:	f383 8811 	msr	BASEPRI, r3
 80102ae:	f3bf 8f6f 	isb	sy
 80102b2:	f3bf 8f4f 	dsb	sy
 80102b6:	60fb      	str	r3, [r7, #12]
}
 80102b8:	bf00      	nop
 80102ba:	bf00      	nop
 80102bc:	e7fd      	b.n	80102ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	3318      	adds	r3, #24
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7fe fd62 	bl	800ed8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102c8:	4b1d      	ldr	r3, [pc, #116]	@ (8010340 <xTaskRemoveFromEventList+0xb0>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d11d      	bne.n	801030c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	3304      	adds	r3, #4
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7fe fd59 	bl	800ed8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102de:	4b19      	ldr	r3, [pc, #100]	@ (8010344 <xTaskRemoveFromEventList+0xb4>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d903      	bls.n	80102ee <xTaskRemoveFromEventList+0x5e>
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102ea:	4a16      	ldr	r2, [pc, #88]	@ (8010344 <xTaskRemoveFromEventList+0xb4>)
 80102ec:	6013      	str	r3, [r2, #0]
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102f2:	4613      	mov	r3, r2
 80102f4:	009b      	lsls	r3, r3, #2
 80102f6:	4413      	add	r3, r2
 80102f8:	009b      	lsls	r3, r3, #2
 80102fa:	4a13      	ldr	r2, [pc, #76]	@ (8010348 <xTaskRemoveFromEventList+0xb8>)
 80102fc:	441a      	add	r2, r3
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	3304      	adds	r3, #4
 8010302:	4619      	mov	r1, r3
 8010304:	4610      	mov	r0, r2
 8010306:	f7fe fce4 	bl	800ecd2 <vListInsertEnd>
 801030a:	e005      	b.n	8010318 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	3318      	adds	r3, #24
 8010310:	4619      	mov	r1, r3
 8010312:	480e      	ldr	r0, [pc, #56]	@ (801034c <xTaskRemoveFromEventList+0xbc>)
 8010314:	f7fe fcdd 	bl	800ecd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801031c:	4b0c      	ldr	r3, [pc, #48]	@ (8010350 <xTaskRemoveFromEventList+0xc0>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010322:	429a      	cmp	r2, r3
 8010324:	d905      	bls.n	8010332 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010326:	2301      	movs	r3, #1
 8010328:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801032a:	4b0a      	ldr	r3, [pc, #40]	@ (8010354 <xTaskRemoveFromEventList+0xc4>)
 801032c:	2201      	movs	r2, #1
 801032e:	601a      	str	r2, [r3, #0]
 8010330:	e001      	b.n	8010336 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8010332:	2300      	movs	r3, #0
 8010334:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010336:	697b      	ldr	r3, [r7, #20]
}
 8010338:	4618      	mov	r0, r3
 801033a:	3718      	adds	r7, #24
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}
 8010340:	20004bb8 	.word	0x20004bb8
 8010344:	20004b98 	.word	0x20004b98
 8010348:	200046c0 	.word	0x200046c0
 801034c:	20004b50 	.word	0x20004b50
 8010350:	200046bc 	.word	0x200046bc
 8010354:	20004ba4 	.word	0x20004ba4

08010358 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010360:	4b06      	ldr	r3, [pc, #24]	@ (801037c <vTaskInternalSetTimeOutState+0x24>)
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010368:	4b05      	ldr	r3, [pc, #20]	@ (8010380 <vTaskInternalSetTimeOutState+0x28>)
 801036a:	681a      	ldr	r2, [r3, #0]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	605a      	str	r2, [r3, #4]
}
 8010370:	bf00      	nop
 8010372:	370c      	adds	r7, #12
 8010374:	46bd      	mov	sp, r7
 8010376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037a:	4770      	bx	lr
 801037c:	20004ba8 	.word	0x20004ba8
 8010380:	20004b94 	.word	0x20004b94

08010384 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b088      	sub	sp, #32
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d10b      	bne.n	80103ac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010398:	f383 8811 	msr	BASEPRI, r3
 801039c:	f3bf 8f6f 	isb	sy
 80103a0:	f3bf 8f4f 	dsb	sy
 80103a4:	613b      	str	r3, [r7, #16]
}
 80103a6:	bf00      	nop
 80103a8:	bf00      	nop
 80103aa:	e7fd      	b.n	80103a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d10b      	bne.n	80103ca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80103b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103b6:	f383 8811 	msr	BASEPRI, r3
 80103ba:	f3bf 8f6f 	isb	sy
 80103be:	f3bf 8f4f 	dsb	sy
 80103c2:	60fb      	str	r3, [r7, #12]
}
 80103c4:	bf00      	nop
 80103c6:	bf00      	nop
 80103c8:	e7fd      	b.n	80103c6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80103ca:	f000 ff85 	bl	80112d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80103ce:	4b1d      	ldr	r3, [pc, #116]	@ (8010444 <xTaskCheckForTimeOut+0xc0>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	69ba      	ldr	r2, [r7, #24]
 80103da:	1ad3      	subs	r3, r2, r3
 80103dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103e6:	d102      	bne.n	80103ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80103e8:	2300      	movs	r3, #0
 80103ea:	61fb      	str	r3, [r7, #28]
 80103ec:	e023      	b.n	8010436 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681a      	ldr	r2, [r3, #0]
 80103f2:	4b15      	ldr	r3, [pc, #84]	@ (8010448 <xTaskCheckForTimeOut+0xc4>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	429a      	cmp	r2, r3
 80103f8:	d007      	beq.n	801040a <xTaskCheckForTimeOut+0x86>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	685b      	ldr	r3, [r3, #4]
 80103fe:	69ba      	ldr	r2, [r7, #24]
 8010400:	429a      	cmp	r2, r3
 8010402:	d302      	bcc.n	801040a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010404:	2301      	movs	r3, #1
 8010406:	61fb      	str	r3, [r7, #28]
 8010408:	e015      	b.n	8010436 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	697a      	ldr	r2, [r7, #20]
 8010410:	429a      	cmp	r2, r3
 8010412:	d20b      	bcs.n	801042c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	681a      	ldr	r2, [r3, #0]
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	1ad2      	subs	r2, r2, r3
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f7ff ff99 	bl	8010358 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010426:	2300      	movs	r3, #0
 8010428:	61fb      	str	r3, [r7, #28]
 801042a:	e004      	b.n	8010436 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	2200      	movs	r2, #0
 8010430:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010432:	2301      	movs	r3, #1
 8010434:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010436:	f000 ff81 	bl	801133c <vPortExitCritical>

	return xReturn;
 801043a:	69fb      	ldr	r3, [r7, #28]
}
 801043c:	4618      	mov	r0, r3
 801043e:	3720      	adds	r7, #32
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	20004b94 	.word	0x20004b94
 8010448:	20004ba8 	.word	0x20004ba8

0801044c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801044c:	b480      	push	{r7}
 801044e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010450:	4b03      	ldr	r3, [pc, #12]	@ (8010460 <vTaskMissedYield+0x14>)
 8010452:	2201      	movs	r2, #1
 8010454:	601a      	str	r2, [r3, #0]
}
 8010456:	bf00      	nop
 8010458:	46bd      	mov	sp, r7
 801045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045e:	4770      	bx	lr
 8010460:	20004ba4 	.word	0x20004ba4

08010464 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801046c:	f000 f852 	bl	8010514 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010470:	4b06      	ldr	r3, [pc, #24]	@ (801048c <prvIdleTask+0x28>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2b01      	cmp	r3, #1
 8010476:	d9f9      	bls.n	801046c <prvIdleTask+0x8>
			{
				taskYIELD();
 8010478:	4b05      	ldr	r3, [pc, #20]	@ (8010490 <prvIdleTask+0x2c>)
 801047a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801047e:	601a      	str	r2, [r3, #0]
 8010480:	f3bf 8f4f 	dsb	sy
 8010484:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010488:	e7f0      	b.n	801046c <prvIdleTask+0x8>
 801048a:	bf00      	nop
 801048c:	200046c0 	.word	0x200046c0
 8010490:	e000ed04 	.word	0xe000ed04

08010494 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801049a:	2300      	movs	r3, #0
 801049c:	607b      	str	r3, [r7, #4]
 801049e:	e00c      	b.n	80104ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80104a0:	687a      	ldr	r2, [r7, #4]
 80104a2:	4613      	mov	r3, r2
 80104a4:	009b      	lsls	r3, r3, #2
 80104a6:	4413      	add	r3, r2
 80104a8:	009b      	lsls	r3, r3, #2
 80104aa:	4a12      	ldr	r2, [pc, #72]	@ (80104f4 <prvInitialiseTaskLists+0x60>)
 80104ac:	4413      	add	r3, r2
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7fe fbe2 	bl	800ec78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	3301      	adds	r3, #1
 80104b8:	607b      	str	r3, [r7, #4]
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2b37      	cmp	r3, #55	@ 0x37
 80104be:	d9ef      	bls.n	80104a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80104c0:	480d      	ldr	r0, [pc, #52]	@ (80104f8 <prvInitialiseTaskLists+0x64>)
 80104c2:	f7fe fbd9 	bl	800ec78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80104c6:	480d      	ldr	r0, [pc, #52]	@ (80104fc <prvInitialiseTaskLists+0x68>)
 80104c8:	f7fe fbd6 	bl	800ec78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80104cc:	480c      	ldr	r0, [pc, #48]	@ (8010500 <prvInitialiseTaskLists+0x6c>)
 80104ce:	f7fe fbd3 	bl	800ec78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80104d2:	480c      	ldr	r0, [pc, #48]	@ (8010504 <prvInitialiseTaskLists+0x70>)
 80104d4:	f7fe fbd0 	bl	800ec78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80104d8:	480b      	ldr	r0, [pc, #44]	@ (8010508 <prvInitialiseTaskLists+0x74>)
 80104da:	f7fe fbcd 	bl	800ec78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80104de:	4b0b      	ldr	r3, [pc, #44]	@ (801050c <prvInitialiseTaskLists+0x78>)
 80104e0:	4a05      	ldr	r2, [pc, #20]	@ (80104f8 <prvInitialiseTaskLists+0x64>)
 80104e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80104e4:	4b0a      	ldr	r3, [pc, #40]	@ (8010510 <prvInitialiseTaskLists+0x7c>)
 80104e6:	4a05      	ldr	r2, [pc, #20]	@ (80104fc <prvInitialiseTaskLists+0x68>)
 80104e8:	601a      	str	r2, [r3, #0]
}
 80104ea:	bf00      	nop
 80104ec:	3708      	adds	r7, #8
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
 80104f2:	bf00      	nop
 80104f4:	200046c0 	.word	0x200046c0
 80104f8:	20004b20 	.word	0x20004b20
 80104fc:	20004b34 	.word	0x20004b34
 8010500:	20004b50 	.word	0x20004b50
 8010504:	20004b64 	.word	0x20004b64
 8010508:	20004b7c 	.word	0x20004b7c
 801050c:	20004b48 	.word	0x20004b48
 8010510:	20004b4c 	.word	0x20004b4c

08010514 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801051a:	e019      	b.n	8010550 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801051c:	f000 fedc 	bl	80112d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010520:	4b10      	ldr	r3, [pc, #64]	@ (8010564 <prvCheckTasksWaitingTermination+0x50>)
 8010522:	68db      	ldr	r3, [r3, #12]
 8010524:	68db      	ldr	r3, [r3, #12]
 8010526:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	3304      	adds	r3, #4
 801052c:	4618      	mov	r0, r3
 801052e:	f7fe fc2d 	bl	800ed8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010532:	4b0d      	ldr	r3, [pc, #52]	@ (8010568 <prvCheckTasksWaitingTermination+0x54>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	3b01      	subs	r3, #1
 8010538:	4a0b      	ldr	r2, [pc, #44]	@ (8010568 <prvCheckTasksWaitingTermination+0x54>)
 801053a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801053c:	4b0b      	ldr	r3, [pc, #44]	@ (801056c <prvCheckTasksWaitingTermination+0x58>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	3b01      	subs	r3, #1
 8010542:	4a0a      	ldr	r2, [pc, #40]	@ (801056c <prvCheckTasksWaitingTermination+0x58>)
 8010544:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010546:	f000 fef9 	bl	801133c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f000 f848 	bl	80105e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010550:	4b06      	ldr	r3, [pc, #24]	@ (801056c <prvCheckTasksWaitingTermination+0x58>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d1e1      	bne.n	801051c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010558:	bf00      	nop
 801055a:	bf00      	nop
 801055c:	3708      	adds	r7, #8
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}
 8010562:	bf00      	nop
 8010564:	20004b64 	.word	0x20004b64
 8010568:	20004b90 	.word	0x20004b90
 801056c:	20004b78 	.word	0x20004b78

08010570 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8010570:	b480      	push	{r7}
 8010572:	b085      	sub	sp, #20
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8010578:	2300      	movs	r3, #0
 801057a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801057c:	e005      	b.n	801058a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	3301      	adds	r3, #1
 8010582:	607b      	str	r3, [r7, #4]
			ulCount++;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	3301      	adds	r3, #1
 8010588:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	781b      	ldrb	r3, [r3, #0]
 801058e:	2ba5      	cmp	r3, #165	@ 0xa5
 8010590:	d0f5      	beq.n	801057e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	089b      	lsrs	r3, r3, #2
 8010596:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	b29b      	uxth	r3, r3
	}
 801059c:	4618      	mov	r0, r3
 801059e:	3714      	adds	r7, #20
 80105a0:	46bd      	mov	sp, r7
 80105a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a6:	4770      	bx	lr

080105a8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b086      	sub	sp, #24
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d102      	bne.n	80105bc <uxTaskGetStackHighWaterMark+0x14>
 80105b6:	4b09      	ldr	r3, [pc, #36]	@ (80105dc <uxTaskGetStackHighWaterMark+0x34>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	e000      	b.n	80105be <uxTaskGetStackHighWaterMark+0x16>
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80105c0:	697b      	ldr	r3, [r7, #20]
 80105c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105c4:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80105c6:	6938      	ldr	r0, [r7, #16]
 80105c8:	f7ff ffd2 	bl	8010570 <prvTaskCheckFreeStackSpace>
 80105cc:	4603      	mov	r3, r0
 80105ce:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80105d0:	68fb      	ldr	r3, [r7, #12]
	}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3718      	adds	r7, #24
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
 80105da:	bf00      	nop
 80105dc:	200046bc 	.word	0x200046bc

080105e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d108      	bne.n	8010604 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105f6:	4618      	mov	r0, r3
 80105f8:	f001 f85e 	bl	80116b8 <vPortFree>
				vPortFree( pxTCB );
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f001 f85b 	bl	80116b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010602:	e019      	b.n	8010638 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 801060a:	2b01      	cmp	r3, #1
 801060c:	d103      	bne.n	8010616 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f001 f852 	bl	80116b8 <vPortFree>
	}
 8010614:	e010      	b.n	8010638 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 801061c:	2b02      	cmp	r3, #2
 801061e:	d00b      	beq.n	8010638 <prvDeleteTCB+0x58>
	__asm volatile
 8010620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010624:	f383 8811 	msr	BASEPRI, r3
 8010628:	f3bf 8f6f 	isb	sy
 801062c:	f3bf 8f4f 	dsb	sy
 8010630:	60fb      	str	r3, [r7, #12]
}
 8010632:	bf00      	nop
 8010634:	bf00      	nop
 8010636:	e7fd      	b.n	8010634 <prvDeleteTCB+0x54>
	}
 8010638:	bf00      	nop
 801063a:	3710      	adds	r7, #16
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}

08010640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010640:	b480      	push	{r7}
 8010642:	b083      	sub	sp, #12
 8010644:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010646:	4b0c      	ldr	r3, [pc, #48]	@ (8010678 <prvResetNextTaskUnblockTime+0x38>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d104      	bne.n	801065a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010650:	4b0a      	ldr	r3, [pc, #40]	@ (801067c <prvResetNextTaskUnblockTime+0x3c>)
 8010652:	f04f 32ff 	mov.w	r2, #4294967295
 8010656:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010658:	e008      	b.n	801066c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801065a:	4b07      	ldr	r3, [pc, #28]	@ (8010678 <prvResetNextTaskUnblockTime+0x38>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	68db      	ldr	r3, [r3, #12]
 8010660:	68db      	ldr	r3, [r3, #12]
 8010662:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	4a04      	ldr	r2, [pc, #16]	@ (801067c <prvResetNextTaskUnblockTime+0x3c>)
 801066a:	6013      	str	r3, [r2, #0]
}
 801066c:	bf00      	nop
 801066e:	370c      	adds	r7, #12
 8010670:	46bd      	mov	sp, r7
 8010672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010676:	4770      	bx	lr
 8010678:	20004b48 	.word	0x20004b48
 801067c:	20004bb0 	.word	0x20004bb0

08010680 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010680:	b480      	push	{r7}
 8010682:	b083      	sub	sp, #12
 8010684:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010686:	4b0b      	ldr	r3, [pc, #44]	@ (80106b4 <xTaskGetSchedulerState+0x34>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d102      	bne.n	8010694 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801068e:	2301      	movs	r3, #1
 8010690:	607b      	str	r3, [r7, #4]
 8010692:	e008      	b.n	80106a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010694:	4b08      	ldr	r3, [pc, #32]	@ (80106b8 <xTaskGetSchedulerState+0x38>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d102      	bne.n	80106a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801069c:	2302      	movs	r3, #2
 801069e:	607b      	str	r3, [r7, #4]
 80106a0:	e001      	b.n	80106a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80106a2:	2300      	movs	r3, #0
 80106a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80106a6:	687b      	ldr	r3, [r7, #4]
	}
 80106a8:	4618      	mov	r0, r3
 80106aa:	370c      	adds	r7, #12
 80106ac:	46bd      	mov	sp, r7
 80106ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b2:	4770      	bx	lr
 80106b4:	20004b9c 	.word	0x20004b9c
 80106b8:	20004bb8 	.word	0x20004bb8

080106bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b086      	sub	sp, #24
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80106c8:	2300      	movs	r3, #0
 80106ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d058      	beq.n	8010784 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80106d2:	4b2f      	ldr	r3, [pc, #188]	@ (8010790 <xTaskPriorityDisinherit+0xd4>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	693a      	ldr	r2, [r7, #16]
 80106d8:	429a      	cmp	r2, r3
 80106da:	d00b      	beq.n	80106f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80106dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106e0:	f383 8811 	msr	BASEPRI, r3
 80106e4:	f3bf 8f6f 	isb	sy
 80106e8:	f3bf 8f4f 	dsb	sy
 80106ec:	60fb      	str	r3, [r7, #12]
}
 80106ee:	bf00      	nop
 80106f0:	bf00      	nop
 80106f2:	e7fd      	b.n	80106f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d10b      	bne.n	8010714 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80106fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010700:	f383 8811 	msr	BASEPRI, r3
 8010704:	f3bf 8f6f 	isb	sy
 8010708:	f3bf 8f4f 	dsb	sy
 801070c:	60bb      	str	r3, [r7, #8]
}
 801070e:	bf00      	nop
 8010710:	bf00      	nop
 8010712:	e7fd      	b.n	8010710 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010718:	1e5a      	subs	r2, r3, #1
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801071e:	693b      	ldr	r3, [r7, #16]
 8010720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010726:	429a      	cmp	r2, r3
 8010728:	d02c      	beq.n	8010784 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801072e:	2b00      	cmp	r3, #0
 8010730:	d128      	bne.n	8010784 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	3304      	adds	r3, #4
 8010736:	4618      	mov	r0, r3
 8010738:	f7fe fb28 	bl	800ed8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010748:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010754:	4b0f      	ldr	r3, [pc, #60]	@ (8010794 <xTaskPriorityDisinherit+0xd8>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	429a      	cmp	r2, r3
 801075a:	d903      	bls.n	8010764 <xTaskPriorityDisinherit+0xa8>
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010760:	4a0c      	ldr	r2, [pc, #48]	@ (8010794 <xTaskPriorityDisinherit+0xd8>)
 8010762:	6013      	str	r3, [r2, #0]
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010768:	4613      	mov	r3, r2
 801076a:	009b      	lsls	r3, r3, #2
 801076c:	4413      	add	r3, r2
 801076e:	009b      	lsls	r3, r3, #2
 8010770:	4a09      	ldr	r2, [pc, #36]	@ (8010798 <xTaskPriorityDisinherit+0xdc>)
 8010772:	441a      	add	r2, r3
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	3304      	adds	r3, #4
 8010778:	4619      	mov	r1, r3
 801077a:	4610      	mov	r0, r2
 801077c:	f7fe faa9 	bl	800ecd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010780:	2301      	movs	r3, #1
 8010782:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010784:	697b      	ldr	r3, [r7, #20]
	}
 8010786:	4618      	mov	r0, r3
 8010788:	3718      	adds	r7, #24
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	200046bc 	.word	0x200046bc
 8010794:	20004b98 	.word	0x20004b98
 8010798:	200046c0 	.word	0x200046c0

0801079c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80107a6:	4b21      	ldr	r3, [pc, #132]	@ (801082c <prvAddCurrentTaskToDelayedList+0x90>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80107ac:	4b20      	ldr	r3, [pc, #128]	@ (8010830 <prvAddCurrentTaskToDelayedList+0x94>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	3304      	adds	r3, #4
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7fe faea 	bl	800ed8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107be:	d10a      	bne.n	80107d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d007      	beq.n	80107d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107c6:	4b1a      	ldr	r3, [pc, #104]	@ (8010830 <prvAddCurrentTaskToDelayedList+0x94>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	3304      	adds	r3, #4
 80107cc:	4619      	mov	r1, r3
 80107ce:	4819      	ldr	r0, [pc, #100]	@ (8010834 <prvAddCurrentTaskToDelayedList+0x98>)
 80107d0:	f7fe fa7f 	bl	800ecd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80107d4:	e026      	b.n	8010824 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80107d6:	68fa      	ldr	r2, [r7, #12]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	4413      	add	r3, r2
 80107dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80107de:	4b14      	ldr	r3, [pc, #80]	@ (8010830 <prvAddCurrentTaskToDelayedList+0x94>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	68ba      	ldr	r2, [r7, #8]
 80107e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80107e6:	68ba      	ldr	r2, [r7, #8]
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d209      	bcs.n	8010802 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107ee:	4b12      	ldr	r3, [pc, #72]	@ (8010838 <prvAddCurrentTaskToDelayedList+0x9c>)
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	4b0f      	ldr	r3, [pc, #60]	@ (8010830 <prvAddCurrentTaskToDelayedList+0x94>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	3304      	adds	r3, #4
 80107f8:	4619      	mov	r1, r3
 80107fa:	4610      	mov	r0, r2
 80107fc:	f7fe fa8d 	bl	800ed1a <vListInsert>
}
 8010800:	e010      	b.n	8010824 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010802:	4b0e      	ldr	r3, [pc, #56]	@ (801083c <prvAddCurrentTaskToDelayedList+0xa0>)
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	4b0a      	ldr	r3, [pc, #40]	@ (8010830 <prvAddCurrentTaskToDelayedList+0x94>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	3304      	adds	r3, #4
 801080c:	4619      	mov	r1, r3
 801080e:	4610      	mov	r0, r2
 8010810:	f7fe fa83 	bl	800ed1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010814:	4b0a      	ldr	r3, [pc, #40]	@ (8010840 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	68ba      	ldr	r2, [r7, #8]
 801081a:	429a      	cmp	r2, r3
 801081c:	d202      	bcs.n	8010824 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801081e:	4a08      	ldr	r2, [pc, #32]	@ (8010840 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	6013      	str	r3, [r2, #0]
}
 8010824:	bf00      	nop
 8010826:	3710      	adds	r7, #16
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}
 801082c:	20004b94 	.word	0x20004b94
 8010830:	200046bc 	.word	0x200046bc
 8010834:	20004b7c 	.word	0x20004b7c
 8010838:	20004b4c 	.word	0x20004b4c
 801083c:	20004b48 	.word	0x20004b48
 8010840:	20004bb0 	.word	0x20004bb0

08010844 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b08a      	sub	sp, #40	@ 0x28
 8010848:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801084a:	2300      	movs	r3, #0
 801084c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801084e:	f000 fbb1 	bl	8010fb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010852:	4b1d      	ldr	r3, [pc, #116]	@ (80108c8 <xTimerCreateTimerTask+0x84>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d021      	beq.n	801089e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801085a:	2300      	movs	r3, #0
 801085c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801085e:	2300      	movs	r3, #0
 8010860:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010862:	1d3a      	adds	r2, r7, #4
 8010864:	f107 0108 	add.w	r1, r7, #8
 8010868:	f107 030c 	add.w	r3, r7, #12
 801086c:	4618      	mov	r0, r3
 801086e:	f7fe f9e9 	bl	800ec44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010872:	6879      	ldr	r1, [r7, #4]
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	68fa      	ldr	r2, [r7, #12]
 8010878:	9202      	str	r2, [sp, #8]
 801087a:	9301      	str	r3, [sp, #4]
 801087c:	2302      	movs	r3, #2
 801087e:	9300      	str	r3, [sp, #0]
 8010880:	2300      	movs	r3, #0
 8010882:	460a      	mov	r2, r1
 8010884:	4911      	ldr	r1, [pc, #68]	@ (80108cc <xTimerCreateTimerTask+0x88>)
 8010886:	4812      	ldr	r0, [pc, #72]	@ (80108d0 <xTimerCreateTimerTask+0x8c>)
 8010888:	f7ff f886 	bl	800f998 <xTaskCreateStatic>
 801088c:	4603      	mov	r3, r0
 801088e:	4a11      	ldr	r2, [pc, #68]	@ (80108d4 <xTimerCreateTimerTask+0x90>)
 8010890:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010892:	4b10      	ldr	r3, [pc, #64]	@ (80108d4 <xTimerCreateTimerTask+0x90>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d001      	beq.n	801089e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801089a:	2301      	movs	r3, #1
 801089c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d10b      	bne.n	80108bc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80108a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108a8:	f383 8811 	msr	BASEPRI, r3
 80108ac:	f3bf 8f6f 	isb	sy
 80108b0:	f3bf 8f4f 	dsb	sy
 80108b4:	613b      	str	r3, [r7, #16]
}
 80108b6:	bf00      	nop
 80108b8:	bf00      	nop
 80108ba:	e7fd      	b.n	80108b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80108bc:	697b      	ldr	r3, [r7, #20]
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3718      	adds	r7, #24
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	20004bec 	.word	0x20004bec
 80108cc:	08014bc0 	.word	0x08014bc0
 80108d0:	08010b4d 	.word	0x08010b4d
 80108d4:	20004bf0 	.word	0x20004bf0

080108d8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b088      	sub	sp, #32
 80108dc:	af02      	add	r7, sp, #8
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	60b9      	str	r1, [r7, #8]
 80108e2:	607a      	str	r2, [r7, #4]
 80108e4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80108e6:	202c      	movs	r0, #44	@ 0x2c
 80108e8:	f000 fe18 	bl	801151c <pvPortMalloc>
 80108ec:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d00d      	beq.n	8010910 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	2200      	movs	r2, #0
 80108f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	9301      	str	r3, [sp, #4]
 8010900:	6a3b      	ldr	r3, [r7, #32]
 8010902:	9300      	str	r3, [sp, #0]
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	68b9      	ldr	r1, [r7, #8]
 801090a:	68f8      	ldr	r0, [r7, #12]
 801090c:	f000 f845 	bl	801099a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010910:	697b      	ldr	r3, [r7, #20]
	}
 8010912:	4618      	mov	r0, r3
 8010914:	3718      	adds	r7, #24
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}

0801091a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801091a:	b580      	push	{r7, lr}
 801091c:	b08a      	sub	sp, #40	@ 0x28
 801091e:	af02      	add	r7, sp, #8
 8010920:	60f8      	str	r0, [r7, #12]
 8010922:	60b9      	str	r1, [r7, #8]
 8010924:	607a      	str	r2, [r7, #4]
 8010926:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8010928:	232c      	movs	r3, #44	@ 0x2c
 801092a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 801092c:	693b      	ldr	r3, [r7, #16]
 801092e:	2b2c      	cmp	r3, #44	@ 0x2c
 8010930:	d00b      	beq.n	801094a <xTimerCreateStatic+0x30>
	__asm volatile
 8010932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010936:	f383 8811 	msr	BASEPRI, r3
 801093a:	f3bf 8f6f 	isb	sy
 801093e:	f3bf 8f4f 	dsb	sy
 8010942:	61bb      	str	r3, [r7, #24]
}
 8010944:	bf00      	nop
 8010946:	bf00      	nop
 8010948:	e7fd      	b.n	8010946 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801094a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801094c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801094e:	2b00      	cmp	r3, #0
 8010950:	d10b      	bne.n	801096a <xTimerCreateStatic+0x50>
	__asm volatile
 8010952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010956:	f383 8811 	msr	BASEPRI, r3
 801095a:	f3bf 8f6f 	isb	sy
 801095e:	f3bf 8f4f 	dsb	sy
 8010962:	617b      	str	r3, [r7, #20]
}
 8010964:	bf00      	nop
 8010966:	bf00      	nop
 8010968:	e7fd      	b.n	8010966 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801096a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801096c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801096e:	69fb      	ldr	r3, [r7, #28]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d00d      	beq.n	8010990 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	2202      	movs	r2, #2
 8010978:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801097c:	69fb      	ldr	r3, [r7, #28]
 801097e:	9301      	str	r3, [sp, #4]
 8010980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010982:	9300      	str	r3, [sp, #0]
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	687a      	ldr	r2, [r7, #4]
 8010988:	68b9      	ldr	r1, [r7, #8]
 801098a:	68f8      	ldr	r0, [r7, #12]
 801098c:	f000 f805 	bl	801099a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010990:	69fb      	ldr	r3, [r7, #28]
	}
 8010992:	4618      	mov	r0, r3
 8010994:	3720      	adds	r7, #32
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}

0801099a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801099a:	b580      	push	{r7, lr}
 801099c:	b086      	sub	sp, #24
 801099e:	af00      	add	r7, sp, #0
 80109a0:	60f8      	str	r0, [r7, #12]
 80109a2:	60b9      	str	r1, [r7, #8]
 80109a4:	607a      	str	r2, [r7, #4]
 80109a6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d10b      	bne.n	80109c6 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80109ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109b2:	f383 8811 	msr	BASEPRI, r3
 80109b6:	f3bf 8f6f 	isb	sy
 80109ba:	f3bf 8f4f 	dsb	sy
 80109be:	617b      	str	r3, [r7, #20]
}
 80109c0:	bf00      	nop
 80109c2:	bf00      	nop
 80109c4:	e7fd      	b.n	80109c2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80109c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d01e      	beq.n	8010a0a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80109cc:	f000 faf2 	bl	8010fb4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80109d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109d2:	68fa      	ldr	r2, [r7, #12]
 80109d4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80109d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109d8:	68ba      	ldr	r2, [r7, #8]
 80109da:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80109dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109de:	683a      	ldr	r2, [r7, #0]
 80109e0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80109e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e4:	6a3a      	ldr	r2, [r7, #32]
 80109e6:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80109e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109ea:	3304      	adds	r3, #4
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7fe f963 	bl	800ecb8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d008      	beq.n	8010a0a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80109f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80109fe:	f043 0304 	orr.w	r3, r3, #4
 8010a02:	b2da      	uxtb	r2, r3
 8010a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8010a0a:	bf00      	nop
 8010a0c:	3718      	adds	r7, #24
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}
	...

08010a14 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b08a      	sub	sp, #40	@ 0x28
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	60f8      	str	r0, [r7, #12]
 8010a1c:	60b9      	str	r1, [r7, #8]
 8010a1e:	607a      	str	r2, [r7, #4]
 8010a20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010a22:	2300      	movs	r3, #0
 8010a24:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d10b      	bne.n	8010a44 <xTimerGenericCommand+0x30>
	__asm volatile
 8010a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a30:	f383 8811 	msr	BASEPRI, r3
 8010a34:	f3bf 8f6f 	isb	sy
 8010a38:	f3bf 8f4f 	dsb	sy
 8010a3c:	623b      	str	r3, [r7, #32]
}
 8010a3e:	bf00      	nop
 8010a40:	bf00      	nop
 8010a42:	e7fd      	b.n	8010a40 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010a44:	4b19      	ldr	r3, [pc, #100]	@ (8010aac <xTimerGenericCommand+0x98>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d02a      	beq.n	8010aa2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	2b05      	cmp	r3, #5
 8010a5c:	dc18      	bgt.n	8010a90 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010a5e:	f7ff fe0f 	bl	8010680 <xTaskGetSchedulerState>
 8010a62:	4603      	mov	r3, r0
 8010a64:	2b02      	cmp	r3, #2
 8010a66:	d109      	bne.n	8010a7c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010a68:	4b10      	ldr	r3, [pc, #64]	@ (8010aac <xTimerGenericCommand+0x98>)
 8010a6a:	6818      	ldr	r0, [r3, #0]
 8010a6c:	f107 0110 	add.w	r1, r7, #16
 8010a70:	2300      	movs	r3, #0
 8010a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a74:	f7fe fafa 	bl	800f06c <xQueueGenericSend>
 8010a78:	6278      	str	r0, [r7, #36]	@ 0x24
 8010a7a:	e012      	b.n	8010aa2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8010aac <xTimerGenericCommand+0x98>)
 8010a7e:	6818      	ldr	r0, [r3, #0]
 8010a80:	f107 0110 	add.w	r1, r7, #16
 8010a84:	2300      	movs	r3, #0
 8010a86:	2200      	movs	r2, #0
 8010a88:	f7fe faf0 	bl	800f06c <xQueueGenericSend>
 8010a8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8010a8e:	e008      	b.n	8010aa2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010a90:	4b06      	ldr	r3, [pc, #24]	@ (8010aac <xTimerGenericCommand+0x98>)
 8010a92:	6818      	ldr	r0, [r3, #0]
 8010a94:	f107 0110 	add.w	r1, r7, #16
 8010a98:	2300      	movs	r3, #0
 8010a9a:	683a      	ldr	r2, [r7, #0]
 8010a9c:	f7fe fbe8 	bl	800f270 <xQueueGenericSendFromISR>
 8010aa0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3728      	adds	r7, #40	@ 0x28
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}
 8010aac:	20004bec 	.word	0x20004bec

08010ab0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b088      	sub	sp, #32
 8010ab4:	af02      	add	r7, sp, #8
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010aba:	4b23      	ldr	r3, [pc, #140]	@ (8010b48 <prvProcessExpiredTimer+0x98>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	68db      	ldr	r3, [r3, #12]
 8010ac0:	68db      	ldr	r3, [r3, #12]
 8010ac2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	3304      	adds	r3, #4
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7fe f95f 	bl	800ed8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010ad4:	f003 0304 	and.w	r3, r3, #4
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d023      	beq.n	8010b24 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	699a      	ldr	r2, [r3, #24]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	18d1      	adds	r1, r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	683a      	ldr	r2, [r7, #0]
 8010ae8:	6978      	ldr	r0, [r7, #20]
 8010aea:	f000 f8d5 	bl	8010c98 <prvInsertTimerInActiveList>
 8010aee:	4603      	mov	r3, r0
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d020      	beq.n	8010b36 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010af4:	2300      	movs	r3, #0
 8010af6:	9300      	str	r3, [sp, #0]
 8010af8:	2300      	movs	r3, #0
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	2100      	movs	r1, #0
 8010afe:	6978      	ldr	r0, [r7, #20]
 8010b00:	f7ff ff88 	bl	8010a14 <xTimerGenericCommand>
 8010b04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d114      	bne.n	8010b36 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b10:	f383 8811 	msr	BASEPRI, r3
 8010b14:	f3bf 8f6f 	isb	sy
 8010b18:	f3bf 8f4f 	dsb	sy
 8010b1c:	60fb      	str	r3, [r7, #12]
}
 8010b1e:	bf00      	nop
 8010b20:	bf00      	nop
 8010b22:	e7fd      	b.n	8010b20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010b2a:	f023 0301 	bic.w	r3, r3, #1
 8010b2e:	b2da      	uxtb	r2, r3
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	6a1b      	ldr	r3, [r3, #32]
 8010b3a:	6978      	ldr	r0, [r7, #20]
 8010b3c:	4798      	blx	r3
}
 8010b3e:	bf00      	nop
 8010b40:	3718      	adds	r7, #24
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	20004be4 	.word	0x20004be4

08010b4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010b54:	f107 0308 	add.w	r3, r7, #8
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f000 f859 	bl	8010c10 <prvGetNextExpireTime>
 8010b5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	4619      	mov	r1, r3
 8010b64:	68f8      	ldr	r0, [r7, #12]
 8010b66:	f000 f805 	bl	8010b74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010b6a:	f000 f8d7 	bl	8010d1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010b6e:	bf00      	nop
 8010b70:	e7f0      	b.n	8010b54 <prvTimerTask+0x8>
	...

08010b74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010b7e:	f7ff f94f 	bl	800fe20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010b82:	f107 0308 	add.w	r3, r7, #8
 8010b86:	4618      	mov	r0, r3
 8010b88:	f000 f866 	bl	8010c58 <prvSampleTimeNow>
 8010b8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d130      	bne.n	8010bf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d10a      	bne.n	8010bb0 <prvProcessTimerOrBlockTask+0x3c>
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d806      	bhi.n	8010bb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010ba2:	f7ff f94b 	bl	800fe3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010ba6:	68f9      	ldr	r1, [r7, #12]
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f7ff ff81 	bl	8010ab0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010bae:	e024      	b.n	8010bfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d008      	beq.n	8010bc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010bb6:	4b13      	ldr	r3, [pc, #76]	@ (8010c04 <prvProcessTimerOrBlockTask+0x90>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d101      	bne.n	8010bc4 <prvProcessTimerOrBlockTask+0x50>
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	e000      	b.n	8010bc6 <prvProcessTimerOrBlockTask+0x52>
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8010c08 <prvProcessTimerOrBlockTask+0x94>)
 8010bca:	6818      	ldr	r0, [r3, #0]
 8010bcc:	687a      	ldr	r2, [r7, #4]
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	1ad3      	subs	r3, r2, r3
 8010bd2:	683a      	ldr	r2, [r7, #0]
 8010bd4:	4619      	mov	r1, r3
 8010bd6:	f7fe feab 	bl	800f930 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010bda:	f7ff f92f 	bl	800fe3c <xTaskResumeAll>
 8010bde:	4603      	mov	r3, r0
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d10a      	bne.n	8010bfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010be4:	4b09      	ldr	r3, [pc, #36]	@ (8010c0c <prvProcessTimerOrBlockTask+0x98>)
 8010be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010bea:	601a      	str	r2, [r3, #0]
 8010bec:	f3bf 8f4f 	dsb	sy
 8010bf0:	f3bf 8f6f 	isb	sy
}
 8010bf4:	e001      	b.n	8010bfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010bf6:	f7ff f921 	bl	800fe3c <xTaskResumeAll>
}
 8010bfa:	bf00      	nop
 8010bfc:	3710      	adds	r7, #16
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}
 8010c02:	bf00      	nop
 8010c04:	20004be8 	.word	0x20004be8
 8010c08:	20004bec 	.word	0x20004bec
 8010c0c:	e000ed04 	.word	0xe000ed04

08010c10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010c10:	b480      	push	{r7}
 8010c12:	b085      	sub	sp, #20
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010c18:	4b0e      	ldr	r3, [pc, #56]	@ (8010c54 <prvGetNextExpireTime+0x44>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d101      	bne.n	8010c26 <prvGetNextExpireTime+0x16>
 8010c22:	2201      	movs	r2, #1
 8010c24:	e000      	b.n	8010c28 <prvGetNextExpireTime+0x18>
 8010c26:	2200      	movs	r2, #0
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d105      	bne.n	8010c40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c34:	4b07      	ldr	r3, [pc, #28]	@ (8010c54 <prvGetNextExpireTime+0x44>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	68db      	ldr	r3, [r3, #12]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	60fb      	str	r3, [r7, #12]
 8010c3e:	e001      	b.n	8010c44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010c40:	2300      	movs	r3, #0
 8010c42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010c44:	68fb      	ldr	r3, [r7, #12]
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3714      	adds	r7, #20
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop
 8010c54:	20004be4 	.word	0x20004be4

08010c58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b084      	sub	sp, #16
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010c60:	f7ff f98a 	bl	800ff78 <xTaskGetTickCount>
 8010c64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010c66:	4b0b      	ldr	r3, [pc, #44]	@ (8010c94 <prvSampleTimeNow+0x3c>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	68fa      	ldr	r2, [r7, #12]
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d205      	bcs.n	8010c7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010c70:	f000 f93a 	bl	8010ee8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2201      	movs	r2, #1
 8010c78:	601a      	str	r2, [r3, #0]
 8010c7a:	e002      	b.n	8010c82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2200      	movs	r2, #0
 8010c80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010c82:	4a04      	ldr	r2, [pc, #16]	@ (8010c94 <prvSampleTimeNow+0x3c>)
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010c88:	68fb      	ldr	r3, [r7, #12]
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3710      	adds	r7, #16
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop
 8010c94:	20004bf4 	.word	0x20004bf4

08010c98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b086      	sub	sp, #24
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	60f8      	str	r0, [r7, #12]
 8010ca0:	60b9      	str	r1, [r7, #8]
 8010ca2:	607a      	str	r2, [r7, #4]
 8010ca4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	68ba      	ldr	r2, [r7, #8]
 8010cae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	68fa      	ldr	r2, [r7, #12]
 8010cb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010cb6:	68ba      	ldr	r2, [r7, #8]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d812      	bhi.n	8010ce4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cbe:	687a      	ldr	r2, [r7, #4]
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	1ad2      	subs	r2, r2, r3
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	699b      	ldr	r3, [r3, #24]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d302      	bcc.n	8010cd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010ccc:	2301      	movs	r3, #1
 8010cce:	617b      	str	r3, [r7, #20]
 8010cd0:	e01b      	b.n	8010d0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010cd2:	4b10      	ldr	r3, [pc, #64]	@ (8010d14 <prvInsertTimerInActiveList+0x7c>)
 8010cd4:	681a      	ldr	r2, [r3, #0]
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	3304      	adds	r3, #4
 8010cda:	4619      	mov	r1, r3
 8010cdc:	4610      	mov	r0, r2
 8010cde:	f7fe f81c 	bl	800ed1a <vListInsert>
 8010ce2:	e012      	b.n	8010d0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d206      	bcs.n	8010cfa <prvInsertTimerInActiveList+0x62>
 8010cec:	68ba      	ldr	r2, [r7, #8]
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d302      	bcc.n	8010cfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	617b      	str	r3, [r7, #20]
 8010cf8:	e007      	b.n	8010d0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010cfa:	4b07      	ldr	r3, [pc, #28]	@ (8010d18 <prvInsertTimerInActiveList+0x80>)
 8010cfc:	681a      	ldr	r2, [r3, #0]
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	3304      	adds	r3, #4
 8010d02:	4619      	mov	r1, r3
 8010d04:	4610      	mov	r0, r2
 8010d06:	f7fe f808 	bl	800ed1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010d0a:	697b      	ldr	r3, [r7, #20]
}
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	3718      	adds	r7, #24
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}
 8010d14:	20004be8 	.word	0x20004be8
 8010d18:	20004be4 	.word	0x20004be4

08010d1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b08e      	sub	sp, #56	@ 0x38
 8010d20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d22:	e0ce      	b.n	8010ec2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	da19      	bge.n	8010d5e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010d2a:	1d3b      	adds	r3, r7, #4
 8010d2c:	3304      	adds	r3, #4
 8010d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d10b      	bne.n	8010d4e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8010d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d3a:	f383 8811 	msr	BASEPRI, r3
 8010d3e:	f3bf 8f6f 	isb	sy
 8010d42:	f3bf 8f4f 	dsb	sy
 8010d46:	61fb      	str	r3, [r7, #28]
}
 8010d48:	bf00      	nop
 8010d4a:	bf00      	nop
 8010d4c:	e7fd      	b.n	8010d4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d54:	6850      	ldr	r0, [r2, #4]
 8010d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d58:	6892      	ldr	r2, [r2, #8]
 8010d5a:	4611      	mov	r1, r2
 8010d5c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	f2c0 80ae 	blt.w	8010ec2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d6c:	695b      	ldr	r3, [r3, #20]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d004      	beq.n	8010d7c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d74:	3304      	adds	r3, #4
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7fe f808 	bl	800ed8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d7c:	463b      	mov	r3, r7
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7ff ff6a 	bl	8010c58 <prvSampleTimeNow>
 8010d84:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2b09      	cmp	r3, #9
 8010d8a:	f200 8097 	bhi.w	8010ebc <prvProcessReceivedCommands+0x1a0>
 8010d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8010d94 <prvProcessReceivedCommands+0x78>)
 8010d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d94:	08010dbd 	.word	0x08010dbd
 8010d98:	08010dbd 	.word	0x08010dbd
 8010d9c:	08010dbd 	.word	0x08010dbd
 8010da0:	08010e33 	.word	0x08010e33
 8010da4:	08010e47 	.word	0x08010e47
 8010da8:	08010e93 	.word	0x08010e93
 8010dac:	08010dbd 	.word	0x08010dbd
 8010db0:	08010dbd 	.word	0x08010dbd
 8010db4:	08010e33 	.word	0x08010e33
 8010db8:	08010e47 	.word	0x08010e47
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010dc2:	f043 0301 	orr.w	r3, r3, #1
 8010dc6:	b2da      	uxtb	r2, r3
 8010dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010dce:	68ba      	ldr	r2, [r7, #8]
 8010dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dd2:	699b      	ldr	r3, [r3, #24]
 8010dd4:	18d1      	adds	r1, r2, r3
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010dda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ddc:	f7ff ff5c 	bl	8010c98 <prvInsertTimerInActiveList>
 8010de0:	4603      	mov	r3, r0
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d06c      	beq.n	8010ec0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010de8:	6a1b      	ldr	r3, [r3, #32]
 8010dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010dec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010df0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010df4:	f003 0304 	and.w	r3, r3, #4
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d061      	beq.n	8010ec0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010dfc:	68ba      	ldr	r2, [r7, #8]
 8010dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e00:	699b      	ldr	r3, [r3, #24]
 8010e02:	441a      	add	r2, r3
 8010e04:	2300      	movs	r3, #0
 8010e06:	9300      	str	r3, [sp, #0]
 8010e08:	2300      	movs	r3, #0
 8010e0a:	2100      	movs	r1, #0
 8010e0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e0e:	f7ff fe01 	bl	8010a14 <xTimerGenericCommand>
 8010e12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010e14:	6a3b      	ldr	r3, [r7, #32]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d152      	bne.n	8010ec0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e1e:	f383 8811 	msr	BASEPRI, r3
 8010e22:	f3bf 8f6f 	isb	sy
 8010e26:	f3bf 8f4f 	dsb	sy
 8010e2a:	61bb      	str	r3, [r7, #24]
}
 8010e2c:	bf00      	nop
 8010e2e:	bf00      	nop
 8010e30:	e7fd      	b.n	8010e2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e38:	f023 0301 	bic.w	r3, r3, #1
 8010e3c:	b2da      	uxtb	r2, r3
 8010e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010e44:	e03d      	b.n	8010ec2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e4c:	f043 0301 	orr.w	r3, r3, #1
 8010e50:	b2da      	uxtb	r2, r3
 8010e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010e58:	68ba      	ldr	r2, [r7, #8]
 8010e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e5c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e60:	699b      	ldr	r3, [r3, #24]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d10b      	bne.n	8010e7e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8010e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e6a:	f383 8811 	msr	BASEPRI, r3
 8010e6e:	f3bf 8f6f 	isb	sy
 8010e72:	f3bf 8f4f 	dsb	sy
 8010e76:	617b      	str	r3, [r7, #20]
}
 8010e78:	bf00      	nop
 8010e7a:	bf00      	nop
 8010e7c:	e7fd      	b.n	8010e7a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e80:	699a      	ldr	r2, [r3, #24]
 8010e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e84:	18d1      	adds	r1, r2, r3
 8010e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e8c:	f7ff ff04 	bl	8010c98 <prvInsertTimerInActiveList>
					break;
 8010e90:	e017      	b.n	8010ec2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e98:	f003 0302 	and.w	r3, r3, #2
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d103      	bne.n	8010ea8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010ea0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ea2:	f000 fc09 	bl	80116b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010ea6:	e00c      	b.n	8010ec2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010eae:	f023 0301 	bic.w	r3, r3, #1
 8010eb2:	b2da      	uxtb	r2, r3
 8010eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010eba:	e002      	b.n	8010ec2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8010ebc:	bf00      	nop
 8010ebe:	e000      	b.n	8010ec2 <prvProcessReceivedCommands+0x1a6>
					break;
 8010ec0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010ec2:	4b08      	ldr	r3, [pc, #32]	@ (8010ee4 <prvProcessReceivedCommands+0x1c8>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	1d39      	adds	r1, r7, #4
 8010ec8:	2200      	movs	r2, #0
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7fe fa6e 	bl	800f3ac <xQueueReceive>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	f47f af26 	bne.w	8010d24 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010ed8:	bf00      	nop
 8010eda:	bf00      	nop
 8010edc:	3730      	adds	r7, #48	@ 0x30
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	20004bec 	.word	0x20004bec

08010ee8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b088      	sub	sp, #32
 8010eec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010eee:	e049      	b.n	8010f84 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8010fac <prvSwitchTimerLists+0xc4>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	68db      	ldr	r3, [r3, #12]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010efa:	4b2c      	ldr	r3, [pc, #176]	@ (8010fac <prvSwitchTimerLists+0xc4>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	68db      	ldr	r3, [r3, #12]
 8010f00:	68db      	ldr	r3, [r3, #12]
 8010f02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	3304      	adds	r3, #4
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7fd ff3f 	bl	800ed8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	6a1b      	ldr	r3, [r3, #32]
 8010f12:	68f8      	ldr	r0, [r7, #12]
 8010f14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f1c:	f003 0304 	and.w	r3, r3, #4
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d02f      	beq.n	8010f84 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	699b      	ldr	r3, [r3, #24]
 8010f28:	693a      	ldr	r2, [r7, #16]
 8010f2a:	4413      	add	r3, r2
 8010f2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010f2e:	68ba      	ldr	r2, [r7, #8]
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	429a      	cmp	r2, r3
 8010f34:	d90e      	bls.n	8010f54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	68ba      	ldr	r2, [r7, #8]
 8010f3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	68fa      	ldr	r2, [r7, #12]
 8010f40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010f42:	4b1a      	ldr	r3, [pc, #104]	@ (8010fac <prvSwitchTimerLists+0xc4>)
 8010f44:	681a      	ldr	r2, [r3, #0]
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	3304      	adds	r3, #4
 8010f4a:	4619      	mov	r1, r3
 8010f4c:	4610      	mov	r0, r2
 8010f4e:	f7fd fee4 	bl	800ed1a <vListInsert>
 8010f52:	e017      	b.n	8010f84 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010f54:	2300      	movs	r3, #0
 8010f56:	9300      	str	r3, [sp, #0]
 8010f58:	2300      	movs	r3, #0
 8010f5a:	693a      	ldr	r2, [r7, #16]
 8010f5c:	2100      	movs	r1, #0
 8010f5e:	68f8      	ldr	r0, [r7, #12]
 8010f60:	f7ff fd58 	bl	8010a14 <xTimerGenericCommand>
 8010f64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d10b      	bne.n	8010f84 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8010f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f70:	f383 8811 	msr	BASEPRI, r3
 8010f74:	f3bf 8f6f 	isb	sy
 8010f78:	f3bf 8f4f 	dsb	sy
 8010f7c:	603b      	str	r3, [r7, #0]
}
 8010f7e:	bf00      	nop
 8010f80:	bf00      	nop
 8010f82:	e7fd      	b.n	8010f80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010f84:	4b09      	ldr	r3, [pc, #36]	@ (8010fac <prvSwitchTimerLists+0xc4>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d1b0      	bne.n	8010ef0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010f8e:	4b07      	ldr	r3, [pc, #28]	@ (8010fac <prvSwitchTimerLists+0xc4>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010f94:	4b06      	ldr	r3, [pc, #24]	@ (8010fb0 <prvSwitchTimerLists+0xc8>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	4a04      	ldr	r2, [pc, #16]	@ (8010fac <prvSwitchTimerLists+0xc4>)
 8010f9a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010f9c:	4a04      	ldr	r2, [pc, #16]	@ (8010fb0 <prvSwitchTimerLists+0xc8>)
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	6013      	str	r3, [r2, #0]
}
 8010fa2:	bf00      	nop
 8010fa4:	3718      	adds	r7, #24
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}
 8010faa:	bf00      	nop
 8010fac:	20004be4 	.word	0x20004be4
 8010fb0:	20004be8 	.word	0x20004be8

08010fb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010fba:	f000 f98d 	bl	80112d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010fbe:	4b15      	ldr	r3, [pc, #84]	@ (8011014 <prvCheckForValidListAndQueue+0x60>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d120      	bne.n	8011008 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010fc6:	4814      	ldr	r0, [pc, #80]	@ (8011018 <prvCheckForValidListAndQueue+0x64>)
 8010fc8:	f7fd fe56 	bl	800ec78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010fcc:	4813      	ldr	r0, [pc, #76]	@ (801101c <prvCheckForValidListAndQueue+0x68>)
 8010fce:	f7fd fe53 	bl	800ec78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010fd2:	4b13      	ldr	r3, [pc, #76]	@ (8011020 <prvCheckForValidListAndQueue+0x6c>)
 8010fd4:	4a10      	ldr	r2, [pc, #64]	@ (8011018 <prvCheckForValidListAndQueue+0x64>)
 8010fd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010fd8:	4b12      	ldr	r3, [pc, #72]	@ (8011024 <prvCheckForValidListAndQueue+0x70>)
 8010fda:	4a10      	ldr	r2, [pc, #64]	@ (801101c <prvCheckForValidListAndQueue+0x68>)
 8010fdc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010fde:	2300      	movs	r3, #0
 8010fe0:	9300      	str	r3, [sp, #0]
 8010fe2:	4b11      	ldr	r3, [pc, #68]	@ (8011028 <prvCheckForValidListAndQueue+0x74>)
 8010fe4:	4a11      	ldr	r2, [pc, #68]	@ (801102c <prvCheckForValidListAndQueue+0x78>)
 8010fe6:	2110      	movs	r1, #16
 8010fe8:	200a      	movs	r0, #10
 8010fea:	f7fd ff63 	bl	800eeb4 <xQueueGenericCreateStatic>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	4a08      	ldr	r2, [pc, #32]	@ (8011014 <prvCheckForValidListAndQueue+0x60>)
 8010ff2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010ff4:	4b07      	ldr	r3, [pc, #28]	@ (8011014 <prvCheckForValidListAndQueue+0x60>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d005      	beq.n	8011008 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010ffc:	4b05      	ldr	r3, [pc, #20]	@ (8011014 <prvCheckForValidListAndQueue+0x60>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	490b      	ldr	r1, [pc, #44]	@ (8011030 <prvCheckForValidListAndQueue+0x7c>)
 8011002:	4618      	mov	r0, r3
 8011004:	f7fe fc6a 	bl	800f8dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011008:	f000 f998 	bl	801133c <vPortExitCritical>
}
 801100c:	bf00      	nop
 801100e:	46bd      	mov	sp, r7
 8011010:	bd80      	pop	{r7, pc}
 8011012:	bf00      	nop
 8011014:	20004bec 	.word	0x20004bec
 8011018:	20004bbc 	.word	0x20004bbc
 801101c:	20004bd0 	.word	0x20004bd0
 8011020:	20004be4 	.word	0x20004be4
 8011024:	20004be8 	.word	0x20004be8
 8011028:	20004c98 	.word	0x20004c98
 801102c:	20004bf8 	.word	0x20004bf8
 8011030:	08014bc8 	.word	0x08014bc8

08011034 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b086      	sub	sp, #24
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d10b      	bne.n	801105e <pvTimerGetTimerID+0x2a>
	__asm volatile
 8011046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801104a:	f383 8811 	msr	BASEPRI, r3
 801104e:	f3bf 8f6f 	isb	sy
 8011052:	f3bf 8f4f 	dsb	sy
 8011056:	60fb      	str	r3, [r7, #12]
}
 8011058:	bf00      	nop
 801105a:	bf00      	nop
 801105c:	e7fd      	b.n	801105a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 801105e:	f000 f93b 	bl	80112d8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	69db      	ldr	r3, [r3, #28]
 8011066:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8011068:	f000 f968 	bl	801133c <vPortExitCritical>

	return pvReturn;
 801106c:	693b      	ldr	r3, [r7, #16]
}
 801106e:	4618      	mov	r0, r3
 8011070:	3718      	adds	r7, #24
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
	...

08011078 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011078:	b480      	push	{r7}
 801107a:	b085      	sub	sp, #20
 801107c:	af00      	add	r7, sp, #0
 801107e:	60f8      	str	r0, [r7, #12]
 8011080:	60b9      	str	r1, [r7, #8]
 8011082:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	3b04      	subs	r3, #4
 8011088:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	3b04      	subs	r3, #4
 8011096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	f023 0201 	bic.w	r2, r3, #1
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	3b04      	subs	r3, #4
 80110a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80110a8:	4a0c      	ldr	r2, [pc, #48]	@ (80110dc <pxPortInitialiseStack+0x64>)
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	3b14      	subs	r3, #20
 80110b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80110b4:	687a      	ldr	r2, [r7, #4]
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	3b04      	subs	r3, #4
 80110be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f06f 0202 	mvn.w	r2, #2
 80110c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	3b20      	subs	r3, #32
 80110cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80110ce:	68fb      	ldr	r3, [r7, #12]
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3714      	adds	r7, #20
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr
 80110dc:	080110e1 	.word	0x080110e1

080110e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80110e0:	b480      	push	{r7}
 80110e2:	b085      	sub	sp, #20
 80110e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80110e6:	2300      	movs	r3, #0
 80110e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80110ea:	4b13      	ldr	r3, [pc, #76]	@ (8011138 <prvTaskExitError+0x58>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110f2:	d00b      	beq.n	801110c <prvTaskExitError+0x2c>
	__asm volatile
 80110f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110f8:	f383 8811 	msr	BASEPRI, r3
 80110fc:	f3bf 8f6f 	isb	sy
 8011100:	f3bf 8f4f 	dsb	sy
 8011104:	60fb      	str	r3, [r7, #12]
}
 8011106:	bf00      	nop
 8011108:	bf00      	nop
 801110a:	e7fd      	b.n	8011108 <prvTaskExitError+0x28>
	__asm volatile
 801110c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011110:	f383 8811 	msr	BASEPRI, r3
 8011114:	f3bf 8f6f 	isb	sy
 8011118:	f3bf 8f4f 	dsb	sy
 801111c:	60bb      	str	r3, [r7, #8]
}
 801111e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011120:	bf00      	nop
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d0fc      	beq.n	8011122 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011128:	bf00      	nop
 801112a:	bf00      	nop
 801112c:	3714      	adds	r7, #20
 801112e:	46bd      	mov	sp, r7
 8011130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011134:	4770      	bx	lr
 8011136:	bf00      	nop
 8011138:	20000034 	.word	0x20000034
 801113c:	00000000 	.word	0x00000000

08011140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011140:	4b07      	ldr	r3, [pc, #28]	@ (8011160 <pxCurrentTCBConst2>)
 8011142:	6819      	ldr	r1, [r3, #0]
 8011144:	6808      	ldr	r0, [r1, #0]
 8011146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801114a:	f380 8809 	msr	PSP, r0
 801114e:	f3bf 8f6f 	isb	sy
 8011152:	f04f 0000 	mov.w	r0, #0
 8011156:	f380 8811 	msr	BASEPRI, r0
 801115a:	4770      	bx	lr
 801115c:	f3af 8000 	nop.w

08011160 <pxCurrentTCBConst2>:
 8011160:	200046bc 	.word	0x200046bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011164:	bf00      	nop
 8011166:	bf00      	nop

08011168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011168:	4808      	ldr	r0, [pc, #32]	@ (801118c <prvPortStartFirstTask+0x24>)
 801116a:	6800      	ldr	r0, [r0, #0]
 801116c:	6800      	ldr	r0, [r0, #0]
 801116e:	f380 8808 	msr	MSP, r0
 8011172:	f04f 0000 	mov.w	r0, #0
 8011176:	f380 8814 	msr	CONTROL, r0
 801117a:	b662      	cpsie	i
 801117c:	b661      	cpsie	f
 801117e:	f3bf 8f4f 	dsb	sy
 8011182:	f3bf 8f6f 	isb	sy
 8011186:	df00      	svc	0
 8011188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801118a:	bf00      	nop
 801118c:	e000ed08 	.word	0xe000ed08

08011190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b086      	sub	sp, #24
 8011194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011196:	4b47      	ldr	r3, [pc, #284]	@ (80112b4 <xPortStartScheduler+0x124>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	4a47      	ldr	r2, [pc, #284]	@ (80112b8 <xPortStartScheduler+0x128>)
 801119c:	4293      	cmp	r3, r2
 801119e:	d10b      	bne.n	80111b8 <xPortStartScheduler+0x28>
	__asm volatile
 80111a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111a4:	f383 8811 	msr	BASEPRI, r3
 80111a8:	f3bf 8f6f 	isb	sy
 80111ac:	f3bf 8f4f 	dsb	sy
 80111b0:	613b      	str	r3, [r7, #16]
}
 80111b2:	bf00      	nop
 80111b4:	bf00      	nop
 80111b6:	e7fd      	b.n	80111b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80111b8:	4b3e      	ldr	r3, [pc, #248]	@ (80112b4 <xPortStartScheduler+0x124>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	4a3f      	ldr	r2, [pc, #252]	@ (80112bc <xPortStartScheduler+0x12c>)
 80111be:	4293      	cmp	r3, r2
 80111c0:	d10b      	bne.n	80111da <xPortStartScheduler+0x4a>
	__asm volatile
 80111c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111c6:	f383 8811 	msr	BASEPRI, r3
 80111ca:	f3bf 8f6f 	isb	sy
 80111ce:	f3bf 8f4f 	dsb	sy
 80111d2:	60fb      	str	r3, [r7, #12]
}
 80111d4:	bf00      	nop
 80111d6:	bf00      	nop
 80111d8:	e7fd      	b.n	80111d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80111da:	4b39      	ldr	r3, [pc, #228]	@ (80112c0 <xPortStartScheduler+0x130>)
 80111dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	b2db      	uxtb	r3, r3
 80111e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	22ff      	movs	r2, #255	@ 0xff
 80111ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	781b      	ldrb	r3, [r3, #0]
 80111f0:	b2db      	uxtb	r3, r3
 80111f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80111f4:	78fb      	ldrb	r3, [r7, #3]
 80111f6:	b2db      	uxtb	r3, r3
 80111f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80111fc:	b2da      	uxtb	r2, r3
 80111fe:	4b31      	ldr	r3, [pc, #196]	@ (80112c4 <xPortStartScheduler+0x134>)
 8011200:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011202:	4b31      	ldr	r3, [pc, #196]	@ (80112c8 <xPortStartScheduler+0x138>)
 8011204:	2207      	movs	r2, #7
 8011206:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011208:	e009      	b.n	801121e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801120a:	4b2f      	ldr	r3, [pc, #188]	@ (80112c8 <xPortStartScheduler+0x138>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	3b01      	subs	r3, #1
 8011210:	4a2d      	ldr	r2, [pc, #180]	@ (80112c8 <xPortStartScheduler+0x138>)
 8011212:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011214:	78fb      	ldrb	r3, [r7, #3]
 8011216:	b2db      	uxtb	r3, r3
 8011218:	005b      	lsls	r3, r3, #1
 801121a:	b2db      	uxtb	r3, r3
 801121c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801121e:	78fb      	ldrb	r3, [r7, #3]
 8011220:	b2db      	uxtb	r3, r3
 8011222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011226:	2b80      	cmp	r3, #128	@ 0x80
 8011228:	d0ef      	beq.n	801120a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801122a:	4b27      	ldr	r3, [pc, #156]	@ (80112c8 <xPortStartScheduler+0x138>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f1c3 0307 	rsb	r3, r3, #7
 8011232:	2b04      	cmp	r3, #4
 8011234:	d00b      	beq.n	801124e <xPortStartScheduler+0xbe>
	__asm volatile
 8011236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801123a:	f383 8811 	msr	BASEPRI, r3
 801123e:	f3bf 8f6f 	isb	sy
 8011242:	f3bf 8f4f 	dsb	sy
 8011246:	60bb      	str	r3, [r7, #8]
}
 8011248:	bf00      	nop
 801124a:	bf00      	nop
 801124c:	e7fd      	b.n	801124a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801124e:	4b1e      	ldr	r3, [pc, #120]	@ (80112c8 <xPortStartScheduler+0x138>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	021b      	lsls	r3, r3, #8
 8011254:	4a1c      	ldr	r2, [pc, #112]	@ (80112c8 <xPortStartScheduler+0x138>)
 8011256:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011258:	4b1b      	ldr	r3, [pc, #108]	@ (80112c8 <xPortStartScheduler+0x138>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011260:	4a19      	ldr	r2, [pc, #100]	@ (80112c8 <xPortStartScheduler+0x138>)
 8011262:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	b2da      	uxtb	r2, r3
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801126c:	4b17      	ldr	r3, [pc, #92]	@ (80112cc <xPortStartScheduler+0x13c>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	4a16      	ldr	r2, [pc, #88]	@ (80112cc <xPortStartScheduler+0x13c>)
 8011272:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011276:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011278:	4b14      	ldr	r3, [pc, #80]	@ (80112cc <xPortStartScheduler+0x13c>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	4a13      	ldr	r2, [pc, #76]	@ (80112cc <xPortStartScheduler+0x13c>)
 801127e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011282:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011284:	f000 f8da 	bl	801143c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011288:	4b11      	ldr	r3, [pc, #68]	@ (80112d0 <xPortStartScheduler+0x140>)
 801128a:	2200      	movs	r2, #0
 801128c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801128e:	f000 f8f9 	bl	8011484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011292:	4b10      	ldr	r3, [pc, #64]	@ (80112d4 <xPortStartScheduler+0x144>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	4a0f      	ldr	r2, [pc, #60]	@ (80112d4 <xPortStartScheduler+0x144>)
 8011298:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801129c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801129e:	f7ff ff63 	bl	8011168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80112a2:	f7fe ff45 	bl	8010130 <vTaskSwitchContext>
	prvTaskExitError();
 80112a6:	f7ff ff1b 	bl	80110e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80112aa:	2300      	movs	r3, #0
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	3718      	adds	r7, #24
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}
 80112b4:	e000ed00 	.word	0xe000ed00
 80112b8:	410fc271 	.word	0x410fc271
 80112bc:	410fc270 	.word	0x410fc270
 80112c0:	e000e400 	.word	0xe000e400
 80112c4:	20004ce8 	.word	0x20004ce8
 80112c8:	20004cec 	.word	0x20004cec
 80112cc:	e000ed20 	.word	0xe000ed20
 80112d0:	20000034 	.word	0x20000034
 80112d4:	e000ef34 	.word	0xe000ef34

080112d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80112d8:	b480      	push	{r7}
 80112da:	b083      	sub	sp, #12
 80112dc:	af00      	add	r7, sp, #0
	__asm volatile
 80112de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112e2:	f383 8811 	msr	BASEPRI, r3
 80112e6:	f3bf 8f6f 	isb	sy
 80112ea:	f3bf 8f4f 	dsb	sy
 80112ee:	607b      	str	r3, [r7, #4]
}
 80112f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80112f2:	4b10      	ldr	r3, [pc, #64]	@ (8011334 <vPortEnterCritical+0x5c>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	3301      	adds	r3, #1
 80112f8:	4a0e      	ldr	r2, [pc, #56]	@ (8011334 <vPortEnterCritical+0x5c>)
 80112fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80112fc:	4b0d      	ldr	r3, [pc, #52]	@ (8011334 <vPortEnterCritical+0x5c>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	2b01      	cmp	r3, #1
 8011302:	d110      	bne.n	8011326 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011304:	4b0c      	ldr	r3, [pc, #48]	@ (8011338 <vPortEnterCritical+0x60>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	b2db      	uxtb	r3, r3
 801130a:	2b00      	cmp	r3, #0
 801130c:	d00b      	beq.n	8011326 <vPortEnterCritical+0x4e>
	__asm volatile
 801130e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011312:	f383 8811 	msr	BASEPRI, r3
 8011316:	f3bf 8f6f 	isb	sy
 801131a:	f3bf 8f4f 	dsb	sy
 801131e:	603b      	str	r3, [r7, #0]
}
 8011320:	bf00      	nop
 8011322:	bf00      	nop
 8011324:	e7fd      	b.n	8011322 <vPortEnterCritical+0x4a>
	}
}
 8011326:	bf00      	nop
 8011328:	370c      	adds	r7, #12
 801132a:	46bd      	mov	sp, r7
 801132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011330:	4770      	bx	lr
 8011332:	bf00      	nop
 8011334:	20000034 	.word	0x20000034
 8011338:	e000ed04 	.word	0xe000ed04

0801133c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801133c:	b480      	push	{r7}
 801133e:	b083      	sub	sp, #12
 8011340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011342:	4b12      	ldr	r3, [pc, #72]	@ (801138c <vPortExitCritical+0x50>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d10b      	bne.n	8011362 <vPortExitCritical+0x26>
	__asm volatile
 801134a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801134e:	f383 8811 	msr	BASEPRI, r3
 8011352:	f3bf 8f6f 	isb	sy
 8011356:	f3bf 8f4f 	dsb	sy
 801135a:	607b      	str	r3, [r7, #4]
}
 801135c:	bf00      	nop
 801135e:	bf00      	nop
 8011360:	e7fd      	b.n	801135e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011362:	4b0a      	ldr	r3, [pc, #40]	@ (801138c <vPortExitCritical+0x50>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	3b01      	subs	r3, #1
 8011368:	4a08      	ldr	r2, [pc, #32]	@ (801138c <vPortExitCritical+0x50>)
 801136a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801136c:	4b07      	ldr	r3, [pc, #28]	@ (801138c <vPortExitCritical+0x50>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d105      	bne.n	8011380 <vPortExitCritical+0x44>
 8011374:	2300      	movs	r3, #0
 8011376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	f383 8811 	msr	BASEPRI, r3
}
 801137e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011380:	bf00      	nop
 8011382:	370c      	adds	r7, #12
 8011384:	46bd      	mov	sp, r7
 8011386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138a:	4770      	bx	lr
 801138c:	20000034 	.word	0x20000034

08011390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011390:	f3ef 8009 	mrs	r0, PSP
 8011394:	f3bf 8f6f 	isb	sy
 8011398:	4b15      	ldr	r3, [pc, #84]	@ (80113f0 <pxCurrentTCBConst>)
 801139a:	681a      	ldr	r2, [r3, #0]
 801139c:	f01e 0f10 	tst.w	lr, #16
 80113a0:	bf08      	it	eq
 80113a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80113a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113aa:	6010      	str	r0, [r2, #0]
 80113ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80113b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80113b4:	f380 8811 	msr	BASEPRI, r0
 80113b8:	f3bf 8f4f 	dsb	sy
 80113bc:	f3bf 8f6f 	isb	sy
 80113c0:	f7fe feb6 	bl	8010130 <vTaskSwitchContext>
 80113c4:	f04f 0000 	mov.w	r0, #0
 80113c8:	f380 8811 	msr	BASEPRI, r0
 80113cc:	bc09      	pop	{r0, r3}
 80113ce:	6819      	ldr	r1, [r3, #0]
 80113d0:	6808      	ldr	r0, [r1, #0]
 80113d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113d6:	f01e 0f10 	tst.w	lr, #16
 80113da:	bf08      	it	eq
 80113dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80113e0:	f380 8809 	msr	PSP, r0
 80113e4:	f3bf 8f6f 	isb	sy
 80113e8:	4770      	bx	lr
 80113ea:	bf00      	nop
 80113ec:	f3af 8000 	nop.w

080113f0 <pxCurrentTCBConst>:
 80113f0:	200046bc 	.word	0x200046bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80113f4:	bf00      	nop
 80113f6:	bf00      	nop

080113f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
	__asm volatile
 80113fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011402:	f383 8811 	msr	BASEPRI, r3
 8011406:	f3bf 8f6f 	isb	sy
 801140a:	f3bf 8f4f 	dsb	sy
 801140e:	607b      	str	r3, [r7, #4]
}
 8011410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011412:	f7fe fdd3 	bl	800ffbc <xTaskIncrementTick>
 8011416:	4603      	mov	r3, r0
 8011418:	2b00      	cmp	r3, #0
 801141a:	d003      	beq.n	8011424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801141c:	4b06      	ldr	r3, [pc, #24]	@ (8011438 <xPortSysTickHandler+0x40>)
 801141e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011422:	601a      	str	r2, [r3, #0]
 8011424:	2300      	movs	r3, #0
 8011426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	f383 8811 	msr	BASEPRI, r3
}
 801142e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011430:	bf00      	nop
 8011432:	3708      	adds	r7, #8
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}
 8011438:	e000ed04 	.word	0xe000ed04

0801143c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801143c:	b480      	push	{r7}
 801143e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011440:	4b0b      	ldr	r3, [pc, #44]	@ (8011470 <vPortSetupTimerInterrupt+0x34>)
 8011442:	2200      	movs	r2, #0
 8011444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011446:	4b0b      	ldr	r3, [pc, #44]	@ (8011474 <vPortSetupTimerInterrupt+0x38>)
 8011448:	2200      	movs	r2, #0
 801144a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801144c:	4b0a      	ldr	r3, [pc, #40]	@ (8011478 <vPortSetupTimerInterrupt+0x3c>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	4a0a      	ldr	r2, [pc, #40]	@ (801147c <vPortSetupTimerInterrupt+0x40>)
 8011452:	fba2 2303 	umull	r2, r3, r2, r3
 8011456:	099b      	lsrs	r3, r3, #6
 8011458:	4a09      	ldr	r2, [pc, #36]	@ (8011480 <vPortSetupTimerInterrupt+0x44>)
 801145a:	3b01      	subs	r3, #1
 801145c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801145e:	4b04      	ldr	r3, [pc, #16]	@ (8011470 <vPortSetupTimerInterrupt+0x34>)
 8011460:	2207      	movs	r2, #7
 8011462:	601a      	str	r2, [r3, #0]
}
 8011464:	bf00      	nop
 8011466:	46bd      	mov	sp, r7
 8011468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146c:	4770      	bx	lr
 801146e:	bf00      	nop
 8011470:	e000e010 	.word	0xe000e010
 8011474:	e000e018 	.word	0xe000e018
 8011478:	20000000 	.word	0x20000000
 801147c:	10624dd3 	.word	0x10624dd3
 8011480:	e000e014 	.word	0xe000e014

08011484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011484:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011494 <vPortEnableVFP+0x10>
 8011488:	6801      	ldr	r1, [r0, #0]
 801148a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801148e:	6001      	str	r1, [r0, #0]
 8011490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011492:	bf00      	nop
 8011494:	e000ed88 	.word	0xe000ed88

08011498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011498:	b480      	push	{r7}
 801149a:	b085      	sub	sp, #20
 801149c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801149e:	f3ef 8305 	mrs	r3, IPSR
 80114a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	2b0f      	cmp	r3, #15
 80114a8:	d915      	bls.n	80114d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80114aa:	4a18      	ldr	r2, [pc, #96]	@ (801150c <vPortValidateInterruptPriority+0x74>)
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	4413      	add	r3, r2
 80114b0:	781b      	ldrb	r3, [r3, #0]
 80114b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80114b4:	4b16      	ldr	r3, [pc, #88]	@ (8011510 <vPortValidateInterruptPriority+0x78>)
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	7afa      	ldrb	r2, [r7, #11]
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d20b      	bcs.n	80114d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80114be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114c2:	f383 8811 	msr	BASEPRI, r3
 80114c6:	f3bf 8f6f 	isb	sy
 80114ca:	f3bf 8f4f 	dsb	sy
 80114ce:	607b      	str	r3, [r7, #4]
}
 80114d0:	bf00      	nop
 80114d2:	bf00      	nop
 80114d4:	e7fd      	b.n	80114d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80114d6:	4b0f      	ldr	r3, [pc, #60]	@ (8011514 <vPortValidateInterruptPriority+0x7c>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80114de:	4b0e      	ldr	r3, [pc, #56]	@ (8011518 <vPortValidateInterruptPriority+0x80>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d90b      	bls.n	80114fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80114e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114ea:	f383 8811 	msr	BASEPRI, r3
 80114ee:	f3bf 8f6f 	isb	sy
 80114f2:	f3bf 8f4f 	dsb	sy
 80114f6:	603b      	str	r3, [r7, #0]
}
 80114f8:	bf00      	nop
 80114fa:	bf00      	nop
 80114fc:	e7fd      	b.n	80114fa <vPortValidateInterruptPriority+0x62>
	}
 80114fe:	bf00      	nop
 8011500:	3714      	adds	r7, #20
 8011502:	46bd      	mov	sp, r7
 8011504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011508:	4770      	bx	lr
 801150a:	bf00      	nop
 801150c:	e000e3f0 	.word	0xe000e3f0
 8011510:	20004ce8 	.word	0x20004ce8
 8011514:	e000ed0c 	.word	0xe000ed0c
 8011518:	20004cec 	.word	0x20004cec

0801151c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b08a      	sub	sp, #40	@ 0x28
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011524:	2300      	movs	r3, #0
 8011526:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011528:	f7fe fc7a 	bl	800fe20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801152c:	4b5c      	ldr	r3, [pc, #368]	@ (80116a0 <pvPortMalloc+0x184>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d101      	bne.n	8011538 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011534:	f000 f924 	bl	8011780 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011538:	4b5a      	ldr	r3, [pc, #360]	@ (80116a4 <pvPortMalloc+0x188>)
 801153a:	681a      	ldr	r2, [r3, #0]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	4013      	ands	r3, r2
 8011540:	2b00      	cmp	r3, #0
 8011542:	f040 8095 	bne.w	8011670 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d01e      	beq.n	801158a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801154c:	2208      	movs	r2, #8
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	4413      	add	r3, r2
 8011552:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f003 0307 	and.w	r3, r3, #7
 801155a:	2b00      	cmp	r3, #0
 801155c:	d015      	beq.n	801158a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f023 0307 	bic.w	r3, r3, #7
 8011564:	3308      	adds	r3, #8
 8011566:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f003 0307 	and.w	r3, r3, #7
 801156e:	2b00      	cmp	r3, #0
 8011570:	d00b      	beq.n	801158a <pvPortMalloc+0x6e>
	__asm volatile
 8011572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011576:	f383 8811 	msr	BASEPRI, r3
 801157a:	f3bf 8f6f 	isb	sy
 801157e:	f3bf 8f4f 	dsb	sy
 8011582:	617b      	str	r3, [r7, #20]
}
 8011584:	bf00      	nop
 8011586:	bf00      	nop
 8011588:	e7fd      	b.n	8011586 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d06f      	beq.n	8011670 <pvPortMalloc+0x154>
 8011590:	4b45      	ldr	r3, [pc, #276]	@ (80116a8 <pvPortMalloc+0x18c>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	687a      	ldr	r2, [r7, #4]
 8011596:	429a      	cmp	r2, r3
 8011598:	d86a      	bhi.n	8011670 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801159a:	4b44      	ldr	r3, [pc, #272]	@ (80116ac <pvPortMalloc+0x190>)
 801159c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801159e:	4b43      	ldr	r3, [pc, #268]	@ (80116ac <pvPortMalloc+0x190>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80115a4:	e004      	b.n	80115b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80115a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80115aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80115b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b2:	685b      	ldr	r3, [r3, #4]
 80115b4:	687a      	ldr	r2, [r7, #4]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d903      	bls.n	80115c2 <pvPortMalloc+0xa6>
 80115ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d1f1      	bne.n	80115a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80115c2:	4b37      	ldr	r3, [pc, #220]	@ (80116a0 <pvPortMalloc+0x184>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d051      	beq.n	8011670 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80115cc:	6a3b      	ldr	r3, [r7, #32]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	2208      	movs	r2, #8
 80115d2:	4413      	add	r3, r2
 80115d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80115d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d8:	681a      	ldr	r2, [r3, #0]
 80115da:	6a3b      	ldr	r3, [r7, #32]
 80115dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80115de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e0:	685a      	ldr	r2, [r3, #4]
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	1ad2      	subs	r2, r2, r3
 80115e6:	2308      	movs	r3, #8
 80115e8:	005b      	lsls	r3, r3, #1
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d920      	bls.n	8011630 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80115ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	4413      	add	r3, r2
 80115f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80115f6:	69bb      	ldr	r3, [r7, #24]
 80115f8:	f003 0307 	and.w	r3, r3, #7
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d00b      	beq.n	8011618 <pvPortMalloc+0xfc>
	__asm volatile
 8011600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011604:	f383 8811 	msr	BASEPRI, r3
 8011608:	f3bf 8f6f 	isb	sy
 801160c:	f3bf 8f4f 	dsb	sy
 8011610:	613b      	str	r3, [r7, #16]
}
 8011612:	bf00      	nop
 8011614:	bf00      	nop
 8011616:	e7fd      	b.n	8011614 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801161a:	685a      	ldr	r2, [r3, #4]
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	1ad2      	subs	r2, r2, r3
 8011620:	69bb      	ldr	r3, [r7, #24]
 8011622:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011626:	687a      	ldr	r2, [r7, #4]
 8011628:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801162a:	69b8      	ldr	r0, [r7, #24]
 801162c:	f000 f90a 	bl	8011844 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011630:	4b1d      	ldr	r3, [pc, #116]	@ (80116a8 <pvPortMalloc+0x18c>)
 8011632:	681a      	ldr	r2, [r3, #0]
 8011634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011636:	685b      	ldr	r3, [r3, #4]
 8011638:	1ad3      	subs	r3, r2, r3
 801163a:	4a1b      	ldr	r2, [pc, #108]	@ (80116a8 <pvPortMalloc+0x18c>)
 801163c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801163e:	4b1a      	ldr	r3, [pc, #104]	@ (80116a8 <pvPortMalloc+0x18c>)
 8011640:	681a      	ldr	r2, [r3, #0]
 8011642:	4b1b      	ldr	r3, [pc, #108]	@ (80116b0 <pvPortMalloc+0x194>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	429a      	cmp	r2, r3
 8011648:	d203      	bcs.n	8011652 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801164a:	4b17      	ldr	r3, [pc, #92]	@ (80116a8 <pvPortMalloc+0x18c>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	4a18      	ldr	r2, [pc, #96]	@ (80116b0 <pvPortMalloc+0x194>)
 8011650:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011654:	685a      	ldr	r2, [r3, #4]
 8011656:	4b13      	ldr	r3, [pc, #76]	@ (80116a4 <pvPortMalloc+0x188>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	431a      	orrs	r2, r3
 801165c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801165e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011662:	2200      	movs	r2, #0
 8011664:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011666:	4b13      	ldr	r3, [pc, #76]	@ (80116b4 <pvPortMalloc+0x198>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	3301      	adds	r3, #1
 801166c:	4a11      	ldr	r2, [pc, #68]	@ (80116b4 <pvPortMalloc+0x198>)
 801166e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011670:	f7fe fbe4 	bl	800fe3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011674:	69fb      	ldr	r3, [r7, #28]
 8011676:	f003 0307 	and.w	r3, r3, #7
 801167a:	2b00      	cmp	r3, #0
 801167c:	d00b      	beq.n	8011696 <pvPortMalloc+0x17a>
	__asm volatile
 801167e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011682:	f383 8811 	msr	BASEPRI, r3
 8011686:	f3bf 8f6f 	isb	sy
 801168a:	f3bf 8f4f 	dsb	sy
 801168e:	60fb      	str	r3, [r7, #12]
}
 8011690:	bf00      	nop
 8011692:	bf00      	nop
 8011694:	e7fd      	b.n	8011692 <pvPortMalloc+0x176>
	return pvReturn;
 8011696:	69fb      	ldr	r3, [r7, #28]
}
 8011698:	4618      	mov	r0, r3
 801169a:	3728      	adds	r7, #40	@ 0x28
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	200088f8 	.word	0x200088f8
 80116a4:	2000890c 	.word	0x2000890c
 80116a8:	200088fc 	.word	0x200088fc
 80116ac:	200088f0 	.word	0x200088f0
 80116b0:	20008900 	.word	0x20008900
 80116b4:	20008904 	.word	0x20008904

080116b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b086      	sub	sp, #24
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d04f      	beq.n	801176a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80116ca:	2308      	movs	r3, #8
 80116cc:	425b      	negs	r3, r3
 80116ce:	697a      	ldr	r2, [r7, #20]
 80116d0:	4413      	add	r3, r2
 80116d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	685a      	ldr	r2, [r3, #4]
 80116dc:	4b25      	ldr	r3, [pc, #148]	@ (8011774 <vPortFree+0xbc>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	4013      	ands	r3, r2
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d10b      	bne.n	80116fe <vPortFree+0x46>
	__asm volatile
 80116e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116ea:	f383 8811 	msr	BASEPRI, r3
 80116ee:	f3bf 8f6f 	isb	sy
 80116f2:	f3bf 8f4f 	dsb	sy
 80116f6:	60fb      	str	r3, [r7, #12]
}
 80116f8:	bf00      	nop
 80116fa:	bf00      	nop
 80116fc:	e7fd      	b.n	80116fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80116fe:	693b      	ldr	r3, [r7, #16]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d00b      	beq.n	801171e <vPortFree+0x66>
	__asm volatile
 8011706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801170a:	f383 8811 	msr	BASEPRI, r3
 801170e:	f3bf 8f6f 	isb	sy
 8011712:	f3bf 8f4f 	dsb	sy
 8011716:	60bb      	str	r3, [r7, #8]
}
 8011718:	bf00      	nop
 801171a:	bf00      	nop
 801171c:	e7fd      	b.n	801171a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	685a      	ldr	r2, [r3, #4]
 8011722:	4b14      	ldr	r3, [pc, #80]	@ (8011774 <vPortFree+0xbc>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	4013      	ands	r3, r2
 8011728:	2b00      	cmp	r3, #0
 801172a:	d01e      	beq.n	801176a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801172c:	693b      	ldr	r3, [r7, #16]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d11a      	bne.n	801176a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011734:	693b      	ldr	r3, [r7, #16]
 8011736:	685a      	ldr	r2, [r3, #4]
 8011738:	4b0e      	ldr	r3, [pc, #56]	@ (8011774 <vPortFree+0xbc>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	43db      	mvns	r3, r3
 801173e:	401a      	ands	r2, r3
 8011740:	693b      	ldr	r3, [r7, #16]
 8011742:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011744:	f7fe fb6c 	bl	800fe20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011748:	693b      	ldr	r3, [r7, #16]
 801174a:	685a      	ldr	r2, [r3, #4]
 801174c:	4b0a      	ldr	r3, [pc, #40]	@ (8011778 <vPortFree+0xc0>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	4413      	add	r3, r2
 8011752:	4a09      	ldr	r2, [pc, #36]	@ (8011778 <vPortFree+0xc0>)
 8011754:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011756:	6938      	ldr	r0, [r7, #16]
 8011758:	f000 f874 	bl	8011844 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801175c:	4b07      	ldr	r3, [pc, #28]	@ (801177c <vPortFree+0xc4>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	3301      	adds	r3, #1
 8011762:	4a06      	ldr	r2, [pc, #24]	@ (801177c <vPortFree+0xc4>)
 8011764:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011766:	f7fe fb69 	bl	800fe3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801176a:	bf00      	nop
 801176c:	3718      	adds	r7, #24
 801176e:	46bd      	mov	sp, r7
 8011770:	bd80      	pop	{r7, pc}
 8011772:	bf00      	nop
 8011774:	2000890c 	.word	0x2000890c
 8011778:	200088fc 	.word	0x200088fc
 801177c:	20008908 	.word	0x20008908

08011780 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011780:	b480      	push	{r7}
 8011782:	b085      	sub	sp, #20
 8011784:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011786:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801178a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801178c:	4b27      	ldr	r3, [pc, #156]	@ (801182c <prvHeapInit+0xac>)
 801178e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	f003 0307 	and.w	r3, r3, #7
 8011796:	2b00      	cmp	r3, #0
 8011798:	d00c      	beq.n	80117b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	3307      	adds	r3, #7
 801179e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	f023 0307 	bic.w	r3, r3, #7
 80117a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80117a8:	68ba      	ldr	r2, [r7, #8]
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	1ad3      	subs	r3, r2, r3
 80117ae:	4a1f      	ldr	r2, [pc, #124]	@ (801182c <prvHeapInit+0xac>)
 80117b0:	4413      	add	r3, r2
 80117b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80117b8:	4a1d      	ldr	r2, [pc, #116]	@ (8011830 <prvHeapInit+0xb0>)
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80117be:	4b1c      	ldr	r3, [pc, #112]	@ (8011830 <prvHeapInit+0xb0>)
 80117c0:	2200      	movs	r2, #0
 80117c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	68ba      	ldr	r2, [r7, #8]
 80117c8:	4413      	add	r3, r2
 80117ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80117cc:	2208      	movs	r2, #8
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	1a9b      	subs	r3, r3, r2
 80117d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	f023 0307 	bic.w	r3, r3, #7
 80117da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	4a15      	ldr	r2, [pc, #84]	@ (8011834 <prvHeapInit+0xb4>)
 80117e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80117e2:	4b14      	ldr	r3, [pc, #80]	@ (8011834 <prvHeapInit+0xb4>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	2200      	movs	r2, #0
 80117e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80117ea:	4b12      	ldr	r3, [pc, #72]	@ (8011834 <prvHeapInit+0xb4>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2200      	movs	r2, #0
 80117f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	68fa      	ldr	r2, [r7, #12]
 80117fa:	1ad2      	subs	r2, r2, r3
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011800:	4b0c      	ldr	r3, [pc, #48]	@ (8011834 <prvHeapInit+0xb4>)
 8011802:	681a      	ldr	r2, [r3, #0]
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	4a0a      	ldr	r2, [pc, #40]	@ (8011838 <prvHeapInit+0xb8>)
 801180e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	4a09      	ldr	r2, [pc, #36]	@ (801183c <prvHeapInit+0xbc>)
 8011816:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011818:	4b09      	ldr	r3, [pc, #36]	@ (8011840 <prvHeapInit+0xc0>)
 801181a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801181e:	601a      	str	r2, [r3, #0]
}
 8011820:	bf00      	nop
 8011822:	3714      	adds	r7, #20
 8011824:	46bd      	mov	sp, r7
 8011826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182a:	4770      	bx	lr
 801182c:	20004cf0 	.word	0x20004cf0
 8011830:	200088f0 	.word	0x200088f0
 8011834:	200088f8 	.word	0x200088f8
 8011838:	20008900 	.word	0x20008900
 801183c:	200088fc 	.word	0x200088fc
 8011840:	2000890c 	.word	0x2000890c

08011844 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011844:	b480      	push	{r7}
 8011846:	b085      	sub	sp, #20
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801184c:	4b28      	ldr	r3, [pc, #160]	@ (80118f0 <prvInsertBlockIntoFreeList+0xac>)
 801184e:	60fb      	str	r3, [r7, #12]
 8011850:	e002      	b.n	8011858 <prvInsertBlockIntoFreeList+0x14>
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	60fb      	str	r3, [r7, #12]
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	687a      	ldr	r2, [r7, #4]
 801185e:	429a      	cmp	r2, r3
 8011860:	d8f7      	bhi.n	8011852 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	685b      	ldr	r3, [r3, #4]
 801186a:	68ba      	ldr	r2, [r7, #8]
 801186c:	4413      	add	r3, r2
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	429a      	cmp	r2, r3
 8011872:	d108      	bne.n	8011886 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	685a      	ldr	r2, [r3, #4]
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	685b      	ldr	r3, [r3, #4]
 801187c:	441a      	add	r2, r3
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	685b      	ldr	r3, [r3, #4]
 801188e:	68ba      	ldr	r2, [r7, #8]
 8011890:	441a      	add	r2, r3
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	429a      	cmp	r2, r3
 8011898:	d118      	bne.n	80118cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	681a      	ldr	r2, [r3, #0]
 801189e:	4b15      	ldr	r3, [pc, #84]	@ (80118f4 <prvInsertBlockIntoFreeList+0xb0>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d00d      	beq.n	80118c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	685a      	ldr	r2, [r3, #4]
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	685b      	ldr	r3, [r3, #4]
 80118b0:	441a      	add	r2, r3
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	681a      	ldr	r2, [r3, #0]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	601a      	str	r2, [r3, #0]
 80118c0:	e008      	b.n	80118d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80118c2:	4b0c      	ldr	r3, [pc, #48]	@ (80118f4 <prvInsertBlockIntoFreeList+0xb0>)
 80118c4:	681a      	ldr	r2, [r3, #0]
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	601a      	str	r2, [r3, #0]
 80118ca:	e003      	b.n	80118d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	681a      	ldr	r2, [r3, #0]
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80118d4:	68fa      	ldr	r2, [r7, #12]
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	429a      	cmp	r2, r3
 80118da:	d002      	beq.n	80118e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	687a      	ldr	r2, [r7, #4]
 80118e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80118e2:	bf00      	nop
 80118e4:	3714      	adds	r7, #20
 80118e6:	46bd      	mov	sp, r7
 80118e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ec:	4770      	bx	lr
 80118ee:	bf00      	nop
 80118f0:	200088f0 	.word	0x200088f0
 80118f4:	200088f8 	.word	0x200088f8

080118f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b082      	sub	sp, #8
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801190c:	4619      	mov	r1, r3
 801190e:	4610      	mov	r0, r2
 8011910:	f7fb fc15 	bl	800d13e <USBD_LL_SetupStage>
}
 8011914:	bf00      	nop
 8011916:	3708      	adds	r7, #8
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}

0801191c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b082      	sub	sp, #8
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	460b      	mov	r3, r1
 8011926:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801192e:	78fa      	ldrb	r2, [r7, #3]
 8011930:	6879      	ldr	r1, [r7, #4]
 8011932:	4613      	mov	r3, r2
 8011934:	00db      	lsls	r3, r3, #3
 8011936:	4413      	add	r3, r2
 8011938:	009b      	lsls	r3, r3, #2
 801193a:	440b      	add	r3, r1
 801193c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011940:	681a      	ldr	r2, [r3, #0]
 8011942:	78fb      	ldrb	r3, [r7, #3]
 8011944:	4619      	mov	r1, r3
 8011946:	f7fb fc4f 	bl	800d1e8 <USBD_LL_DataOutStage>
}
 801194a:	bf00      	nop
 801194c:	3708      	adds	r7, #8
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}

08011952 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011952:	b580      	push	{r7, lr}
 8011954:	b082      	sub	sp, #8
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
 801195a:	460b      	mov	r3, r1
 801195c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011964:	78fa      	ldrb	r2, [r7, #3]
 8011966:	6879      	ldr	r1, [r7, #4]
 8011968:	4613      	mov	r3, r2
 801196a:	00db      	lsls	r3, r3, #3
 801196c:	4413      	add	r3, r2
 801196e:	009b      	lsls	r3, r3, #2
 8011970:	440b      	add	r3, r1
 8011972:	3320      	adds	r3, #32
 8011974:	681a      	ldr	r2, [r3, #0]
 8011976:	78fb      	ldrb	r3, [r7, #3]
 8011978:	4619      	mov	r1, r3
 801197a:	f7fb fcf1 	bl	800d360 <USBD_LL_DataInStage>
}
 801197e:	bf00      	nop
 8011980:	3708      	adds	r7, #8
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}

08011986 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011986:	b580      	push	{r7, lr}
 8011988:	b082      	sub	sp, #8
 801198a:	af00      	add	r7, sp, #0
 801198c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011994:	4618      	mov	r0, r3
 8011996:	f7fb fe35 	bl	800d604 <USBD_LL_SOF>
}
 801199a:	bf00      	nop
 801199c:	3708      	adds	r7, #8
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}

080119a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119a2:	b580      	push	{r7, lr}
 80119a4:	b084      	sub	sp, #16
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80119aa:	2301      	movs	r3, #1
 80119ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	79db      	ldrb	r3, [r3, #7]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d102      	bne.n	80119bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80119b6:	2300      	movs	r3, #0
 80119b8:	73fb      	strb	r3, [r7, #15]
 80119ba:	e008      	b.n	80119ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	79db      	ldrb	r3, [r3, #7]
 80119c0:	2b02      	cmp	r3, #2
 80119c2:	d102      	bne.n	80119ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80119c4:	2301      	movs	r3, #1
 80119c6:	73fb      	strb	r3, [r7, #15]
 80119c8:	e001      	b.n	80119ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80119ca:	f7f0 fe39 	bl	8002640 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80119d4:	7bfa      	ldrb	r2, [r7, #15]
 80119d6:	4611      	mov	r1, r2
 80119d8:	4618      	mov	r0, r3
 80119da:	f7fb fdcf 	bl	800d57c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7fb fd76 	bl	800d4d6 <USBD_LL_Reset>
}
 80119ea:	bf00      	nop
 80119ec:	3710      	adds	r7, #16
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
	...

080119f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b082      	sub	sp, #8
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a02:	4618      	mov	r0, r3
 8011a04:	f7fb fdca 	bl	800d59c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	6812      	ldr	r2, [r2, #0]
 8011a16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011a1a:	f043 0301 	orr.w	r3, r3, #1
 8011a1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	7adb      	ldrb	r3, [r3, #11]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d005      	beq.n	8011a34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a28:	4b04      	ldr	r3, [pc, #16]	@ (8011a3c <HAL_PCD_SuspendCallback+0x48>)
 8011a2a:	691b      	ldr	r3, [r3, #16]
 8011a2c:	4a03      	ldr	r2, [pc, #12]	@ (8011a3c <HAL_PCD_SuspendCallback+0x48>)
 8011a2e:	f043 0306 	orr.w	r3, r3, #6
 8011a32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011a34:	bf00      	nop
 8011a36:	3708      	adds	r7, #8
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}
 8011a3c:	e000ed00 	.word	0xe000ed00

08011a40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b082      	sub	sp, #8
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7fb fdc0 	bl	800d5d4 <USBD_LL_Resume>
}
 8011a54:	bf00      	nop
 8011a56:	3708      	adds	r7, #8
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}

08011a5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b082      	sub	sp, #8
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
 8011a64:	460b      	mov	r3, r1
 8011a66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a6e:	78fa      	ldrb	r2, [r7, #3]
 8011a70:	4611      	mov	r1, r2
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7fb fe18 	bl	800d6a8 <USBD_LL_IsoOUTIncomplete>
}
 8011a78:	bf00      	nop
 8011a7a:	3708      	adds	r7, #8
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}

08011a80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
 8011a88:	460b      	mov	r3, r1
 8011a8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a92:	78fa      	ldrb	r2, [r7, #3]
 8011a94:	4611      	mov	r1, r2
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7fb fdd4 	bl	800d644 <USBD_LL_IsoINIncomplete>
}
 8011a9c:	bf00      	nop
 8011a9e:	3708      	adds	r7, #8
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f7fb fe2a 	bl	800d70c <USBD_LL_DevConnected>
}
 8011ab8:	bf00      	nop
 8011aba:	3708      	adds	r7, #8
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}

08011ac0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b082      	sub	sp, #8
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7fb fe27 	bl	800d722 <USBD_LL_DevDisconnected>
}
 8011ad4:	bf00      	nop
 8011ad6:	3708      	adds	r7, #8
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}

08011adc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b084      	sub	sp, #16
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	4608      	mov	r0, r1
 8011ae6:	4611      	mov	r1, r2
 8011ae8:	461a      	mov	r2, r3
 8011aea:	4603      	mov	r3, r0
 8011aec:	70fb      	strb	r3, [r7, #3]
 8011aee:	460b      	mov	r3, r1
 8011af0:	70bb      	strb	r3, [r7, #2]
 8011af2:	4613      	mov	r3, r2
 8011af4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011af6:	2300      	movs	r3, #0
 8011af8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011afa:	2300      	movs	r3, #0
 8011afc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011b04:	78bb      	ldrb	r3, [r7, #2]
 8011b06:	883a      	ldrh	r2, [r7, #0]
 8011b08:	78f9      	ldrb	r1, [r7, #3]
 8011b0a:	f7f3 ff55 	bl	80059b8 <HAL_PCD_EP_Open>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b12:	7bfb      	ldrb	r3, [r7, #15]
 8011b14:	4618      	mov	r0, r3
 8011b16:	f000 f8d3 	bl	8011cc0 <USBD_Get_USB_Status>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3710      	adds	r7, #16
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b084      	sub	sp, #16
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	460b      	mov	r3, r1
 8011b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b34:	2300      	movs	r3, #0
 8011b36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b38:	2300      	movs	r3, #0
 8011b3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011b42:	78fa      	ldrb	r2, [r7, #3]
 8011b44:	4611      	mov	r1, r2
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7f4 f815 	bl	8005b76 <HAL_PCD_EP_SetStall>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b50:	7bfb      	ldrb	r3, [r7, #15]
 8011b52:	4618      	mov	r0, r3
 8011b54:	f000 f8b4 	bl	8011cc0 <USBD_Get_USB_Status>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3710      	adds	r7, #16
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}

08011b66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b66:	b580      	push	{r7, lr}
 8011b68:	b084      	sub	sp, #16
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	6078      	str	r0, [r7, #4]
 8011b6e:	460b      	mov	r3, r1
 8011b70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b72:	2300      	movs	r3, #0
 8011b74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b76:	2300      	movs	r3, #0
 8011b78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011b80:	78fa      	ldrb	r2, [r7, #3]
 8011b82:	4611      	mov	r1, r2
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7f4 f859 	bl	8005c3c <HAL_PCD_EP_ClrStall>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b8e:	7bfb      	ldrb	r3, [r7, #15]
 8011b90:	4618      	mov	r0, r3
 8011b92:	f000 f895 	bl	8011cc0 <USBD_Get_USB_Status>
 8011b96:	4603      	mov	r3, r0
 8011b98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3710      	adds	r7, #16
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b085      	sub	sp, #20
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	460b      	mov	r3, r1
 8011bae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011bb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	da0b      	bge.n	8011bd8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011bc0:	78fb      	ldrb	r3, [r7, #3]
 8011bc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011bc6:	68f9      	ldr	r1, [r7, #12]
 8011bc8:	4613      	mov	r3, r2
 8011bca:	00db      	lsls	r3, r3, #3
 8011bcc:	4413      	add	r3, r2
 8011bce:	009b      	lsls	r3, r3, #2
 8011bd0:	440b      	add	r3, r1
 8011bd2:	3316      	adds	r3, #22
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	e00b      	b.n	8011bf0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011bd8:	78fb      	ldrb	r3, [r7, #3]
 8011bda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011bde:	68f9      	ldr	r1, [r7, #12]
 8011be0:	4613      	mov	r3, r2
 8011be2:	00db      	lsls	r3, r3, #3
 8011be4:	4413      	add	r3, r2
 8011be6:	009b      	lsls	r3, r3, #2
 8011be8:	440b      	add	r3, r1
 8011bea:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8011bee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3714      	adds	r7, #20
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfa:	4770      	bx	lr

08011bfc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b084      	sub	sp, #16
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	460b      	mov	r3, r1
 8011c06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c16:	78fa      	ldrb	r2, [r7, #3]
 8011c18:	4611      	mov	r1, r2
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f7f3 fea8 	bl	8005970 <HAL_PCD_SetAddress>
 8011c20:	4603      	mov	r3, r0
 8011c22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c24:	7bfb      	ldrb	r3, [r7, #15]
 8011c26:	4618      	mov	r0, r3
 8011c28:	f000 f84a 	bl	8011cc0 <USBD_Get_USB_Status>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c30:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3710      	adds	r7, #16
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}

08011c3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011c3a:	b580      	push	{r7, lr}
 8011c3c:	b086      	sub	sp, #24
 8011c3e:	af00      	add	r7, sp, #0
 8011c40:	60f8      	str	r0, [r7, #12]
 8011c42:	607a      	str	r2, [r7, #4]
 8011c44:	603b      	str	r3, [r7, #0]
 8011c46:	460b      	mov	r3, r1
 8011c48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c58:	7af9      	ldrb	r1, [r7, #11]
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	687a      	ldr	r2, [r7, #4]
 8011c5e:	f7f3 ff50 	bl	8005b02 <HAL_PCD_EP_Transmit>
 8011c62:	4603      	mov	r3, r0
 8011c64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c66:	7dfb      	ldrb	r3, [r7, #23]
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f000 f829 	bl	8011cc0 <USBD_Get_USB_Status>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011c72:	7dbb      	ldrb	r3, [r7, #22]
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3718      	adds	r7, #24
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b086      	sub	sp, #24
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	607a      	str	r2, [r7, #4]
 8011c86:	603b      	str	r3, [r7, #0]
 8011c88:	460b      	mov	r3, r1
 8011c8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c90:	2300      	movs	r3, #0
 8011c92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c9a:	7af9      	ldrb	r1, [r7, #11]
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	687a      	ldr	r2, [r7, #4]
 8011ca0:	f7f3 fef4 	bl	8005a8c <HAL_PCD_EP_Receive>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ca8:	7dfb      	ldrb	r3, [r7, #23]
 8011caa:	4618      	mov	r0, r3
 8011cac:	f000 f808 	bl	8011cc0 <USBD_Get_USB_Status>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011cb4:	7dbb      	ldrb	r3, [r7, #22]
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3718      	adds	r7, #24
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
	...

08011cc0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011cc0:	b480      	push	{r7}
 8011cc2:	b085      	sub	sp, #20
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011cce:	79fb      	ldrb	r3, [r7, #7]
 8011cd0:	2b03      	cmp	r3, #3
 8011cd2:	d817      	bhi.n	8011d04 <USBD_Get_USB_Status+0x44>
 8011cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8011cdc <USBD_Get_USB_Status+0x1c>)
 8011cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cda:	bf00      	nop
 8011cdc:	08011ced 	.word	0x08011ced
 8011ce0:	08011cf3 	.word	0x08011cf3
 8011ce4:	08011cf9 	.word	0x08011cf9
 8011ce8:	08011cff 	.word	0x08011cff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011cec:	2300      	movs	r3, #0
 8011cee:	73fb      	strb	r3, [r7, #15]
    break;
 8011cf0:	e00b      	b.n	8011d0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011cf2:	2303      	movs	r3, #3
 8011cf4:	73fb      	strb	r3, [r7, #15]
    break;
 8011cf6:	e008      	b.n	8011d0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8011cfc:	e005      	b.n	8011d0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011cfe:	2303      	movs	r3, #3
 8011d00:	73fb      	strb	r3, [r7, #15]
    break;
 8011d02:	e002      	b.n	8011d0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011d04:	2303      	movs	r3, #3
 8011d06:	73fb      	strb	r3, [r7, #15]
    break;
 8011d08:	bf00      	nop
  }
  return usb_status;
 8011d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3714      	adds	r7, #20
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr

08011d18 <UART_Print>:
 *      Author: timji
 */

#include "uart.h"

void UART_Print(const char* str){
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b082      	sub	sp, #8
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
	if(!tx_busy){
 8011d20:	4b0c      	ldr	r3, [pc, #48]	@ (8011d54 <UART_Print+0x3c>)
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	b2db      	uxtb	r3, r3
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d10c      	bne.n	8011d44 <UART_Print+0x2c>
		tx_busy = 1;
 8011d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8011d54 <UART_Print+0x3c>)
 8011d2c:	2201      	movs	r2, #1
 8011d2e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*)str, strlen(str));
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f7ee fa9d 	bl	8000270 <strlen>
 8011d36:	4603      	mov	r3, r0
 8011d38:	b29b      	uxth	r3, r3
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	6879      	ldr	r1, [r7, #4]
 8011d3e:	4806      	ldr	r0, [pc, #24]	@ (8011d58 <UART_Print+0x40>)
 8011d40:	f7f7 f9a6 	bl	8009090 <HAL_UART_Transmit_DMA>
	}
	osDelay(1000);
 8011d44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011d48:	f7fc fd20 	bl	800e78c <osDelay>
}
 8011d4c:	bf00      	nop
 8011d4e:	3708      	adds	r7, #8
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}
 8011d54:	2000308e 	.word	0x2000308e
 8011d58:	200004f0 	.word	0x200004f0

08011d5c <__cvt>:
 8011d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d60:	ec57 6b10 	vmov	r6, r7, d0
 8011d64:	2f00      	cmp	r7, #0
 8011d66:	460c      	mov	r4, r1
 8011d68:	4619      	mov	r1, r3
 8011d6a:	463b      	mov	r3, r7
 8011d6c:	bfbb      	ittet	lt
 8011d6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011d72:	461f      	movlt	r7, r3
 8011d74:	2300      	movge	r3, #0
 8011d76:	232d      	movlt	r3, #45	@ 0x2d
 8011d78:	700b      	strb	r3, [r1, #0]
 8011d7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011d7c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011d80:	4691      	mov	r9, r2
 8011d82:	f023 0820 	bic.w	r8, r3, #32
 8011d86:	bfbc      	itt	lt
 8011d88:	4632      	movlt	r2, r6
 8011d8a:	4616      	movlt	r6, r2
 8011d8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011d90:	d005      	beq.n	8011d9e <__cvt+0x42>
 8011d92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011d96:	d100      	bne.n	8011d9a <__cvt+0x3e>
 8011d98:	3401      	adds	r4, #1
 8011d9a:	2102      	movs	r1, #2
 8011d9c:	e000      	b.n	8011da0 <__cvt+0x44>
 8011d9e:	2103      	movs	r1, #3
 8011da0:	ab03      	add	r3, sp, #12
 8011da2:	9301      	str	r3, [sp, #4]
 8011da4:	ab02      	add	r3, sp, #8
 8011da6:	9300      	str	r3, [sp, #0]
 8011da8:	ec47 6b10 	vmov	d0, r6, r7
 8011dac:	4653      	mov	r3, sl
 8011dae:	4622      	mov	r2, r4
 8011db0:	f000 fe6a 	bl	8012a88 <_dtoa_r>
 8011db4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011db8:	4605      	mov	r5, r0
 8011dba:	d119      	bne.n	8011df0 <__cvt+0x94>
 8011dbc:	f019 0f01 	tst.w	r9, #1
 8011dc0:	d00e      	beq.n	8011de0 <__cvt+0x84>
 8011dc2:	eb00 0904 	add.w	r9, r0, r4
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	2300      	movs	r3, #0
 8011dca:	4630      	mov	r0, r6
 8011dcc:	4639      	mov	r1, r7
 8011dce:	f7ee fe7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8011dd2:	b108      	cbz	r0, 8011dd8 <__cvt+0x7c>
 8011dd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8011dd8:	2230      	movs	r2, #48	@ 0x30
 8011dda:	9b03      	ldr	r3, [sp, #12]
 8011ddc:	454b      	cmp	r3, r9
 8011dde:	d31e      	bcc.n	8011e1e <__cvt+0xc2>
 8011de0:	9b03      	ldr	r3, [sp, #12]
 8011de2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011de4:	1b5b      	subs	r3, r3, r5
 8011de6:	4628      	mov	r0, r5
 8011de8:	6013      	str	r3, [r2, #0]
 8011dea:	b004      	add	sp, #16
 8011dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011df0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011df4:	eb00 0904 	add.w	r9, r0, r4
 8011df8:	d1e5      	bne.n	8011dc6 <__cvt+0x6a>
 8011dfa:	7803      	ldrb	r3, [r0, #0]
 8011dfc:	2b30      	cmp	r3, #48	@ 0x30
 8011dfe:	d10a      	bne.n	8011e16 <__cvt+0xba>
 8011e00:	2200      	movs	r2, #0
 8011e02:	2300      	movs	r3, #0
 8011e04:	4630      	mov	r0, r6
 8011e06:	4639      	mov	r1, r7
 8011e08:	f7ee fe5e 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e0c:	b918      	cbnz	r0, 8011e16 <__cvt+0xba>
 8011e0e:	f1c4 0401 	rsb	r4, r4, #1
 8011e12:	f8ca 4000 	str.w	r4, [sl]
 8011e16:	f8da 3000 	ldr.w	r3, [sl]
 8011e1a:	4499      	add	r9, r3
 8011e1c:	e7d3      	b.n	8011dc6 <__cvt+0x6a>
 8011e1e:	1c59      	adds	r1, r3, #1
 8011e20:	9103      	str	r1, [sp, #12]
 8011e22:	701a      	strb	r2, [r3, #0]
 8011e24:	e7d9      	b.n	8011dda <__cvt+0x7e>

08011e26 <__exponent>:
 8011e26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e28:	2900      	cmp	r1, #0
 8011e2a:	bfba      	itte	lt
 8011e2c:	4249      	neglt	r1, r1
 8011e2e:	232d      	movlt	r3, #45	@ 0x2d
 8011e30:	232b      	movge	r3, #43	@ 0x2b
 8011e32:	2909      	cmp	r1, #9
 8011e34:	7002      	strb	r2, [r0, #0]
 8011e36:	7043      	strb	r3, [r0, #1]
 8011e38:	dd29      	ble.n	8011e8e <__exponent+0x68>
 8011e3a:	f10d 0307 	add.w	r3, sp, #7
 8011e3e:	461d      	mov	r5, r3
 8011e40:	270a      	movs	r7, #10
 8011e42:	461a      	mov	r2, r3
 8011e44:	fbb1 f6f7 	udiv	r6, r1, r7
 8011e48:	fb07 1416 	mls	r4, r7, r6, r1
 8011e4c:	3430      	adds	r4, #48	@ 0x30
 8011e4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011e52:	460c      	mov	r4, r1
 8011e54:	2c63      	cmp	r4, #99	@ 0x63
 8011e56:	f103 33ff 	add.w	r3, r3, #4294967295
 8011e5a:	4631      	mov	r1, r6
 8011e5c:	dcf1      	bgt.n	8011e42 <__exponent+0x1c>
 8011e5e:	3130      	adds	r1, #48	@ 0x30
 8011e60:	1e94      	subs	r4, r2, #2
 8011e62:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011e66:	1c41      	adds	r1, r0, #1
 8011e68:	4623      	mov	r3, r4
 8011e6a:	42ab      	cmp	r3, r5
 8011e6c:	d30a      	bcc.n	8011e84 <__exponent+0x5e>
 8011e6e:	f10d 0309 	add.w	r3, sp, #9
 8011e72:	1a9b      	subs	r3, r3, r2
 8011e74:	42ac      	cmp	r4, r5
 8011e76:	bf88      	it	hi
 8011e78:	2300      	movhi	r3, #0
 8011e7a:	3302      	adds	r3, #2
 8011e7c:	4403      	add	r3, r0
 8011e7e:	1a18      	subs	r0, r3, r0
 8011e80:	b003      	add	sp, #12
 8011e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e84:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011e88:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011e8c:	e7ed      	b.n	8011e6a <__exponent+0x44>
 8011e8e:	2330      	movs	r3, #48	@ 0x30
 8011e90:	3130      	adds	r1, #48	@ 0x30
 8011e92:	7083      	strb	r3, [r0, #2]
 8011e94:	70c1      	strb	r1, [r0, #3]
 8011e96:	1d03      	adds	r3, r0, #4
 8011e98:	e7f1      	b.n	8011e7e <__exponent+0x58>
	...

08011e9c <_printf_float>:
 8011e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ea0:	b08d      	sub	sp, #52	@ 0x34
 8011ea2:	460c      	mov	r4, r1
 8011ea4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011ea8:	4616      	mov	r6, r2
 8011eaa:	461f      	mov	r7, r3
 8011eac:	4605      	mov	r5, r0
 8011eae:	f000 fcdb 	bl	8012868 <_localeconv_r>
 8011eb2:	6803      	ldr	r3, [r0, #0]
 8011eb4:	9304      	str	r3, [sp, #16]
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f7ee f9da 	bl	8000270 <strlen>
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8011ec4:	9005      	str	r0, [sp, #20]
 8011ec6:	3307      	adds	r3, #7
 8011ec8:	f023 0307 	bic.w	r3, r3, #7
 8011ecc:	f103 0208 	add.w	r2, r3, #8
 8011ed0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011ed4:	f8d4 b000 	ldr.w	fp, [r4]
 8011ed8:	f8c8 2000 	str.w	r2, [r8]
 8011edc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011ee0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011ee4:	9307      	str	r3, [sp, #28]
 8011ee6:	f8cd 8018 	str.w	r8, [sp, #24]
 8011eea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011eee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ef2:	4b9c      	ldr	r3, [pc, #624]	@ (8012164 <_printf_float+0x2c8>)
 8011ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ef8:	f7ee fe18 	bl	8000b2c <__aeabi_dcmpun>
 8011efc:	bb70      	cbnz	r0, 8011f5c <_printf_float+0xc0>
 8011efe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f02:	4b98      	ldr	r3, [pc, #608]	@ (8012164 <_printf_float+0x2c8>)
 8011f04:	f04f 32ff 	mov.w	r2, #4294967295
 8011f08:	f7ee fdf2 	bl	8000af0 <__aeabi_dcmple>
 8011f0c:	bb30      	cbnz	r0, 8011f5c <_printf_float+0xc0>
 8011f0e:	2200      	movs	r2, #0
 8011f10:	2300      	movs	r3, #0
 8011f12:	4640      	mov	r0, r8
 8011f14:	4649      	mov	r1, r9
 8011f16:	f7ee fde1 	bl	8000adc <__aeabi_dcmplt>
 8011f1a:	b110      	cbz	r0, 8011f22 <_printf_float+0x86>
 8011f1c:	232d      	movs	r3, #45	@ 0x2d
 8011f1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f22:	4a91      	ldr	r2, [pc, #580]	@ (8012168 <_printf_float+0x2cc>)
 8011f24:	4b91      	ldr	r3, [pc, #580]	@ (801216c <_printf_float+0x2d0>)
 8011f26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011f2a:	bf94      	ite	ls
 8011f2c:	4690      	movls	r8, r2
 8011f2e:	4698      	movhi	r8, r3
 8011f30:	2303      	movs	r3, #3
 8011f32:	6123      	str	r3, [r4, #16]
 8011f34:	f02b 0304 	bic.w	r3, fp, #4
 8011f38:	6023      	str	r3, [r4, #0]
 8011f3a:	f04f 0900 	mov.w	r9, #0
 8011f3e:	9700      	str	r7, [sp, #0]
 8011f40:	4633      	mov	r3, r6
 8011f42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011f44:	4621      	mov	r1, r4
 8011f46:	4628      	mov	r0, r5
 8011f48:	f000 f9d2 	bl	80122f0 <_printf_common>
 8011f4c:	3001      	adds	r0, #1
 8011f4e:	f040 808d 	bne.w	801206c <_printf_float+0x1d0>
 8011f52:	f04f 30ff 	mov.w	r0, #4294967295
 8011f56:	b00d      	add	sp, #52	@ 0x34
 8011f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f5c:	4642      	mov	r2, r8
 8011f5e:	464b      	mov	r3, r9
 8011f60:	4640      	mov	r0, r8
 8011f62:	4649      	mov	r1, r9
 8011f64:	f7ee fde2 	bl	8000b2c <__aeabi_dcmpun>
 8011f68:	b140      	cbz	r0, 8011f7c <_printf_float+0xe0>
 8011f6a:	464b      	mov	r3, r9
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	bfbc      	itt	lt
 8011f70:	232d      	movlt	r3, #45	@ 0x2d
 8011f72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011f76:	4a7e      	ldr	r2, [pc, #504]	@ (8012170 <_printf_float+0x2d4>)
 8011f78:	4b7e      	ldr	r3, [pc, #504]	@ (8012174 <_printf_float+0x2d8>)
 8011f7a:	e7d4      	b.n	8011f26 <_printf_float+0x8a>
 8011f7c:	6863      	ldr	r3, [r4, #4]
 8011f7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011f82:	9206      	str	r2, [sp, #24]
 8011f84:	1c5a      	adds	r2, r3, #1
 8011f86:	d13b      	bne.n	8012000 <_printf_float+0x164>
 8011f88:	2306      	movs	r3, #6
 8011f8a:	6063      	str	r3, [r4, #4]
 8011f8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011f90:	2300      	movs	r3, #0
 8011f92:	6022      	str	r2, [r4, #0]
 8011f94:	9303      	str	r3, [sp, #12]
 8011f96:	ab0a      	add	r3, sp, #40	@ 0x28
 8011f98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011f9c:	ab09      	add	r3, sp, #36	@ 0x24
 8011f9e:	9300      	str	r3, [sp, #0]
 8011fa0:	6861      	ldr	r1, [r4, #4]
 8011fa2:	ec49 8b10 	vmov	d0, r8, r9
 8011fa6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011faa:	4628      	mov	r0, r5
 8011fac:	f7ff fed6 	bl	8011d5c <__cvt>
 8011fb0:	9b06      	ldr	r3, [sp, #24]
 8011fb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011fb4:	2b47      	cmp	r3, #71	@ 0x47
 8011fb6:	4680      	mov	r8, r0
 8011fb8:	d129      	bne.n	801200e <_printf_float+0x172>
 8011fba:	1cc8      	adds	r0, r1, #3
 8011fbc:	db02      	blt.n	8011fc4 <_printf_float+0x128>
 8011fbe:	6863      	ldr	r3, [r4, #4]
 8011fc0:	4299      	cmp	r1, r3
 8011fc2:	dd41      	ble.n	8012048 <_printf_float+0x1ac>
 8011fc4:	f1aa 0a02 	sub.w	sl, sl, #2
 8011fc8:	fa5f fa8a 	uxtb.w	sl, sl
 8011fcc:	3901      	subs	r1, #1
 8011fce:	4652      	mov	r2, sl
 8011fd0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011fd4:	9109      	str	r1, [sp, #36]	@ 0x24
 8011fd6:	f7ff ff26 	bl	8011e26 <__exponent>
 8011fda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011fdc:	1813      	adds	r3, r2, r0
 8011fde:	2a01      	cmp	r2, #1
 8011fe0:	4681      	mov	r9, r0
 8011fe2:	6123      	str	r3, [r4, #16]
 8011fe4:	dc02      	bgt.n	8011fec <_printf_float+0x150>
 8011fe6:	6822      	ldr	r2, [r4, #0]
 8011fe8:	07d2      	lsls	r2, r2, #31
 8011fea:	d501      	bpl.n	8011ff0 <_printf_float+0x154>
 8011fec:	3301      	adds	r3, #1
 8011fee:	6123      	str	r3, [r4, #16]
 8011ff0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d0a2      	beq.n	8011f3e <_printf_float+0xa2>
 8011ff8:	232d      	movs	r3, #45	@ 0x2d
 8011ffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011ffe:	e79e      	b.n	8011f3e <_printf_float+0xa2>
 8012000:	9a06      	ldr	r2, [sp, #24]
 8012002:	2a47      	cmp	r2, #71	@ 0x47
 8012004:	d1c2      	bne.n	8011f8c <_printf_float+0xf0>
 8012006:	2b00      	cmp	r3, #0
 8012008:	d1c0      	bne.n	8011f8c <_printf_float+0xf0>
 801200a:	2301      	movs	r3, #1
 801200c:	e7bd      	b.n	8011f8a <_printf_float+0xee>
 801200e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012012:	d9db      	bls.n	8011fcc <_printf_float+0x130>
 8012014:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012018:	d118      	bne.n	801204c <_printf_float+0x1b0>
 801201a:	2900      	cmp	r1, #0
 801201c:	6863      	ldr	r3, [r4, #4]
 801201e:	dd0b      	ble.n	8012038 <_printf_float+0x19c>
 8012020:	6121      	str	r1, [r4, #16]
 8012022:	b913      	cbnz	r3, 801202a <_printf_float+0x18e>
 8012024:	6822      	ldr	r2, [r4, #0]
 8012026:	07d0      	lsls	r0, r2, #31
 8012028:	d502      	bpl.n	8012030 <_printf_float+0x194>
 801202a:	3301      	adds	r3, #1
 801202c:	440b      	add	r3, r1
 801202e:	6123      	str	r3, [r4, #16]
 8012030:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012032:	f04f 0900 	mov.w	r9, #0
 8012036:	e7db      	b.n	8011ff0 <_printf_float+0x154>
 8012038:	b913      	cbnz	r3, 8012040 <_printf_float+0x1a4>
 801203a:	6822      	ldr	r2, [r4, #0]
 801203c:	07d2      	lsls	r2, r2, #31
 801203e:	d501      	bpl.n	8012044 <_printf_float+0x1a8>
 8012040:	3302      	adds	r3, #2
 8012042:	e7f4      	b.n	801202e <_printf_float+0x192>
 8012044:	2301      	movs	r3, #1
 8012046:	e7f2      	b.n	801202e <_printf_float+0x192>
 8012048:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801204c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801204e:	4299      	cmp	r1, r3
 8012050:	db05      	blt.n	801205e <_printf_float+0x1c2>
 8012052:	6823      	ldr	r3, [r4, #0]
 8012054:	6121      	str	r1, [r4, #16]
 8012056:	07d8      	lsls	r0, r3, #31
 8012058:	d5ea      	bpl.n	8012030 <_printf_float+0x194>
 801205a:	1c4b      	adds	r3, r1, #1
 801205c:	e7e7      	b.n	801202e <_printf_float+0x192>
 801205e:	2900      	cmp	r1, #0
 8012060:	bfd4      	ite	le
 8012062:	f1c1 0202 	rsble	r2, r1, #2
 8012066:	2201      	movgt	r2, #1
 8012068:	4413      	add	r3, r2
 801206a:	e7e0      	b.n	801202e <_printf_float+0x192>
 801206c:	6823      	ldr	r3, [r4, #0]
 801206e:	055a      	lsls	r2, r3, #21
 8012070:	d407      	bmi.n	8012082 <_printf_float+0x1e6>
 8012072:	6923      	ldr	r3, [r4, #16]
 8012074:	4642      	mov	r2, r8
 8012076:	4631      	mov	r1, r6
 8012078:	4628      	mov	r0, r5
 801207a:	47b8      	blx	r7
 801207c:	3001      	adds	r0, #1
 801207e:	d12b      	bne.n	80120d8 <_printf_float+0x23c>
 8012080:	e767      	b.n	8011f52 <_printf_float+0xb6>
 8012082:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012086:	f240 80dd 	bls.w	8012244 <_printf_float+0x3a8>
 801208a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801208e:	2200      	movs	r2, #0
 8012090:	2300      	movs	r3, #0
 8012092:	f7ee fd19 	bl	8000ac8 <__aeabi_dcmpeq>
 8012096:	2800      	cmp	r0, #0
 8012098:	d033      	beq.n	8012102 <_printf_float+0x266>
 801209a:	4a37      	ldr	r2, [pc, #220]	@ (8012178 <_printf_float+0x2dc>)
 801209c:	2301      	movs	r3, #1
 801209e:	4631      	mov	r1, r6
 80120a0:	4628      	mov	r0, r5
 80120a2:	47b8      	blx	r7
 80120a4:	3001      	adds	r0, #1
 80120a6:	f43f af54 	beq.w	8011f52 <_printf_float+0xb6>
 80120aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80120ae:	4543      	cmp	r3, r8
 80120b0:	db02      	blt.n	80120b8 <_printf_float+0x21c>
 80120b2:	6823      	ldr	r3, [r4, #0]
 80120b4:	07d8      	lsls	r0, r3, #31
 80120b6:	d50f      	bpl.n	80120d8 <_printf_float+0x23c>
 80120b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80120bc:	4631      	mov	r1, r6
 80120be:	4628      	mov	r0, r5
 80120c0:	47b8      	blx	r7
 80120c2:	3001      	adds	r0, #1
 80120c4:	f43f af45 	beq.w	8011f52 <_printf_float+0xb6>
 80120c8:	f04f 0900 	mov.w	r9, #0
 80120cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80120d0:	f104 0a1a 	add.w	sl, r4, #26
 80120d4:	45c8      	cmp	r8, r9
 80120d6:	dc09      	bgt.n	80120ec <_printf_float+0x250>
 80120d8:	6823      	ldr	r3, [r4, #0]
 80120da:	079b      	lsls	r3, r3, #30
 80120dc:	f100 8103 	bmi.w	80122e6 <_printf_float+0x44a>
 80120e0:	68e0      	ldr	r0, [r4, #12]
 80120e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80120e4:	4298      	cmp	r0, r3
 80120e6:	bfb8      	it	lt
 80120e8:	4618      	movlt	r0, r3
 80120ea:	e734      	b.n	8011f56 <_printf_float+0xba>
 80120ec:	2301      	movs	r3, #1
 80120ee:	4652      	mov	r2, sl
 80120f0:	4631      	mov	r1, r6
 80120f2:	4628      	mov	r0, r5
 80120f4:	47b8      	blx	r7
 80120f6:	3001      	adds	r0, #1
 80120f8:	f43f af2b 	beq.w	8011f52 <_printf_float+0xb6>
 80120fc:	f109 0901 	add.w	r9, r9, #1
 8012100:	e7e8      	b.n	80120d4 <_printf_float+0x238>
 8012102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012104:	2b00      	cmp	r3, #0
 8012106:	dc39      	bgt.n	801217c <_printf_float+0x2e0>
 8012108:	4a1b      	ldr	r2, [pc, #108]	@ (8012178 <_printf_float+0x2dc>)
 801210a:	2301      	movs	r3, #1
 801210c:	4631      	mov	r1, r6
 801210e:	4628      	mov	r0, r5
 8012110:	47b8      	blx	r7
 8012112:	3001      	adds	r0, #1
 8012114:	f43f af1d 	beq.w	8011f52 <_printf_float+0xb6>
 8012118:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801211c:	ea59 0303 	orrs.w	r3, r9, r3
 8012120:	d102      	bne.n	8012128 <_printf_float+0x28c>
 8012122:	6823      	ldr	r3, [r4, #0]
 8012124:	07d9      	lsls	r1, r3, #31
 8012126:	d5d7      	bpl.n	80120d8 <_printf_float+0x23c>
 8012128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801212c:	4631      	mov	r1, r6
 801212e:	4628      	mov	r0, r5
 8012130:	47b8      	blx	r7
 8012132:	3001      	adds	r0, #1
 8012134:	f43f af0d 	beq.w	8011f52 <_printf_float+0xb6>
 8012138:	f04f 0a00 	mov.w	sl, #0
 801213c:	f104 0b1a 	add.w	fp, r4, #26
 8012140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012142:	425b      	negs	r3, r3
 8012144:	4553      	cmp	r3, sl
 8012146:	dc01      	bgt.n	801214c <_printf_float+0x2b0>
 8012148:	464b      	mov	r3, r9
 801214a:	e793      	b.n	8012074 <_printf_float+0x1d8>
 801214c:	2301      	movs	r3, #1
 801214e:	465a      	mov	r2, fp
 8012150:	4631      	mov	r1, r6
 8012152:	4628      	mov	r0, r5
 8012154:	47b8      	blx	r7
 8012156:	3001      	adds	r0, #1
 8012158:	f43f aefb 	beq.w	8011f52 <_printf_float+0xb6>
 801215c:	f10a 0a01 	add.w	sl, sl, #1
 8012160:	e7ee      	b.n	8012140 <_printf_float+0x2a4>
 8012162:	bf00      	nop
 8012164:	7fefffff 	.word	0x7fefffff
 8012168:	08016230 	.word	0x08016230
 801216c:	08016234 	.word	0x08016234
 8012170:	08016238 	.word	0x08016238
 8012174:	0801623c 	.word	0x0801623c
 8012178:	08016240 	.word	0x08016240
 801217c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801217e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012182:	4553      	cmp	r3, sl
 8012184:	bfa8      	it	ge
 8012186:	4653      	movge	r3, sl
 8012188:	2b00      	cmp	r3, #0
 801218a:	4699      	mov	r9, r3
 801218c:	dc36      	bgt.n	80121fc <_printf_float+0x360>
 801218e:	f04f 0b00 	mov.w	fp, #0
 8012192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012196:	f104 021a 	add.w	r2, r4, #26
 801219a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801219c:	9306      	str	r3, [sp, #24]
 801219e:	eba3 0309 	sub.w	r3, r3, r9
 80121a2:	455b      	cmp	r3, fp
 80121a4:	dc31      	bgt.n	801220a <_printf_float+0x36e>
 80121a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121a8:	459a      	cmp	sl, r3
 80121aa:	dc3a      	bgt.n	8012222 <_printf_float+0x386>
 80121ac:	6823      	ldr	r3, [r4, #0]
 80121ae:	07da      	lsls	r2, r3, #31
 80121b0:	d437      	bmi.n	8012222 <_printf_float+0x386>
 80121b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121b4:	ebaa 0903 	sub.w	r9, sl, r3
 80121b8:	9b06      	ldr	r3, [sp, #24]
 80121ba:	ebaa 0303 	sub.w	r3, sl, r3
 80121be:	4599      	cmp	r9, r3
 80121c0:	bfa8      	it	ge
 80121c2:	4699      	movge	r9, r3
 80121c4:	f1b9 0f00 	cmp.w	r9, #0
 80121c8:	dc33      	bgt.n	8012232 <_printf_float+0x396>
 80121ca:	f04f 0800 	mov.w	r8, #0
 80121ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80121d2:	f104 0b1a 	add.w	fp, r4, #26
 80121d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121d8:	ebaa 0303 	sub.w	r3, sl, r3
 80121dc:	eba3 0309 	sub.w	r3, r3, r9
 80121e0:	4543      	cmp	r3, r8
 80121e2:	f77f af79 	ble.w	80120d8 <_printf_float+0x23c>
 80121e6:	2301      	movs	r3, #1
 80121e8:	465a      	mov	r2, fp
 80121ea:	4631      	mov	r1, r6
 80121ec:	4628      	mov	r0, r5
 80121ee:	47b8      	blx	r7
 80121f0:	3001      	adds	r0, #1
 80121f2:	f43f aeae 	beq.w	8011f52 <_printf_float+0xb6>
 80121f6:	f108 0801 	add.w	r8, r8, #1
 80121fa:	e7ec      	b.n	80121d6 <_printf_float+0x33a>
 80121fc:	4642      	mov	r2, r8
 80121fe:	4631      	mov	r1, r6
 8012200:	4628      	mov	r0, r5
 8012202:	47b8      	blx	r7
 8012204:	3001      	adds	r0, #1
 8012206:	d1c2      	bne.n	801218e <_printf_float+0x2f2>
 8012208:	e6a3      	b.n	8011f52 <_printf_float+0xb6>
 801220a:	2301      	movs	r3, #1
 801220c:	4631      	mov	r1, r6
 801220e:	4628      	mov	r0, r5
 8012210:	9206      	str	r2, [sp, #24]
 8012212:	47b8      	blx	r7
 8012214:	3001      	adds	r0, #1
 8012216:	f43f ae9c 	beq.w	8011f52 <_printf_float+0xb6>
 801221a:	9a06      	ldr	r2, [sp, #24]
 801221c:	f10b 0b01 	add.w	fp, fp, #1
 8012220:	e7bb      	b.n	801219a <_printf_float+0x2fe>
 8012222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012226:	4631      	mov	r1, r6
 8012228:	4628      	mov	r0, r5
 801222a:	47b8      	blx	r7
 801222c:	3001      	adds	r0, #1
 801222e:	d1c0      	bne.n	80121b2 <_printf_float+0x316>
 8012230:	e68f      	b.n	8011f52 <_printf_float+0xb6>
 8012232:	9a06      	ldr	r2, [sp, #24]
 8012234:	464b      	mov	r3, r9
 8012236:	4442      	add	r2, r8
 8012238:	4631      	mov	r1, r6
 801223a:	4628      	mov	r0, r5
 801223c:	47b8      	blx	r7
 801223e:	3001      	adds	r0, #1
 8012240:	d1c3      	bne.n	80121ca <_printf_float+0x32e>
 8012242:	e686      	b.n	8011f52 <_printf_float+0xb6>
 8012244:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012248:	f1ba 0f01 	cmp.w	sl, #1
 801224c:	dc01      	bgt.n	8012252 <_printf_float+0x3b6>
 801224e:	07db      	lsls	r3, r3, #31
 8012250:	d536      	bpl.n	80122c0 <_printf_float+0x424>
 8012252:	2301      	movs	r3, #1
 8012254:	4642      	mov	r2, r8
 8012256:	4631      	mov	r1, r6
 8012258:	4628      	mov	r0, r5
 801225a:	47b8      	blx	r7
 801225c:	3001      	adds	r0, #1
 801225e:	f43f ae78 	beq.w	8011f52 <_printf_float+0xb6>
 8012262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012266:	4631      	mov	r1, r6
 8012268:	4628      	mov	r0, r5
 801226a:	47b8      	blx	r7
 801226c:	3001      	adds	r0, #1
 801226e:	f43f ae70 	beq.w	8011f52 <_printf_float+0xb6>
 8012272:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012276:	2200      	movs	r2, #0
 8012278:	2300      	movs	r3, #0
 801227a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801227e:	f7ee fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 8012282:	b9c0      	cbnz	r0, 80122b6 <_printf_float+0x41a>
 8012284:	4653      	mov	r3, sl
 8012286:	f108 0201 	add.w	r2, r8, #1
 801228a:	4631      	mov	r1, r6
 801228c:	4628      	mov	r0, r5
 801228e:	47b8      	blx	r7
 8012290:	3001      	adds	r0, #1
 8012292:	d10c      	bne.n	80122ae <_printf_float+0x412>
 8012294:	e65d      	b.n	8011f52 <_printf_float+0xb6>
 8012296:	2301      	movs	r3, #1
 8012298:	465a      	mov	r2, fp
 801229a:	4631      	mov	r1, r6
 801229c:	4628      	mov	r0, r5
 801229e:	47b8      	blx	r7
 80122a0:	3001      	adds	r0, #1
 80122a2:	f43f ae56 	beq.w	8011f52 <_printf_float+0xb6>
 80122a6:	f108 0801 	add.w	r8, r8, #1
 80122aa:	45d0      	cmp	r8, sl
 80122ac:	dbf3      	blt.n	8012296 <_printf_float+0x3fa>
 80122ae:	464b      	mov	r3, r9
 80122b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80122b4:	e6df      	b.n	8012076 <_printf_float+0x1da>
 80122b6:	f04f 0800 	mov.w	r8, #0
 80122ba:	f104 0b1a 	add.w	fp, r4, #26
 80122be:	e7f4      	b.n	80122aa <_printf_float+0x40e>
 80122c0:	2301      	movs	r3, #1
 80122c2:	4642      	mov	r2, r8
 80122c4:	e7e1      	b.n	801228a <_printf_float+0x3ee>
 80122c6:	2301      	movs	r3, #1
 80122c8:	464a      	mov	r2, r9
 80122ca:	4631      	mov	r1, r6
 80122cc:	4628      	mov	r0, r5
 80122ce:	47b8      	blx	r7
 80122d0:	3001      	adds	r0, #1
 80122d2:	f43f ae3e 	beq.w	8011f52 <_printf_float+0xb6>
 80122d6:	f108 0801 	add.w	r8, r8, #1
 80122da:	68e3      	ldr	r3, [r4, #12]
 80122dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80122de:	1a5b      	subs	r3, r3, r1
 80122e0:	4543      	cmp	r3, r8
 80122e2:	dcf0      	bgt.n	80122c6 <_printf_float+0x42a>
 80122e4:	e6fc      	b.n	80120e0 <_printf_float+0x244>
 80122e6:	f04f 0800 	mov.w	r8, #0
 80122ea:	f104 0919 	add.w	r9, r4, #25
 80122ee:	e7f4      	b.n	80122da <_printf_float+0x43e>

080122f0 <_printf_common>:
 80122f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122f4:	4616      	mov	r6, r2
 80122f6:	4698      	mov	r8, r3
 80122f8:	688a      	ldr	r2, [r1, #8]
 80122fa:	690b      	ldr	r3, [r1, #16]
 80122fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012300:	4293      	cmp	r3, r2
 8012302:	bfb8      	it	lt
 8012304:	4613      	movlt	r3, r2
 8012306:	6033      	str	r3, [r6, #0]
 8012308:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801230c:	4607      	mov	r7, r0
 801230e:	460c      	mov	r4, r1
 8012310:	b10a      	cbz	r2, 8012316 <_printf_common+0x26>
 8012312:	3301      	adds	r3, #1
 8012314:	6033      	str	r3, [r6, #0]
 8012316:	6823      	ldr	r3, [r4, #0]
 8012318:	0699      	lsls	r1, r3, #26
 801231a:	bf42      	ittt	mi
 801231c:	6833      	ldrmi	r3, [r6, #0]
 801231e:	3302      	addmi	r3, #2
 8012320:	6033      	strmi	r3, [r6, #0]
 8012322:	6825      	ldr	r5, [r4, #0]
 8012324:	f015 0506 	ands.w	r5, r5, #6
 8012328:	d106      	bne.n	8012338 <_printf_common+0x48>
 801232a:	f104 0a19 	add.w	sl, r4, #25
 801232e:	68e3      	ldr	r3, [r4, #12]
 8012330:	6832      	ldr	r2, [r6, #0]
 8012332:	1a9b      	subs	r3, r3, r2
 8012334:	42ab      	cmp	r3, r5
 8012336:	dc26      	bgt.n	8012386 <_printf_common+0x96>
 8012338:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801233c:	6822      	ldr	r2, [r4, #0]
 801233e:	3b00      	subs	r3, #0
 8012340:	bf18      	it	ne
 8012342:	2301      	movne	r3, #1
 8012344:	0692      	lsls	r2, r2, #26
 8012346:	d42b      	bmi.n	80123a0 <_printf_common+0xb0>
 8012348:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801234c:	4641      	mov	r1, r8
 801234e:	4638      	mov	r0, r7
 8012350:	47c8      	blx	r9
 8012352:	3001      	adds	r0, #1
 8012354:	d01e      	beq.n	8012394 <_printf_common+0xa4>
 8012356:	6823      	ldr	r3, [r4, #0]
 8012358:	6922      	ldr	r2, [r4, #16]
 801235a:	f003 0306 	and.w	r3, r3, #6
 801235e:	2b04      	cmp	r3, #4
 8012360:	bf02      	ittt	eq
 8012362:	68e5      	ldreq	r5, [r4, #12]
 8012364:	6833      	ldreq	r3, [r6, #0]
 8012366:	1aed      	subeq	r5, r5, r3
 8012368:	68a3      	ldr	r3, [r4, #8]
 801236a:	bf0c      	ite	eq
 801236c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012370:	2500      	movne	r5, #0
 8012372:	4293      	cmp	r3, r2
 8012374:	bfc4      	itt	gt
 8012376:	1a9b      	subgt	r3, r3, r2
 8012378:	18ed      	addgt	r5, r5, r3
 801237a:	2600      	movs	r6, #0
 801237c:	341a      	adds	r4, #26
 801237e:	42b5      	cmp	r5, r6
 8012380:	d11a      	bne.n	80123b8 <_printf_common+0xc8>
 8012382:	2000      	movs	r0, #0
 8012384:	e008      	b.n	8012398 <_printf_common+0xa8>
 8012386:	2301      	movs	r3, #1
 8012388:	4652      	mov	r2, sl
 801238a:	4641      	mov	r1, r8
 801238c:	4638      	mov	r0, r7
 801238e:	47c8      	blx	r9
 8012390:	3001      	adds	r0, #1
 8012392:	d103      	bne.n	801239c <_printf_common+0xac>
 8012394:	f04f 30ff 	mov.w	r0, #4294967295
 8012398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801239c:	3501      	adds	r5, #1
 801239e:	e7c6      	b.n	801232e <_printf_common+0x3e>
 80123a0:	18e1      	adds	r1, r4, r3
 80123a2:	1c5a      	adds	r2, r3, #1
 80123a4:	2030      	movs	r0, #48	@ 0x30
 80123a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80123aa:	4422      	add	r2, r4
 80123ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80123b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80123b4:	3302      	adds	r3, #2
 80123b6:	e7c7      	b.n	8012348 <_printf_common+0x58>
 80123b8:	2301      	movs	r3, #1
 80123ba:	4622      	mov	r2, r4
 80123bc:	4641      	mov	r1, r8
 80123be:	4638      	mov	r0, r7
 80123c0:	47c8      	blx	r9
 80123c2:	3001      	adds	r0, #1
 80123c4:	d0e6      	beq.n	8012394 <_printf_common+0xa4>
 80123c6:	3601      	adds	r6, #1
 80123c8:	e7d9      	b.n	801237e <_printf_common+0x8e>
	...

080123cc <_printf_i>:
 80123cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80123d0:	7e0f      	ldrb	r7, [r1, #24]
 80123d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80123d4:	2f78      	cmp	r7, #120	@ 0x78
 80123d6:	4691      	mov	r9, r2
 80123d8:	4680      	mov	r8, r0
 80123da:	460c      	mov	r4, r1
 80123dc:	469a      	mov	sl, r3
 80123de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80123e2:	d807      	bhi.n	80123f4 <_printf_i+0x28>
 80123e4:	2f62      	cmp	r7, #98	@ 0x62
 80123e6:	d80a      	bhi.n	80123fe <_printf_i+0x32>
 80123e8:	2f00      	cmp	r7, #0
 80123ea:	f000 80d2 	beq.w	8012592 <_printf_i+0x1c6>
 80123ee:	2f58      	cmp	r7, #88	@ 0x58
 80123f0:	f000 80b9 	beq.w	8012566 <_printf_i+0x19a>
 80123f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80123f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80123fc:	e03a      	b.n	8012474 <_printf_i+0xa8>
 80123fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012402:	2b15      	cmp	r3, #21
 8012404:	d8f6      	bhi.n	80123f4 <_printf_i+0x28>
 8012406:	a101      	add	r1, pc, #4	@ (adr r1, 801240c <_printf_i+0x40>)
 8012408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801240c:	08012465 	.word	0x08012465
 8012410:	08012479 	.word	0x08012479
 8012414:	080123f5 	.word	0x080123f5
 8012418:	080123f5 	.word	0x080123f5
 801241c:	080123f5 	.word	0x080123f5
 8012420:	080123f5 	.word	0x080123f5
 8012424:	08012479 	.word	0x08012479
 8012428:	080123f5 	.word	0x080123f5
 801242c:	080123f5 	.word	0x080123f5
 8012430:	080123f5 	.word	0x080123f5
 8012434:	080123f5 	.word	0x080123f5
 8012438:	08012579 	.word	0x08012579
 801243c:	080124a3 	.word	0x080124a3
 8012440:	08012533 	.word	0x08012533
 8012444:	080123f5 	.word	0x080123f5
 8012448:	080123f5 	.word	0x080123f5
 801244c:	0801259b 	.word	0x0801259b
 8012450:	080123f5 	.word	0x080123f5
 8012454:	080124a3 	.word	0x080124a3
 8012458:	080123f5 	.word	0x080123f5
 801245c:	080123f5 	.word	0x080123f5
 8012460:	0801253b 	.word	0x0801253b
 8012464:	6833      	ldr	r3, [r6, #0]
 8012466:	1d1a      	adds	r2, r3, #4
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	6032      	str	r2, [r6, #0]
 801246c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012470:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012474:	2301      	movs	r3, #1
 8012476:	e09d      	b.n	80125b4 <_printf_i+0x1e8>
 8012478:	6833      	ldr	r3, [r6, #0]
 801247a:	6820      	ldr	r0, [r4, #0]
 801247c:	1d19      	adds	r1, r3, #4
 801247e:	6031      	str	r1, [r6, #0]
 8012480:	0606      	lsls	r6, r0, #24
 8012482:	d501      	bpl.n	8012488 <_printf_i+0xbc>
 8012484:	681d      	ldr	r5, [r3, #0]
 8012486:	e003      	b.n	8012490 <_printf_i+0xc4>
 8012488:	0645      	lsls	r5, r0, #25
 801248a:	d5fb      	bpl.n	8012484 <_printf_i+0xb8>
 801248c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012490:	2d00      	cmp	r5, #0
 8012492:	da03      	bge.n	801249c <_printf_i+0xd0>
 8012494:	232d      	movs	r3, #45	@ 0x2d
 8012496:	426d      	negs	r5, r5
 8012498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801249c:	4859      	ldr	r0, [pc, #356]	@ (8012604 <_printf_i+0x238>)
 801249e:	230a      	movs	r3, #10
 80124a0:	e011      	b.n	80124c6 <_printf_i+0xfa>
 80124a2:	6821      	ldr	r1, [r4, #0]
 80124a4:	6833      	ldr	r3, [r6, #0]
 80124a6:	0608      	lsls	r0, r1, #24
 80124a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80124ac:	d402      	bmi.n	80124b4 <_printf_i+0xe8>
 80124ae:	0649      	lsls	r1, r1, #25
 80124b0:	bf48      	it	mi
 80124b2:	b2ad      	uxthmi	r5, r5
 80124b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80124b6:	4853      	ldr	r0, [pc, #332]	@ (8012604 <_printf_i+0x238>)
 80124b8:	6033      	str	r3, [r6, #0]
 80124ba:	bf14      	ite	ne
 80124bc:	230a      	movne	r3, #10
 80124be:	2308      	moveq	r3, #8
 80124c0:	2100      	movs	r1, #0
 80124c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80124c6:	6866      	ldr	r6, [r4, #4]
 80124c8:	60a6      	str	r6, [r4, #8]
 80124ca:	2e00      	cmp	r6, #0
 80124cc:	bfa2      	ittt	ge
 80124ce:	6821      	ldrge	r1, [r4, #0]
 80124d0:	f021 0104 	bicge.w	r1, r1, #4
 80124d4:	6021      	strge	r1, [r4, #0]
 80124d6:	b90d      	cbnz	r5, 80124dc <_printf_i+0x110>
 80124d8:	2e00      	cmp	r6, #0
 80124da:	d04b      	beq.n	8012574 <_printf_i+0x1a8>
 80124dc:	4616      	mov	r6, r2
 80124de:	fbb5 f1f3 	udiv	r1, r5, r3
 80124e2:	fb03 5711 	mls	r7, r3, r1, r5
 80124e6:	5dc7      	ldrb	r7, [r0, r7]
 80124e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80124ec:	462f      	mov	r7, r5
 80124ee:	42bb      	cmp	r3, r7
 80124f0:	460d      	mov	r5, r1
 80124f2:	d9f4      	bls.n	80124de <_printf_i+0x112>
 80124f4:	2b08      	cmp	r3, #8
 80124f6:	d10b      	bne.n	8012510 <_printf_i+0x144>
 80124f8:	6823      	ldr	r3, [r4, #0]
 80124fa:	07df      	lsls	r7, r3, #31
 80124fc:	d508      	bpl.n	8012510 <_printf_i+0x144>
 80124fe:	6923      	ldr	r3, [r4, #16]
 8012500:	6861      	ldr	r1, [r4, #4]
 8012502:	4299      	cmp	r1, r3
 8012504:	bfde      	ittt	le
 8012506:	2330      	movle	r3, #48	@ 0x30
 8012508:	f806 3c01 	strble.w	r3, [r6, #-1]
 801250c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012510:	1b92      	subs	r2, r2, r6
 8012512:	6122      	str	r2, [r4, #16]
 8012514:	f8cd a000 	str.w	sl, [sp]
 8012518:	464b      	mov	r3, r9
 801251a:	aa03      	add	r2, sp, #12
 801251c:	4621      	mov	r1, r4
 801251e:	4640      	mov	r0, r8
 8012520:	f7ff fee6 	bl	80122f0 <_printf_common>
 8012524:	3001      	adds	r0, #1
 8012526:	d14a      	bne.n	80125be <_printf_i+0x1f2>
 8012528:	f04f 30ff 	mov.w	r0, #4294967295
 801252c:	b004      	add	sp, #16
 801252e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012532:	6823      	ldr	r3, [r4, #0]
 8012534:	f043 0320 	orr.w	r3, r3, #32
 8012538:	6023      	str	r3, [r4, #0]
 801253a:	4833      	ldr	r0, [pc, #204]	@ (8012608 <_printf_i+0x23c>)
 801253c:	2778      	movs	r7, #120	@ 0x78
 801253e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012542:	6823      	ldr	r3, [r4, #0]
 8012544:	6831      	ldr	r1, [r6, #0]
 8012546:	061f      	lsls	r7, r3, #24
 8012548:	f851 5b04 	ldr.w	r5, [r1], #4
 801254c:	d402      	bmi.n	8012554 <_printf_i+0x188>
 801254e:	065f      	lsls	r7, r3, #25
 8012550:	bf48      	it	mi
 8012552:	b2ad      	uxthmi	r5, r5
 8012554:	6031      	str	r1, [r6, #0]
 8012556:	07d9      	lsls	r1, r3, #31
 8012558:	bf44      	itt	mi
 801255a:	f043 0320 	orrmi.w	r3, r3, #32
 801255e:	6023      	strmi	r3, [r4, #0]
 8012560:	b11d      	cbz	r5, 801256a <_printf_i+0x19e>
 8012562:	2310      	movs	r3, #16
 8012564:	e7ac      	b.n	80124c0 <_printf_i+0xf4>
 8012566:	4827      	ldr	r0, [pc, #156]	@ (8012604 <_printf_i+0x238>)
 8012568:	e7e9      	b.n	801253e <_printf_i+0x172>
 801256a:	6823      	ldr	r3, [r4, #0]
 801256c:	f023 0320 	bic.w	r3, r3, #32
 8012570:	6023      	str	r3, [r4, #0]
 8012572:	e7f6      	b.n	8012562 <_printf_i+0x196>
 8012574:	4616      	mov	r6, r2
 8012576:	e7bd      	b.n	80124f4 <_printf_i+0x128>
 8012578:	6833      	ldr	r3, [r6, #0]
 801257a:	6825      	ldr	r5, [r4, #0]
 801257c:	6961      	ldr	r1, [r4, #20]
 801257e:	1d18      	adds	r0, r3, #4
 8012580:	6030      	str	r0, [r6, #0]
 8012582:	062e      	lsls	r6, r5, #24
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	d501      	bpl.n	801258c <_printf_i+0x1c0>
 8012588:	6019      	str	r1, [r3, #0]
 801258a:	e002      	b.n	8012592 <_printf_i+0x1c6>
 801258c:	0668      	lsls	r0, r5, #25
 801258e:	d5fb      	bpl.n	8012588 <_printf_i+0x1bc>
 8012590:	8019      	strh	r1, [r3, #0]
 8012592:	2300      	movs	r3, #0
 8012594:	6123      	str	r3, [r4, #16]
 8012596:	4616      	mov	r6, r2
 8012598:	e7bc      	b.n	8012514 <_printf_i+0x148>
 801259a:	6833      	ldr	r3, [r6, #0]
 801259c:	1d1a      	adds	r2, r3, #4
 801259e:	6032      	str	r2, [r6, #0]
 80125a0:	681e      	ldr	r6, [r3, #0]
 80125a2:	6862      	ldr	r2, [r4, #4]
 80125a4:	2100      	movs	r1, #0
 80125a6:	4630      	mov	r0, r6
 80125a8:	f7ed fe12 	bl	80001d0 <memchr>
 80125ac:	b108      	cbz	r0, 80125b2 <_printf_i+0x1e6>
 80125ae:	1b80      	subs	r0, r0, r6
 80125b0:	6060      	str	r0, [r4, #4]
 80125b2:	6863      	ldr	r3, [r4, #4]
 80125b4:	6123      	str	r3, [r4, #16]
 80125b6:	2300      	movs	r3, #0
 80125b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80125bc:	e7aa      	b.n	8012514 <_printf_i+0x148>
 80125be:	6923      	ldr	r3, [r4, #16]
 80125c0:	4632      	mov	r2, r6
 80125c2:	4649      	mov	r1, r9
 80125c4:	4640      	mov	r0, r8
 80125c6:	47d0      	blx	sl
 80125c8:	3001      	adds	r0, #1
 80125ca:	d0ad      	beq.n	8012528 <_printf_i+0x15c>
 80125cc:	6823      	ldr	r3, [r4, #0]
 80125ce:	079b      	lsls	r3, r3, #30
 80125d0:	d413      	bmi.n	80125fa <_printf_i+0x22e>
 80125d2:	68e0      	ldr	r0, [r4, #12]
 80125d4:	9b03      	ldr	r3, [sp, #12]
 80125d6:	4298      	cmp	r0, r3
 80125d8:	bfb8      	it	lt
 80125da:	4618      	movlt	r0, r3
 80125dc:	e7a6      	b.n	801252c <_printf_i+0x160>
 80125de:	2301      	movs	r3, #1
 80125e0:	4632      	mov	r2, r6
 80125e2:	4649      	mov	r1, r9
 80125e4:	4640      	mov	r0, r8
 80125e6:	47d0      	blx	sl
 80125e8:	3001      	adds	r0, #1
 80125ea:	d09d      	beq.n	8012528 <_printf_i+0x15c>
 80125ec:	3501      	adds	r5, #1
 80125ee:	68e3      	ldr	r3, [r4, #12]
 80125f0:	9903      	ldr	r1, [sp, #12]
 80125f2:	1a5b      	subs	r3, r3, r1
 80125f4:	42ab      	cmp	r3, r5
 80125f6:	dcf2      	bgt.n	80125de <_printf_i+0x212>
 80125f8:	e7eb      	b.n	80125d2 <_printf_i+0x206>
 80125fa:	2500      	movs	r5, #0
 80125fc:	f104 0619 	add.w	r6, r4, #25
 8012600:	e7f5      	b.n	80125ee <_printf_i+0x222>
 8012602:	bf00      	nop
 8012604:	08016242 	.word	0x08016242
 8012608:	08016253 	.word	0x08016253

0801260c <std>:
 801260c:	2300      	movs	r3, #0
 801260e:	b510      	push	{r4, lr}
 8012610:	4604      	mov	r4, r0
 8012612:	e9c0 3300 	strd	r3, r3, [r0]
 8012616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801261a:	6083      	str	r3, [r0, #8]
 801261c:	8181      	strh	r1, [r0, #12]
 801261e:	6643      	str	r3, [r0, #100]	@ 0x64
 8012620:	81c2      	strh	r2, [r0, #14]
 8012622:	6183      	str	r3, [r0, #24]
 8012624:	4619      	mov	r1, r3
 8012626:	2208      	movs	r2, #8
 8012628:	305c      	adds	r0, #92	@ 0x5c
 801262a:	f000 f914 	bl	8012856 <memset>
 801262e:	4b0d      	ldr	r3, [pc, #52]	@ (8012664 <std+0x58>)
 8012630:	6263      	str	r3, [r4, #36]	@ 0x24
 8012632:	4b0d      	ldr	r3, [pc, #52]	@ (8012668 <std+0x5c>)
 8012634:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012636:	4b0d      	ldr	r3, [pc, #52]	@ (801266c <std+0x60>)
 8012638:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801263a:	4b0d      	ldr	r3, [pc, #52]	@ (8012670 <std+0x64>)
 801263c:	6323      	str	r3, [r4, #48]	@ 0x30
 801263e:	4b0d      	ldr	r3, [pc, #52]	@ (8012674 <std+0x68>)
 8012640:	6224      	str	r4, [r4, #32]
 8012642:	429c      	cmp	r4, r3
 8012644:	d006      	beq.n	8012654 <std+0x48>
 8012646:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801264a:	4294      	cmp	r4, r2
 801264c:	d002      	beq.n	8012654 <std+0x48>
 801264e:	33d0      	adds	r3, #208	@ 0xd0
 8012650:	429c      	cmp	r4, r3
 8012652:	d105      	bne.n	8012660 <std+0x54>
 8012654:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801265c:	f000 b978 	b.w	8012950 <__retarget_lock_init_recursive>
 8012660:	bd10      	pop	{r4, pc}
 8012662:	bf00      	nop
 8012664:	080127d1 	.word	0x080127d1
 8012668:	080127f3 	.word	0x080127f3
 801266c:	0801282b 	.word	0x0801282b
 8012670:	0801284f 	.word	0x0801284f
 8012674:	20008df4 	.word	0x20008df4

08012678 <stdio_exit_handler>:
 8012678:	4a02      	ldr	r2, [pc, #8]	@ (8012684 <stdio_exit_handler+0xc>)
 801267a:	4903      	ldr	r1, [pc, #12]	@ (8012688 <stdio_exit_handler+0x10>)
 801267c:	4803      	ldr	r0, [pc, #12]	@ (801268c <stdio_exit_handler+0x14>)
 801267e:	f000 b869 	b.w	8012754 <_fwalk_sglue>
 8012682:	bf00      	nop
 8012684:	20000038 	.word	0x20000038
 8012688:	080142cd 	.word	0x080142cd
 801268c:	20000048 	.word	0x20000048

08012690 <cleanup_stdio>:
 8012690:	6841      	ldr	r1, [r0, #4]
 8012692:	4b0c      	ldr	r3, [pc, #48]	@ (80126c4 <cleanup_stdio+0x34>)
 8012694:	4299      	cmp	r1, r3
 8012696:	b510      	push	{r4, lr}
 8012698:	4604      	mov	r4, r0
 801269a:	d001      	beq.n	80126a0 <cleanup_stdio+0x10>
 801269c:	f001 fe16 	bl	80142cc <_fflush_r>
 80126a0:	68a1      	ldr	r1, [r4, #8]
 80126a2:	4b09      	ldr	r3, [pc, #36]	@ (80126c8 <cleanup_stdio+0x38>)
 80126a4:	4299      	cmp	r1, r3
 80126a6:	d002      	beq.n	80126ae <cleanup_stdio+0x1e>
 80126a8:	4620      	mov	r0, r4
 80126aa:	f001 fe0f 	bl	80142cc <_fflush_r>
 80126ae:	68e1      	ldr	r1, [r4, #12]
 80126b0:	4b06      	ldr	r3, [pc, #24]	@ (80126cc <cleanup_stdio+0x3c>)
 80126b2:	4299      	cmp	r1, r3
 80126b4:	d004      	beq.n	80126c0 <cleanup_stdio+0x30>
 80126b6:	4620      	mov	r0, r4
 80126b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126bc:	f001 be06 	b.w	80142cc <_fflush_r>
 80126c0:	bd10      	pop	{r4, pc}
 80126c2:	bf00      	nop
 80126c4:	20008df4 	.word	0x20008df4
 80126c8:	20008e5c 	.word	0x20008e5c
 80126cc:	20008ec4 	.word	0x20008ec4

080126d0 <global_stdio_init.part.0>:
 80126d0:	b510      	push	{r4, lr}
 80126d2:	4b0b      	ldr	r3, [pc, #44]	@ (8012700 <global_stdio_init.part.0+0x30>)
 80126d4:	4c0b      	ldr	r4, [pc, #44]	@ (8012704 <global_stdio_init.part.0+0x34>)
 80126d6:	4a0c      	ldr	r2, [pc, #48]	@ (8012708 <global_stdio_init.part.0+0x38>)
 80126d8:	601a      	str	r2, [r3, #0]
 80126da:	4620      	mov	r0, r4
 80126dc:	2200      	movs	r2, #0
 80126de:	2104      	movs	r1, #4
 80126e0:	f7ff ff94 	bl	801260c <std>
 80126e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80126e8:	2201      	movs	r2, #1
 80126ea:	2109      	movs	r1, #9
 80126ec:	f7ff ff8e 	bl	801260c <std>
 80126f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80126f4:	2202      	movs	r2, #2
 80126f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126fa:	2112      	movs	r1, #18
 80126fc:	f7ff bf86 	b.w	801260c <std>
 8012700:	20008f2c 	.word	0x20008f2c
 8012704:	20008df4 	.word	0x20008df4
 8012708:	08012679 	.word	0x08012679

0801270c <__sfp_lock_acquire>:
 801270c:	4801      	ldr	r0, [pc, #4]	@ (8012714 <__sfp_lock_acquire+0x8>)
 801270e:	f000 b920 	b.w	8012952 <__retarget_lock_acquire_recursive>
 8012712:	bf00      	nop
 8012714:	20008f35 	.word	0x20008f35

08012718 <__sfp_lock_release>:
 8012718:	4801      	ldr	r0, [pc, #4]	@ (8012720 <__sfp_lock_release+0x8>)
 801271a:	f000 b91b 	b.w	8012954 <__retarget_lock_release_recursive>
 801271e:	bf00      	nop
 8012720:	20008f35 	.word	0x20008f35

08012724 <__sinit>:
 8012724:	b510      	push	{r4, lr}
 8012726:	4604      	mov	r4, r0
 8012728:	f7ff fff0 	bl	801270c <__sfp_lock_acquire>
 801272c:	6a23      	ldr	r3, [r4, #32]
 801272e:	b11b      	cbz	r3, 8012738 <__sinit+0x14>
 8012730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012734:	f7ff bff0 	b.w	8012718 <__sfp_lock_release>
 8012738:	4b04      	ldr	r3, [pc, #16]	@ (801274c <__sinit+0x28>)
 801273a:	6223      	str	r3, [r4, #32]
 801273c:	4b04      	ldr	r3, [pc, #16]	@ (8012750 <__sinit+0x2c>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d1f5      	bne.n	8012730 <__sinit+0xc>
 8012744:	f7ff ffc4 	bl	80126d0 <global_stdio_init.part.0>
 8012748:	e7f2      	b.n	8012730 <__sinit+0xc>
 801274a:	bf00      	nop
 801274c:	08012691 	.word	0x08012691
 8012750:	20008f2c 	.word	0x20008f2c

08012754 <_fwalk_sglue>:
 8012754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012758:	4607      	mov	r7, r0
 801275a:	4688      	mov	r8, r1
 801275c:	4614      	mov	r4, r2
 801275e:	2600      	movs	r6, #0
 8012760:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012764:	f1b9 0901 	subs.w	r9, r9, #1
 8012768:	d505      	bpl.n	8012776 <_fwalk_sglue+0x22>
 801276a:	6824      	ldr	r4, [r4, #0]
 801276c:	2c00      	cmp	r4, #0
 801276e:	d1f7      	bne.n	8012760 <_fwalk_sglue+0xc>
 8012770:	4630      	mov	r0, r6
 8012772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012776:	89ab      	ldrh	r3, [r5, #12]
 8012778:	2b01      	cmp	r3, #1
 801277a:	d907      	bls.n	801278c <_fwalk_sglue+0x38>
 801277c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012780:	3301      	adds	r3, #1
 8012782:	d003      	beq.n	801278c <_fwalk_sglue+0x38>
 8012784:	4629      	mov	r1, r5
 8012786:	4638      	mov	r0, r7
 8012788:	47c0      	blx	r8
 801278a:	4306      	orrs	r6, r0
 801278c:	3568      	adds	r5, #104	@ 0x68
 801278e:	e7e9      	b.n	8012764 <_fwalk_sglue+0x10>

08012790 <siprintf>:
 8012790:	b40e      	push	{r1, r2, r3}
 8012792:	b500      	push	{lr}
 8012794:	b09c      	sub	sp, #112	@ 0x70
 8012796:	ab1d      	add	r3, sp, #116	@ 0x74
 8012798:	9002      	str	r0, [sp, #8]
 801279a:	9006      	str	r0, [sp, #24]
 801279c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80127a0:	4809      	ldr	r0, [pc, #36]	@ (80127c8 <siprintf+0x38>)
 80127a2:	9107      	str	r1, [sp, #28]
 80127a4:	9104      	str	r1, [sp, #16]
 80127a6:	4909      	ldr	r1, [pc, #36]	@ (80127cc <siprintf+0x3c>)
 80127a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80127ac:	9105      	str	r1, [sp, #20]
 80127ae:	6800      	ldr	r0, [r0, #0]
 80127b0:	9301      	str	r3, [sp, #4]
 80127b2:	a902      	add	r1, sp, #8
 80127b4:	f001 fc0a 	bl	8013fcc <_svfiprintf_r>
 80127b8:	9b02      	ldr	r3, [sp, #8]
 80127ba:	2200      	movs	r2, #0
 80127bc:	701a      	strb	r2, [r3, #0]
 80127be:	b01c      	add	sp, #112	@ 0x70
 80127c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80127c4:	b003      	add	sp, #12
 80127c6:	4770      	bx	lr
 80127c8:	20000044 	.word	0x20000044
 80127cc:	ffff0208 	.word	0xffff0208

080127d0 <__sread>:
 80127d0:	b510      	push	{r4, lr}
 80127d2:	460c      	mov	r4, r1
 80127d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127d8:	f000 f86c 	bl	80128b4 <_read_r>
 80127dc:	2800      	cmp	r0, #0
 80127de:	bfab      	itete	ge
 80127e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80127e2:	89a3      	ldrhlt	r3, [r4, #12]
 80127e4:	181b      	addge	r3, r3, r0
 80127e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80127ea:	bfac      	ite	ge
 80127ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80127ee:	81a3      	strhlt	r3, [r4, #12]
 80127f0:	bd10      	pop	{r4, pc}

080127f2 <__swrite>:
 80127f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127f6:	461f      	mov	r7, r3
 80127f8:	898b      	ldrh	r3, [r1, #12]
 80127fa:	05db      	lsls	r3, r3, #23
 80127fc:	4605      	mov	r5, r0
 80127fe:	460c      	mov	r4, r1
 8012800:	4616      	mov	r6, r2
 8012802:	d505      	bpl.n	8012810 <__swrite+0x1e>
 8012804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012808:	2302      	movs	r3, #2
 801280a:	2200      	movs	r2, #0
 801280c:	f000 f840 	bl	8012890 <_lseek_r>
 8012810:	89a3      	ldrh	r3, [r4, #12]
 8012812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012816:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801281a:	81a3      	strh	r3, [r4, #12]
 801281c:	4632      	mov	r2, r6
 801281e:	463b      	mov	r3, r7
 8012820:	4628      	mov	r0, r5
 8012822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012826:	f000 b857 	b.w	80128d8 <_write_r>

0801282a <__sseek>:
 801282a:	b510      	push	{r4, lr}
 801282c:	460c      	mov	r4, r1
 801282e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012832:	f000 f82d 	bl	8012890 <_lseek_r>
 8012836:	1c43      	adds	r3, r0, #1
 8012838:	89a3      	ldrh	r3, [r4, #12]
 801283a:	bf15      	itete	ne
 801283c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801283e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012842:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012846:	81a3      	strheq	r3, [r4, #12]
 8012848:	bf18      	it	ne
 801284a:	81a3      	strhne	r3, [r4, #12]
 801284c:	bd10      	pop	{r4, pc}

0801284e <__sclose>:
 801284e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012852:	f000 b80d 	b.w	8012870 <_close_r>

08012856 <memset>:
 8012856:	4402      	add	r2, r0
 8012858:	4603      	mov	r3, r0
 801285a:	4293      	cmp	r3, r2
 801285c:	d100      	bne.n	8012860 <memset+0xa>
 801285e:	4770      	bx	lr
 8012860:	f803 1b01 	strb.w	r1, [r3], #1
 8012864:	e7f9      	b.n	801285a <memset+0x4>
	...

08012868 <_localeconv_r>:
 8012868:	4800      	ldr	r0, [pc, #0]	@ (801286c <_localeconv_r+0x4>)
 801286a:	4770      	bx	lr
 801286c:	20000184 	.word	0x20000184

08012870 <_close_r>:
 8012870:	b538      	push	{r3, r4, r5, lr}
 8012872:	4d06      	ldr	r5, [pc, #24]	@ (801288c <_close_r+0x1c>)
 8012874:	2300      	movs	r3, #0
 8012876:	4604      	mov	r4, r0
 8012878:	4608      	mov	r0, r1
 801287a:	602b      	str	r3, [r5, #0]
 801287c:	f7f0 faac 	bl	8002dd8 <_close>
 8012880:	1c43      	adds	r3, r0, #1
 8012882:	d102      	bne.n	801288a <_close_r+0x1a>
 8012884:	682b      	ldr	r3, [r5, #0]
 8012886:	b103      	cbz	r3, 801288a <_close_r+0x1a>
 8012888:	6023      	str	r3, [r4, #0]
 801288a:	bd38      	pop	{r3, r4, r5, pc}
 801288c:	20008f30 	.word	0x20008f30

08012890 <_lseek_r>:
 8012890:	b538      	push	{r3, r4, r5, lr}
 8012892:	4d07      	ldr	r5, [pc, #28]	@ (80128b0 <_lseek_r+0x20>)
 8012894:	4604      	mov	r4, r0
 8012896:	4608      	mov	r0, r1
 8012898:	4611      	mov	r1, r2
 801289a:	2200      	movs	r2, #0
 801289c:	602a      	str	r2, [r5, #0]
 801289e:	461a      	mov	r2, r3
 80128a0:	f7f0 fac1 	bl	8002e26 <_lseek>
 80128a4:	1c43      	adds	r3, r0, #1
 80128a6:	d102      	bne.n	80128ae <_lseek_r+0x1e>
 80128a8:	682b      	ldr	r3, [r5, #0]
 80128aa:	b103      	cbz	r3, 80128ae <_lseek_r+0x1e>
 80128ac:	6023      	str	r3, [r4, #0]
 80128ae:	bd38      	pop	{r3, r4, r5, pc}
 80128b0:	20008f30 	.word	0x20008f30

080128b4 <_read_r>:
 80128b4:	b538      	push	{r3, r4, r5, lr}
 80128b6:	4d07      	ldr	r5, [pc, #28]	@ (80128d4 <_read_r+0x20>)
 80128b8:	4604      	mov	r4, r0
 80128ba:	4608      	mov	r0, r1
 80128bc:	4611      	mov	r1, r2
 80128be:	2200      	movs	r2, #0
 80128c0:	602a      	str	r2, [r5, #0]
 80128c2:	461a      	mov	r2, r3
 80128c4:	f7f0 fa4f 	bl	8002d66 <_read>
 80128c8:	1c43      	adds	r3, r0, #1
 80128ca:	d102      	bne.n	80128d2 <_read_r+0x1e>
 80128cc:	682b      	ldr	r3, [r5, #0]
 80128ce:	b103      	cbz	r3, 80128d2 <_read_r+0x1e>
 80128d0:	6023      	str	r3, [r4, #0]
 80128d2:	bd38      	pop	{r3, r4, r5, pc}
 80128d4:	20008f30 	.word	0x20008f30

080128d8 <_write_r>:
 80128d8:	b538      	push	{r3, r4, r5, lr}
 80128da:	4d07      	ldr	r5, [pc, #28]	@ (80128f8 <_write_r+0x20>)
 80128dc:	4604      	mov	r4, r0
 80128de:	4608      	mov	r0, r1
 80128e0:	4611      	mov	r1, r2
 80128e2:	2200      	movs	r2, #0
 80128e4:	602a      	str	r2, [r5, #0]
 80128e6:	461a      	mov	r2, r3
 80128e8:	f7f0 fa5a 	bl	8002da0 <_write>
 80128ec:	1c43      	adds	r3, r0, #1
 80128ee:	d102      	bne.n	80128f6 <_write_r+0x1e>
 80128f0:	682b      	ldr	r3, [r5, #0]
 80128f2:	b103      	cbz	r3, 80128f6 <_write_r+0x1e>
 80128f4:	6023      	str	r3, [r4, #0]
 80128f6:	bd38      	pop	{r3, r4, r5, pc}
 80128f8:	20008f30 	.word	0x20008f30

080128fc <__errno>:
 80128fc:	4b01      	ldr	r3, [pc, #4]	@ (8012904 <__errno+0x8>)
 80128fe:	6818      	ldr	r0, [r3, #0]
 8012900:	4770      	bx	lr
 8012902:	bf00      	nop
 8012904:	20000044 	.word	0x20000044

08012908 <__libc_init_array>:
 8012908:	b570      	push	{r4, r5, r6, lr}
 801290a:	4d0d      	ldr	r5, [pc, #52]	@ (8012940 <__libc_init_array+0x38>)
 801290c:	4c0d      	ldr	r4, [pc, #52]	@ (8012944 <__libc_init_array+0x3c>)
 801290e:	1b64      	subs	r4, r4, r5
 8012910:	10a4      	asrs	r4, r4, #2
 8012912:	2600      	movs	r6, #0
 8012914:	42a6      	cmp	r6, r4
 8012916:	d109      	bne.n	801292c <__libc_init_array+0x24>
 8012918:	4d0b      	ldr	r5, [pc, #44]	@ (8012948 <__libc_init_array+0x40>)
 801291a:	4c0c      	ldr	r4, [pc, #48]	@ (801294c <__libc_init_array+0x44>)
 801291c:	f002 f866 	bl	80149ec <_init>
 8012920:	1b64      	subs	r4, r4, r5
 8012922:	10a4      	asrs	r4, r4, #2
 8012924:	2600      	movs	r6, #0
 8012926:	42a6      	cmp	r6, r4
 8012928:	d105      	bne.n	8012936 <__libc_init_array+0x2e>
 801292a:	bd70      	pop	{r4, r5, r6, pc}
 801292c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012930:	4798      	blx	r3
 8012932:	3601      	adds	r6, #1
 8012934:	e7ee      	b.n	8012914 <__libc_init_array+0xc>
 8012936:	f855 3b04 	ldr.w	r3, [r5], #4
 801293a:	4798      	blx	r3
 801293c:	3601      	adds	r6, #1
 801293e:	e7f2      	b.n	8012926 <__libc_init_array+0x1e>
 8012940:	080165a8 	.word	0x080165a8
 8012944:	080165a8 	.word	0x080165a8
 8012948:	080165a8 	.word	0x080165a8
 801294c:	080165ac 	.word	0x080165ac

08012950 <__retarget_lock_init_recursive>:
 8012950:	4770      	bx	lr

08012952 <__retarget_lock_acquire_recursive>:
 8012952:	4770      	bx	lr

08012954 <__retarget_lock_release_recursive>:
 8012954:	4770      	bx	lr

08012956 <memcpy>:
 8012956:	440a      	add	r2, r1
 8012958:	4291      	cmp	r1, r2
 801295a:	f100 33ff 	add.w	r3, r0, #4294967295
 801295e:	d100      	bne.n	8012962 <memcpy+0xc>
 8012960:	4770      	bx	lr
 8012962:	b510      	push	{r4, lr}
 8012964:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012968:	f803 4f01 	strb.w	r4, [r3, #1]!
 801296c:	4291      	cmp	r1, r2
 801296e:	d1f9      	bne.n	8012964 <memcpy+0xe>
 8012970:	bd10      	pop	{r4, pc}

08012972 <quorem>:
 8012972:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012976:	6903      	ldr	r3, [r0, #16]
 8012978:	690c      	ldr	r4, [r1, #16]
 801297a:	42a3      	cmp	r3, r4
 801297c:	4607      	mov	r7, r0
 801297e:	db7e      	blt.n	8012a7e <quorem+0x10c>
 8012980:	3c01      	subs	r4, #1
 8012982:	f101 0814 	add.w	r8, r1, #20
 8012986:	00a3      	lsls	r3, r4, #2
 8012988:	f100 0514 	add.w	r5, r0, #20
 801298c:	9300      	str	r3, [sp, #0]
 801298e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012992:	9301      	str	r3, [sp, #4]
 8012994:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012998:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801299c:	3301      	adds	r3, #1
 801299e:	429a      	cmp	r2, r3
 80129a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80129a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80129a8:	d32e      	bcc.n	8012a08 <quorem+0x96>
 80129aa:	f04f 0a00 	mov.w	sl, #0
 80129ae:	46c4      	mov	ip, r8
 80129b0:	46ae      	mov	lr, r5
 80129b2:	46d3      	mov	fp, sl
 80129b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80129b8:	b298      	uxth	r0, r3
 80129ba:	fb06 a000 	mla	r0, r6, r0, sl
 80129be:	0c02      	lsrs	r2, r0, #16
 80129c0:	0c1b      	lsrs	r3, r3, #16
 80129c2:	fb06 2303 	mla	r3, r6, r3, r2
 80129c6:	f8de 2000 	ldr.w	r2, [lr]
 80129ca:	b280      	uxth	r0, r0
 80129cc:	b292      	uxth	r2, r2
 80129ce:	1a12      	subs	r2, r2, r0
 80129d0:	445a      	add	r2, fp
 80129d2:	f8de 0000 	ldr.w	r0, [lr]
 80129d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80129da:	b29b      	uxth	r3, r3
 80129dc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80129e0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80129e4:	b292      	uxth	r2, r2
 80129e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80129ea:	45e1      	cmp	r9, ip
 80129ec:	f84e 2b04 	str.w	r2, [lr], #4
 80129f0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80129f4:	d2de      	bcs.n	80129b4 <quorem+0x42>
 80129f6:	9b00      	ldr	r3, [sp, #0]
 80129f8:	58eb      	ldr	r3, [r5, r3]
 80129fa:	b92b      	cbnz	r3, 8012a08 <quorem+0x96>
 80129fc:	9b01      	ldr	r3, [sp, #4]
 80129fe:	3b04      	subs	r3, #4
 8012a00:	429d      	cmp	r5, r3
 8012a02:	461a      	mov	r2, r3
 8012a04:	d32f      	bcc.n	8012a66 <quorem+0xf4>
 8012a06:	613c      	str	r4, [r7, #16]
 8012a08:	4638      	mov	r0, r7
 8012a0a:	f001 f97b 	bl	8013d04 <__mcmp>
 8012a0e:	2800      	cmp	r0, #0
 8012a10:	db25      	blt.n	8012a5e <quorem+0xec>
 8012a12:	4629      	mov	r1, r5
 8012a14:	2000      	movs	r0, #0
 8012a16:	f858 2b04 	ldr.w	r2, [r8], #4
 8012a1a:	f8d1 c000 	ldr.w	ip, [r1]
 8012a1e:	fa1f fe82 	uxth.w	lr, r2
 8012a22:	fa1f f38c 	uxth.w	r3, ip
 8012a26:	eba3 030e 	sub.w	r3, r3, lr
 8012a2a:	4403      	add	r3, r0
 8012a2c:	0c12      	lsrs	r2, r2, #16
 8012a2e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012a32:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012a36:	b29b      	uxth	r3, r3
 8012a38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012a3c:	45c1      	cmp	r9, r8
 8012a3e:	f841 3b04 	str.w	r3, [r1], #4
 8012a42:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012a46:	d2e6      	bcs.n	8012a16 <quorem+0xa4>
 8012a48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012a4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012a50:	b922      	cbnz	r2, 8012a5c <quorem+0xea>
 8012a52:	3b04      	subs	r3, #4
 8012a54:	429d      	cmp	r5, r3
 8012a56:	461a      	mov	r2, r3
 8012a58:	d30b      	bcc.n	8012a72 <quorem+0x100>
 8012a5a:	613c      	str	r4, [r7, #16]
 8012a5c:	3601      	adds	r6, #1
 8012a5e:	4630      	mov	r0, r6
 8012a60:	b003      	add	sp, #12
 8012a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a66:	6812      	ldr	r2, [r2, #0]
 8012a68:	3b04      	subs	r3, #4
 8012a6a:	2a00      	cmp	r2, #0
 8012a6c:	d1cb      	bne.n	8012a06 <quorem+0x94>
 8012a6e:	3c01      	subs	r4, #1
 8012a70:	e7c6      	b.n	8012a00 <quorem+0x8e>
 8012a72:	6812      	ldr	r2, [r2, #0]
 8012a74:	3b04      	subs	r3, #4
 8012a76:	2a00      	cmp	r2, #0
 8012a78:	d1ef      	bne.n	8012a5a <quorem+0xe8>
 8012a7a:	3c01      	subs	r4, #1
 8012a7c:	e7ea      	b.n	8012a54 <quorem+0xe2>
 8012a7e:	2000      	movs	r0, #0
 8012a80:	e7ee      	b.n	8012a60 <quorem+0xee>
 8012a82:	0000      	movs	r0, r0
 8012a84:	0000      	movs	r0, r0
	...

08012a88 <_dtoa_r>:
 8012a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a8c:	69c7      	ldr	r7, [r0, #28]
 8012a8e:	b099      	sub	sp, #100	@ 0x64
 8012a90:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012a94:	ec55 4b10 	vmov	r4, r5, d0
 8012a98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012a9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8012a9c:	4683      	mov	fp, r0
 8012a9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8012aa0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012aa2:	b97f      	cbnz	r7, 8012ac4 <_dtoa_r+0x3c>
 8012aa4:	2010      	movs	r0, #16
 8012aa6:	f000 fdfd 	bl	80136a4 <malloc>
 8012aaa:	4602      	mov	r2, r0
 8012aac:	f8cb 001c 	str.w	r0, [fp, #28]
 8012ab0:	b920      	cbnz	r0, 8012abc <_dtoa_r+0x34>
 8012ab2:	4ba7      	ldr	r3, [pc, #668]	@ (8012d50 <_dtoa_r+0x2c8>)
 8012ab4:	21ef      	movs	r1, #239	@ 0xef
 8012ab6:	48a7      	ldr	r0, [pc, #668]	@ (8012d54 <_dtoa_r+0x2cc>)
 8012ab8:	f001 fc5a 	bl	8014370 <__assert_func>
 8012abc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012ac0:	6007      	str	r7, [r0, #0]
 8012ac2:	60c7      	str	r7, [r0, #12]
 8012ac4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012ac8:	6819      	ldr	r1, [r3, #0]
 8012aca:	b159      	cbz	r1, 8012ae4 <_dtoa_r+0x5c>
 8012acc:	685a      	ldr	r2, [r3, #4]
 8012ace:	604a      	str	r2, [r1, #4]
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	4093      	lsls	r3, r2
 8012ad4:	608b      	str	r3, [r1, #8]
 8012ad6:	4658      	mov	r0, fp
 8012ad8:	f000 feda 	bl	8013890 <_Bfree>
 8012adc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	601a      	str	r2, [r3, #0]
 8012ae4:	1e2b      	subs	r3, r5, #0
 8012ae6:	bfb9      	ittee	lt
 8012ae8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012aec:	9303      	strlt	r3, [sp, #12]
 8012aee:	2300      	movge	r3, #0
 8012af0:	6033      	strge	r3, [r6, #0]
 8012af2:	9f03      	ldr	r7, [sp, #12]
 8012af4:	4b98      	ldr	r3, [pc, #608]	@ (8012d58 <_dtoa_r+0x2d0>)
 8012af6:	bfbc      	itt	lt
 8012af8:	2201      	movlt	r2, #1
 8012afa:	6032      	strlt	r2, [r6, #0]
 8012afc:	43bb      	bics	r3, r7
 8012afe:	d112      	bne.n	8012b26 <_dtoa_r+0x9e>
 8012b00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012b02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012b06:	6013      	str	r3, [r2, #0]
 8012b08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012b0c:	4323      	orrs	r3, r4
 8012b0e:	f000 854d 	beq.w	80135ac <_dtoa_r+0xb24>
 8012b12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012b14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012d6c <_dtoa_r+0x2e4>
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	f000 854f 	beq.w	80135bc <_dtoa_r+0xb34>
 8012b1e:	f10a 0303 	add.w	r3, sl, #3
 8012b22:	f000 bd49 	b.w	80135b8 <_dtoa_r+0xb30>
 8012b26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	ec51 0b17 	vmov	r0, r1, d7
 8012b30:	2300      	movs	r3, #0
 8012b32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012b36:	f7ed ffc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b3a:	4680      	mov	r8, r0
 8012b3c:	b158      	cbz	r0, 8012b56 <_dtoa_r+0xce>
 8012b3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012b40:	2301      	movs	r3, #1
 8012b42:	6013      	str	r3, [r2, #0]
 8012b44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012b46:	b113      	cbz	r3, 8012b4e <_dtoa_r+0xc6>
 8012b48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012b4a:	4b84      	ldr	r3, [pc, #528]	@ (8012d5c <_dtoa_r+0x2d4>)
 8012b4c:	6013      	str	r3, [r2, #0]
 8012b4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012d70 <_dtoa_r+0x2e8>
 8012b52:	f000 bd33 	b.w	80135bc <_dtoa_r+0xb34>
 8012b56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012b5a:	aa16      	add	r2, sp, #88	@ 0x58
 8012b5c:	a917      	add	r1, sp, #92	@ 0x5c
 8012b5e:	4658      	mov	r0, fp
 8012b60:	f001 f980 	bl	8013e64 <__d2b>
 8012b64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012b68:	4681      	mov	r9, r0
 8012b6a:	2e00      	cmp	r6, #0
 8012b6c:	d077      	beq.n	8012c5e <_dtoa_r+0x1d6>
 8012b6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012b70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012b7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012b80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012b84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012b88:	4619      	mov	r1, r3
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	4b74      	ldr	r3, [pc, #464]	@ (8012d60 <_dtoa_r+0x2d8>)
 8012b8e:	f7ed fb7b 	bl	8000288 <__aeabi_dsub>
 8012b92:	a369      	add	r3, pc, #420	@ (adr r3, 8012d38 <_dtoa_r+0x2b0>)
 8012b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b98:	f7ed fd2e 	bl	80005f8 <__aeabi_dmul>
 8012b9c:	a368      	add	r3, pc, #416	@ (adr r3, 8012d40 <_dtoa_r+0x2b8>)
 8012b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba2:	f7ed fb73 	bl	800028c <__adddf3>
 8012ba6:	4604      	mov	r4, r0
 8012ba8:	4630      	mov	r0, r6
 8012baa:	460d      	mov	r5, r1
 8012bac:	f7ed fcba 	bl	8000524 <__aeabi_i2d>
 8012bb0:	a365      	add	r3, pc, #404	@ (adr r3, 8012d48 <_dtoa_r+0x2c0>)
 8012bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bb6:	f7ed fd1f 	bl	80005f8 <__aeabi_dmul>
 8012bba:	4602      	mov	r2, r0
 8012bbc:	460b      	mov	r3, r1
 8012bbe:	4620      	mov	r0, r4
 8012bc0:	4629      	mov	r1, r5
 8012bc2:	f7ed fb63 	bl	800028c <__adddf3>
 8012bc6:	4604      	mov	r4, r0
 8012bc8:	460d      	mov	r5, r1
 8012bca:	f7ed ffc5 	bl	8000b58 <__aeabi_d2iz>
 8012bce:	2200      	movs	r2, #0
 8012bd0:	4607      	mov	r7, r0
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	4620      	mov	r0, r4
 8012bd6:	4629      	mov	r1, r5
 8012bd8:	f7ed ff80 	bl	8000adc <__aeabi_dcmplt>
 8012bdc:	b140      	cbz	r0, 8012bf0 <_dtoa_r+0x168>
 8012bde:	4638      	mov	r0, r7
 8012be0:	f7ed fca0 	bl	8000524 <__aeabi_i2d>
 8012be4:	4622      	mov	r2, r4
 8012be6:	462b      	mov	r3, r5
 8012be8:	f7ed ff6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8012bec:	b900      	cbnz	r0, 8012bf0 <_dtoa_r+0x168>
 8012bee:	3f01      	subs	r7, #1
 8012bf0:	2f16      	cmp	r7, #22
 8012bf2:	d851      	bhi.n	8012c98 <_dtoa_r+0x210>
 8012bf4:	4b5b      	ldr	r3, [pc, #364]	@ (8012d64 <_dtoa_r+0x2dc>)
 8012bf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012c02:	f7ed ff6b 	bl	8000adc <__aeabi_dcmplt>
 8012c06:	2800      	cmp	r0, #0
 8012c08:	d048      	beq.n	8012c9c <_dtoa_r+0x214>
 8012c0a:	3f01      	subs	r7, #1
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8012c10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012c12:	1b9b      	subs	r3, r3, r6
 8012c14:	1e5a      	subs	r2, r3, #1
 8012c16:	bf44      	itt	mi
 8012c18:	f1c3 0801 	rsbmi	r8, r3, #1
 8012c1c:	2300      	movmi	r3, #0
 8012c1e:	9208      	str	r2, [sp, #32]
 8012c20:	bf54      	ite	pl
 8012c22:	f04f 0800 	movpl.w	r8, #0
 8012c26:	9308      	strmi	r3, [sp, #32]
 8012c28:	2f00      	cmp	r7, #0
 8012c2a:	db39      	blt.n	8012ca0 <_dtoa_r+0x218>
 8012c2c:	9b08      	ldr	r3, [sp, #32]
 8012c2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012c30:	443b      	add	r3, r7
 8012c32:	9308      	str	r3, [sp, #32]
 8012c34:	2300      	movs	r3, #0
 8012c36:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c3a:	2b09      	cmp	r3, #9
 8012c3c:	d864      	bhi.n	8012d08 <_dtoa_r+0x280>
 8012c3e:	2b05      	cmp	r3, #5
 8012c40:	bfc4      	itt	gt
 8012c42:	3b04      	subgt	r3, #4
 8012c44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c48:	f1a3 0302 	sub.w	r3, r3, #2
 8012c4c:	bfcc      	ite	gt
 8012c4e:	2400      	movgt	r4, #0
 8012c50:	2401      	movle	r4, #1
 8012c52:	2b03      	cmp	r3, #3
 8012c54:	d863      	bhi.n	8012d1e <_dtoa_r+0x296>
 8012c56:	e8df f003 	tbb	[pc, r3]
 8012c5a:	372a      	.short	0x372a
 8012c5c:	5535      	.short	0x5535
 8012c5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012c62:	441e      	add	r6, r3
 8012c64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012c68:	2b20      	cmp	r3, #32
 8012c6a:	bfc1      	itttt	gt
 8012c6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012c70:	409f      	lslgt	r7, r3
 8012c72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012c76:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012c7a:	bfd6      	itet	le
 8012c7c:	f1c3 0320 	rsble	r3, r3, #32
 8012c80:	ea47 0003 	orrgt.w	r0, r7, r3
 8012c84:	fa04 f003 	lslle.w	r0, r4, r3
 8012c88:	f7ed fc3c 	bl	8000504 <__aeabi_ui2d>
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012c92:	3e01      	subs	r6, #1
 8012c94:	9214      	str	r2, [sp, #80]	@ 0x50
 8012c96:	e777      	b.n	8012b88 <_dtoa_r+0x100>
 8012c98:	2301      	movs	r3, #1
 8012c9a:	e7b8      	b.n	8012c0e <_dtoa_r+0x186>
 8012c9c:	9012      	str	r0, [sp, #72]	@ 0x48
 8012c9e:	e7b7      	b.n	8012c10 <_dtoa_r+0x188>
 8012ca0:	427b      	negs	r3, r7
 8012ca2:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	eba8 0807 	sub.w	r8, r8, r7
 8012caa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012cac:	e7c4      	b.n	8012c38 <_dtoa_r+0x1b0>
 8012cae:	2300      	movs	r3, #0
 8012cb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012cb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	dc35      	bgt.n	8012d24 <_dtoa_r+0x29c>
 8012cb8:	2301      	movs	r3, #1
 8012cba:	9300      	str	r3, [sp, #0]
 8012cbc:	9307      	str	r3, [sp, #28]
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8012cc2:	e00b      	b.n	8012cdc <_dtoa_r+0x254>
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	e7f3      	b.n	8012cb0 <_dtoa_r+0x228>
 8012cc8:	2300      	movs	r3, #0
 8012cca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012ccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012cce:	18fb      	adds	r3, r7, r3
 8012cd0:	9300      	str	r3, [sp, #0]
 8012cd2:	3301      	adds	r3, #1
 8012cd4:	2b01      	cmp	r3, #1
 8012cd6:	9307      	str	r3, [sp, #28]
 8012cd8:	bfb8      	it	lt
 8012cda:	2301      	movlt	r3, #1
 8012cdc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012ce0:	2100      	movs	r1, #0
 8012ce2:	2204      	movs	r2, #4
 8012ce4:	f102 0514 	add.w	r5, r2, #20
 8012ce8:	429d      	cmp	r5, r3
 8012cea:	d91f      	bls.n	8012d2c <_dtoa_r+0x2a4>
 8012cec:	6041      	str	r1, [r0, #4]
 8012cee:	4658      	mov	r0, fp
 8012cf0:	f000 fd8e 	bl	8013810 <_Balloc>
 8012cf4:	4682      	mov	sl, r0
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	d13c      	bne.n	8012d74 <_dtoa_r+0x2ec>
 8012cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8012d68 <_dtoa_r+0x2e0>)
 8012cfc:	4602      	mov	r2, r0
 8012cfe:	f240 11af 	movw	r1, #431	@ 0x1af
 8012d02:	e6d8      	b.n	8012ab6 <_dtoa_r+0x2e>
 8012d04:	2301      	movs	r3, #1
 8012d06:	e7e0      	b.n	8012cca <_dtoa_r+0x242>
 8012d08:	2401      	movs	r4, #1
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012d10:	f04f 33ff 	mov.w	r3, #4294967295
 8012d14:	9300      	str	r3, [sp, #0]
 8012d16:	9307      	str	r3, [sp, #28]
 8012d18:	2200      	movs	r2, #0
 8012d1a:	2312      	movs	r3, #18
 8012d1c:	e7d0      	b.n	8012cc0 <_dtoa_r+0x238>
 8012d1e:	2301      	movs	r3, #1
 8012d20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012d22:	e7f5      	b.n	8012d10 <_dtoa_r+0x288>
 8012d24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d26:	9300      	str	r3, [sp, #0]
 8012d28:	9307      	str	r3, [sp, #28]
 8012d2a:	e7d7      	b.n	8012cdc <_dtoa_r+0x254>
 8012d2c:	3101      	adds	r1, #1
 8012d2e:	0052      	lsls	r2, r2, #1
 8012d30:	e7d8      	b.n	8012ce4 <_dtoa_r+0x25c>
 8012d32:	bf00      	nop
 8012d34:	f3af 8000 	nop.w
 8012d38:	636f4361 	.word	0x636f4361
 8012d3c:	3fd287a7 	.word	0x3fd287a7
 8012d40:	8b60c8b3 	.word	0x8b60c8b3
 8012d44:	3fc68a28 	.word	0x3fc68a28
 8012d48:	509f79fb 	.word	0x509f79fb
 8012d4c:	3fd34413 	.word	0x3fd34413
 8012d50:	08016271 	.word	0x08016271
 8012d54:	08016288 	.word	0x08016288
 8012d58:	7ff00000 	.word	0x7ff00000
 8012d5c:	08016241 	.word	0x08016241
 8012d60:	3ff80000 	.word	0x3ff80000
 8012d64:	08016380 	.word	0x08016380
 8012d68:	080162e0 	.word	0x080162e0
 8012d6c:	0801626d 	.word	0x0801626d
 8012d70:	08016240 	.word	0x08016240
 8012d74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012d78:	6018      	str	r0, [r3, #0]
 8012d7a:	9b07      	ldr	r3, [sp, #28]
 8012d7c:	2b0e      	cmp	r3, #14
 8012d7e:	f200 80a4 	bhi.w	8012eca <_dtoa_r+0x442>
 8012d82:	2c00      	cmp	r4, #0
 8012d84:	f000 80a1 	beq.w	8012eca <_dtoa_r+0x442>
 8012d88:	2f00      	cmp	r7, #0
 8012d8a:	dd33      	ble.n	8012df4 <_dtoa_r+0x36c>
 8012d8c:	4bad      	ldr	r3, [pc, #692]	@ (8013044 <_dtoa_r+0x5bc>)
 8012d8e:	f007 020f 	and.w	r2, r7, #15
 8012d92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d96:	ed93 7b00 	vldr	d7, [r3]
 8012d9a:	05f8      	lsls	r0, r7, #23
 8012d9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012da0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012da4:	d516      	bpl.n	8012dd4 <_dtoa_r+0x34c>
 8012da6:	4ba8      	ldr	r3, [pc, #672]	@ (8013048 <_dtoa_r+0x5c0>)
 8012da8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012dac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012db0:	f7ed fd4c 	bl	800084c <__aeabi_ddiv>
 8012db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012db8:	f004 040f 	and.w	r4, r4, #15
 8012dbc:	2603      	movs	r6, #3
 8012dbe:	4da2      	ldr	r5, [pc, #648]	@ (8013048 <_dtoa_r+0x5c0>)
 8012dc0:	b954      	cbnz	r4, 8012dd8 <_dtoa_r+0x350>
 8012dc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012dca:	f7ed fd3f 	bl	800084c <__aeabi_ddiv>
 8012dce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012dd2:	e028      	b.n	8012e26 <_dtoa_r+0x39e>
 8012dd4:	2602      	movs	r6, #2
 8012dd6:	e7f2      	b.n	8012dbe <_dtoa_r+0x336>
 8012dd8:	07e1      	lsls	r1, r4, #31
 8012dda:	d508      	bpl.n	8012dee <_dtoa_r+0x366>
 8012ddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012de0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012de4:	f7ed fc08 	bl	80005f8 <__aeabi_dmul>
 8012de8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012dec:	3601      	adds	r6, #1
 8012dee:	1064      	asrs	r4, r4, #1
 8012df0:	3508      	adds	r5, #8
 8012df2:	e7e5      	b.n	8012dc0 <_dtoa_r+0x338>
 8012df4:	f000 80d2 	beq.w	8012f9c <_dtoa_r+0x514>
 8012df8:	427c      	negs	r4, r7
 8012dfa:	4b92      	ldr	r3, [pc, #584]	@ (8013044 <_dtoa_r+0x5bc>)
 8012dfc:	4d92      	ldr	r5, [pc, #584]	@ (8013048 <_dtoa_r+0x5c0>)
 8012dfe:	f004 020f 	and.w	r2, r4, #15
 8012e02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012e0e:	f7ed fbf3 	bl	80005f8 <__aeabi_dmul>
 8012e12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e16:	1124      	asrs	r4, r4, #4
 8012e18:	2300      	movs	r3, #0
 8012e1a:	2602      	movs	r6, #2
 8012e1c:	2c00      	cmp	r4, #0
 8012e1e:	f040 80b2 	bne.w	8012f86 <_dtoa_r+0x4fe>
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d1d3      	bne.n	8012dce <_dtoa_r+0x346>
 8012e26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012e28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	f000 80b7 	beq.w	8012fa0 <_dtoa_r+0x518>
 8012e32:	4b86      	ldr	r3, [pc, #536]	@ (801304c <_dtoa_r+0x5c4>)
 8012e34:	2200      	movs	r2, #0
 8012e36:	4620      	mov	r0, r4
 8012e38:	4629      	mov	r1, r5
 8012e3a:	f7ed fe4f 	bl	8000adc <__aeabi_dcmplt>
 8012e3e:	2800      	cmp	r0, #0
 8012e40:	f000 80ae 	beq.w	8012fa0 <_dtoa_r+0x518>
 8012e44:	9b07      	ldr	r3, [sp, #28]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	f000 80aa 	beq.w	8012fa0 <_dtoa_r+0x518>
 8012e4c:	9b00      	ldr	r3, [sp, #0]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	dd37      	ble.n	8012ec2 <_dtoa_r+0x43a>
 8012e52:	1e7b      	subs	r3, r7, #1
 8012e54:	9304      	str	r3, [sp, #16]
 8012e56:	4620      	mov	r0, r4
 8012e58:	4b7d      	ldr	r3, [pc, #500]	@ (8013050 <_dtoa_r+0x5c8>)
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	4629      	mov	r1, r5
 8012e5e:	f7ed fbcb 	bl	80005f8 <__aeabi_dmul>
 8012e62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e66:	9c00      	ldr	r4, [sp, #0]
 8012e68:	3601      	adds	r6, #1
 8012e6a:	4630      	mov	r0, r6
 8012e6c:	f7ed fb5a 	bl	8000524 <__aeabi_i2d>
 8012e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e74:	f7ed fbc0 	bl	80005f8 <__aeabi_dmul>
 8012e78:	4b76      	ldr	r3, [pc, #472]	@ (8013054 <_dtoa_r+0x5cc>)
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	f7ed fa06 	bl	800028c <__adddf3>
 8012e80:	4605      	mov	r5, r0
 8012e82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012e86:	2c00      	cmp	r4, #0
 8012e88:	f040 808d 	bne.w	8012fa6 <_dtoa_r+0x51e>
 8012e8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e90:	4b71      	ldr	r3, [pc, #452]	@ (8013058 <_dtoa_r+0x5d0>)
 8012e92:	2200      	movs	r2, #0
 8012e94:	f7ed f9f8 	bl	8000288 <__aeabi_dsub>
 8012e98:	4602      	mov	r2, r0
 8012e9a:	460b      	mov	r3, r1
 8012e9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012ea0:	462a      	mov	r2, r5
 8012ea2:	4633      	mov	r3, r6
 8012ea4:	f7ed fe38 	bl	8000b18 <__aeabi_dcmpgt>
 8012ea8:	2800      	cmp	r0, #0
 8012eaa:	f040 828b 	bne.w	80133c4 <_dtoa_r+0x93c>
 8012eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012eb2:	462a      	mov	r2, r5
 8012eb4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012eb8:	f7ed fe10 	bl	8000adc <__aeabi_dcmplt>
 8012ebc:	2800      	cmp	r0, #0
 8012ebe:	f040 8128 	bne.w	8013112 <_dtoa_r+0x68a>
 8012ec2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012ec6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012eca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	f2c0 815a 	blt.w	8013186 <_dtoa_r+0x6fe>
 8012ed2:	2f0e      	cmp	r7, #14
 8012ed4:	f300 8157 	bgt.w	8013186 <_dtoa_r+0x6fe>
 8012ed8:	4b5a      	ldr	r3, [pc, #360]	@ (8013044 <_dtoa_r+0x5bc>)
 8012eda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012ede:	ed93 7b00 	vldr	d7, [r3]
 8012ee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	ed8d 7b00 	vstr	d7, [sp]
 8012eea:	da03      	bge.n	8012ef4 <_dtoa_r+0x46c>
 8012eec:	9b07      	ldr	r3, [sp, #28]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	f340 8101 	ble.w	80130f6 <_dtoa_r+0x66e>
 8012ef4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012ef8:	4656      	mov	r6, sl
 8012efa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012efe:	4620      	mov	r0, r4
 8012f00:	4629      	mov	r1, r5
 8012f02:	f7ed fca3 	bl	800084c <__aeabi_ddiv>
 8012f06:	f7ed fe27 	bl	8000b58 <__aeabi_d2iz>
 8012f0a:	4680      	mov	r8, r0
 8012f0c:	f7ed fb0a 	bl	8000524 <__aeabi_i2d>
 8012f10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f14:	f7ed fb70 	bl	80005f8 <__aeabi_dmul>
 8012f18:	4602      	mov	r2, r0
 8012f1a:	460b      	mov	r3, r1
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	4629      	mov	r1, r5
 8012f20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012f24:	f7ed f9b0 	bl	8000288 <__aeabi_dsub>
 8012f28:	f806 4b01 	strb.w	r4, [r6], #1
 8012f2c:	9d07      	ldr	r5, [sp, #28]
 8012f2e:	eba6 040a 	sub.w	r4, r6, sl
 8012f32:	42a5      	cmp	r5, r4
 8012f34:	4602      	mov	r2, r0
 8012f36:	460b      	mov	r3, r1
 8012f38:	f040 8117 	bne.w	801316a <_dtoa_r+0x6e2>
 8012f3c:	f7ed f9a6 	bl	800028c <__adddf3>
 8012f40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f44:	4604      	mov	r4, r0
 8012f46:	460d      	mov	r5, r1
 8012f48:	f7ed fde6 	bl	8000b18 <__aeabi_dcmpgt>
 8012f4c:	2800      	cmp	r0, #0
 8012f4e:	f040 80f9 	bne.w	8013144 <_dtoa_r+0x6bc>
 8012f52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f56:	4620      	mov	r0, r4
 8012f58:	4629      	mov	r1, r5
 8012f5a:	f7ed fdb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8012f5e:	b118      	cbz	r0, 8012f68 <_dtoa_r+0x4e0>
 8012f60:	f018 0f01 	tst.w	r8, #1
 8012f64:	f040 80ee 	bne.w	8013144 <_dtoa_r+0x6bc>
 8012f68:	4649      	mov	r1, r9
 8012f6a:	4658      	mov	r0, fp
 8012f6c:	f000 fc90 	bl	8013890 <_Bfree>
 8012f70:	2300      	movs	r3, #0
 8012f72:	7033      	strb	r3, [r6, #0]
 8012f74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012f76:	3701      	adds	r7, #1
 8012f78:	601f      	str	r7, [r3, #0]
 8012f7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	f000 831d 	beq.w	80135bc <_dtoa_r+0xb34>
 8012f82:	601e      	str	r6, [r3, #0]
 8012f84:	e31a      	b.n	80135bc <_dtoa_r+0xb34>
 8012f86:	07e2      	lsls	r2, r4, #31
 8012f88:	d505      	bpl.n	8012f96 <_dtoa_r+0x50e>
 8012f8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012f8e:	f7ed fb33 	bl	80005f8 <__aeabi_dmul>
 8012f92:	3601      	adds	r6, #1
 8012f94:	2301      	movs	r3, #1
 8012f96:	1064      	asrs	r4, r4, #1
 8012f98:	3508      	adds	r5, #8
 8012f9a:	e73f      	b.n	8012e1c <_dtoa_r+0x394>
 8012f9c:	2602      	movs	r6, #2
 8012f9e:	e742      	b.n	8012e26 <_dtoa_r+0x39e>
 8012fa0:	9c07      	ldr	r4, [sp, #28]
 8012fa2:	9704      	str	r7, [sp, #16]
 8012fa4:	e761      	b.n	8012e6a <_dtoa_r+0x3e2>
 8012fa6:	4b27      	ldr	r3, [pc, #156]	@ (8013044 <_dtoa_r+0x5bc>)
 8012fa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012faa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012fae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012fb2:	4454      	add	r4, sl
 8012fb4:	2900      	cmp	r1, #0
 8012fb6:	d053      	beq.n	8013060 <_dtoa_r+0x5d8>
 8012fb8:	4928      	ldr	r1, [pc, #160]	@ (801305c <_dtoa_r+0x5d4>)
 8012fba:	2000      	movs	r0, #0
 8012fbc:	f7ed fc46 	bl	800084c <__aeabi_ddiv>
 8012fc0:	4633      	mov	r3, r6
 8012fc2:	462a      	mov	r2, r5
 8012fc4:	f7ed f960 	bl	8000288 <__aeabi_dsub>
 8012fc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012fcc:	4656      	mov	r6, sl
 8012fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fd2:	f7ed fdc1 	bl	8000b58 <__aeabi_d2iz>
 8012fd6:	4605      	mov	r5, r0
 8012fd8:	f7ed faa4 	bl	8000524 <__aeabi_i2d>
 8012fdc:	4602      	mov	r2, r0
 8012fde:	460b      	mov	r3, r1
 8012fe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fe4:	f7ed f950 	bl	8000288 <__aeabi_dsub>
 8012fe8:	3530      	adds	r5, #48	@ 0x30
 8012fea:	4602      	mov	r2, r0
 8012fec:	460b      	mov	r3, r1
 8012fee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012ff2:	f806 5b01 	strb.w	r5, [r6], #1
 8012ff6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012ffa:	f7ed fd6f 	bl	8000adc <__aeabi_dcmplt>
 8012ffe:	2800      	cmp	r0, #0
 8013000:	d171      	bne.n	80130e6 <_dtoa_r+0x65e>
 8013002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013006:	4911      	ldr	r1, [pc, #68]	@ (801304c <_dtoa_r+0x5c4>)
 8013008:	2000      	movs	r0, #0
 801300a:	f7ed f93d 	bl	8000288 <__aeabi_dsub>
 801300e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013012:	f7ed fd63 	bl	8000adc <__aeabi_dcmplt>
 8013016:	2800      	cmp	r0, #0
 8013018:	f040 8095 	bne.w	8013146 <_dtoa_r+0x6be>
 801301c:	42a6      	cmp	r6, r4
 801301e:	f43f af50 	beq.w	8012ec2 <_dtoa_r+0x43a>
 8013022:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013026:	4b0a      	ldr	r3, [pc, #40]	@ (8013050 <_dtoa_r+0x5c8>)
 8013028:	2200      	movs	r2, #0
 801302a:	f7ed fae5 	bl	80005f8 <__aeabi_dmul>
 801302e:	4b08      	ldr	r3, [pc, #32]	@ (8013050 <_dtoa_r+0x5c8>)
 8013030:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013034:	2200      	movs	r2, #0
 8013036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801303a:	f7ed fadd 	bl	80005f8 <__aeabi_dmul>
 801303e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013042:	e7c4      	b.n	8012fce <_dtoa_r+0x546>
 8013044:	08016380 	.word	0x08016380
 8013048:	08016358 	.word	0x08016358
 801304c:	3ff00000 	.word	0x3ff00000
 8013050:	40240000 	.word	0x40240000
 8013054:	401c0000 	.word	0x401c0000
 8013058:	40140000 	.word	0x40140000
 801305c:	3fe00000 	.word	0x3fe00000
 8013060:	4631      	mov	r1, r6
 8013062:	4628      	mov	r0, r5
 8013064:	f7ed fac8 	bl	80005f8 <__aeabi_dmul>
 8013068:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801306c:	9415      	str	r4, [sp, #84]	@ 0x54
 801306e:	4656      	mov	r6, sl
 8013070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013074:	f7ed fd70 	bl	8000b58 <__aeabi_d2iz>
 8013078:	4605      	mov	r5, r0
 801307a:	f7ed fa53 	bl	8000524 <__aeabi_i2d>
 801307e:	4602      	mov	r2, r0
 8013080:	460b      	mov	r3, r1
 8013082:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013086:	f7ed f8ff 	bl	8000288 <__aeabi_dsub>
 801308a:	3530      	adds	r5, #48	@ 0x30
 801308c:	f806 5b01 	strb.w	r5, [r6], #1
 8013090:	4602      	mov	r2, r0
 8013092:	460b      	mov	r3, r1
 8013094:	42a6      	cmp	r6, r4
 8013096:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801309a:	f04f 0200 	mov.w	r2, #0
 801309e:	d124      	bne.n	80130ea <_dtoa_r+0x662>
 80130a0:	4bac      	ldr	r3, [pc, #688]	@ (8013354 <_dtoa_r+0x8cc>)
 80130a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80130a6:	f7ed f8f1 	bl	800028c <__adddf3>
 80130aa:	4602      	mov	r2, r0
 80130ac:	460b      	mov	r3, r1
 80130ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130b2:	f7ed fd31 	bl	8000b18 <__aeabi_dcmpgt>
 80130b6:	2800      	cmp	r0, #0
 80130b8:	d145      	bne.n	8013146 <_dtoa_r+0x6be>
 80130ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80130be:	49a5      	ldr	r1, [pc, #660]	@ (8013354 <_dtoa_r+0x8cc>)
 80130c0:	2000      	movs	r0, #0
 80130c2:	f7ed f8e1 	bl	8000288 <__aeabi_dsub>
 80130c6:	4602      	mov	r2, r0
 80130c8:	460b      	mov	r3, r1
 80130ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130ce:	f7ed fd05 	bl	8000adc <__aeabi_dcmplt>
 80130d2:	2800      	cmp	r0, #0
 80130d4:	f43f aef5 	beq.w	8012ec2 <_dtoa_r+0x43a>
 80130d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80130da:	1e73      	subs	r3, r6, #1
 80130dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80130de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80130e2:	2b30      	cmp	r3, #48	@ 0x30
 80130e4:	d0f8      	beq.n	80130d8 <_dtoa_r+0x650>
 80130e6:	9f04      	ldr	r7, [sp, #16]
 80130e8:	e73e      	b.n	8012f68 <_dtoa_r+0x4e0>
 80130ea:	4b9b      	ldr	r3, [pc, #620]	@ (8013358 <_dtoa_r+0x8d0>)
 80130ec:	f7ed fa84 	bl	80005f8 <__aeabi_dmul>
 80130f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130f4:	e7bc      	b.n	8013070 <_dtoa_r+0x5e8>
 80130f6:	d10c      	bne.n	8013112 <_dtoa_r+0x68a>
 80130f8:	4b98      	ldr	r3, [pc, #608]	@ (801335c <_dtoa_r+0x8d4>)
 80130fa:	2200      	movs	r2, #0
 80130fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013100:	f7ed fa7a 	bl	80005f8 <__aeabi_dmul>
 8013104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013108:	f7ed fcfc 	bl	8000b04 <__aeabi_dcmpge>
 801310c:	2800      	cmp	r0, #0
 801310e:	f000 8157 	beq.w	80133c0 <_dtoa_r+0x938>
 8013112:	2400      	movs	r4, #0
 8013114:	4625      	mov	r5, r4
 8013116:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013118:	43db      	mvns	r3, r3
 801311a:	9304      	str	r3, [sp, #16]
 801311c:	4656      	mov	r6, sl
 801311e:	2700      	movs	r7, #0
 8013120:	4621      	mov	r1, r4
 8013122:	4658      	mov	r0, fp
 8013124:	f000 fbb4 	bl	8013890 <_Bfree>
 8013128:	2d00      	cmp	r5, #0
 801312a:	d0dc      	beq.n	80130e6 <_dtoa_r+0x65e>
 801312c:	b12f      	cbz	r7, 801313a <_dtoa_r+0x6b2>
 801312e:	42af      	cmp	r7, r5
 8013130:	d003      	beq.n	801313a <_dtoa_r+0x6b2>
 8013132:	4639      	mov	r1, r7
 8013134:	4658      	mov	r0, fp
 8013136:	f000 fbab 	bl	8013890 <_Bfree>
 801313a:	4629      	mov	r1, r5
 801313c:	4658      	mov	r0, fp
 801313e:	f000 fba7 	bl	8013890 <_Bfree>
 8013142:	e7d0      	b.n	80130e6 <_dtoa_r+0x65e>
 8013144:	9704      	str	r7, [sp, #16]
 8013146:	4633      	mov	r3, r6
 8013148:	461e      	mov	r6, r3
 801314a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801314e:	2a39      	cmp	r2, #57	@ 0x39
 8013150:	d107      	bne.n	8013162 <_dtoa_r+0x6da>
 8013152:	459a      	cmp	sl, r3
 8013154:	d1f8      	bne.n	8013148 <_dtoa_r+0x6c0>
 8013156:	9a04      	ldr	r2, [sp, #16]
 8013158:	3201      	adds	r2, #1
 801315a:	9204      	str	r2, [sp, #16]
 801315c:	2230      	movs	r2, #48	@ 0x30
 801315e:	f88a 2000 	strb.w	r2, [sl]
 8013162:	781a      	ldrb	r2, [r3, #0]
 8013164:	3201      	adds	r2, #1
 8013166:	701a      	strb	r2, [r3, #0]
 8013168:	e7bd      	b.n	80130e6 <_dtoa_r+0x65e>
 801316a:	4b7b      	ldr	r3, [pc, #492]	@ (8013358 <_dtoa_r+0x8d0>)
 801316c:	2200      	movs	r2, #0
 801316e:	f7ed fa43 	bl	80005f8 <__aeabi_dmul>
 8013172:	2200      	movs	r2, #0
 8013174:	2300      	movs	r3, #0
 8013176:	4604      	mov	r4, r0
 8013178:	460d      	mov	r5, r1
 801317a:	f7ed fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 801317e:	2800      	cmp	r0, #0
 8013180:	f43f aebb 	beq.w	8012efa <_dtoa_r+0x472>
 8013184:	e6f0      	b.n	8012f68 <_dtoa_r+0x4e0>
 8013186:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013188:	2a00      	cmp	r2, #0
 801318a:	f000 80db 	beq.w	8013344 <_dtoa_r+0x8bc>
 801318e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013190:	2a01      	cmp	r2, #1
 8013192:	f300 80bf 	bgt.w	8013314 <_dtoa_r+0x88c>
 8013196:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013198:	2a00      	cmp	r2, #0
 801319a:	f000 80b7 	beq.w	801330c <_dtoa_r+0x884>
 801319e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80131a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80131a4:	4646      	mov	r6, r8
 80131a6:	9a08      	ldr	r2, [sp, #32]
 80131a8:	2101      	movs	r1, #1
 80131aa:	441a      	add	r2, r3
 80131ac:	4658      	mov	r0, fp
 80131ae:	4498      	add	r8, r3
 80131b0:	9208      	str	r2, [sp, #32]
 80131b2:	f000 fc21 	bl	80139f8 <__i2b>
 80131b6:	4605      	mov	r5, r0
 80131b8:	b15e      	cbz	r6, 80131d2 <_dtoa_r+0x74a>
 80131ba:	9b08      	ldr	r3, [sp, #32]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	dd08      	ble.n	80131d2 <_dtoa_r+0x74a>
 80131c0:	42b3      	cmp	r3, r6
 80131c2:	9a08      	ldr	r2, [sp, #32]
 80131c4:	bfa8      	it	ge
 80131c6:	4633      	movge	r3, r6
 80131c8:	eba8 0803 	sub.w	r8, r8, r3
 80131cc:	1af6      	subs	r6, r6, r3
 80131ce:	1ad3      	subs	r3, r2, r3
 80131d0:	9308      	str	r3, [sp, #32]
 80131d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131d4:	b1f3      	cbz	r3, 8013214 <_dtoa_r+0x78c>
 80131d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80131d8:	2b00      	cmp	r3, #0
 80131da:	f000 80b7 	beq.w	801334c <_dtoa_r+0x8c4>
 80131de:	b18c      	cbz	r4, 8013204 <_dtoa_r+0x77c>
 80131e0:	4629      	mov	r1, r5
 80131e2:	4622      	mov	r2, r4
 80131e4:	4658      	mov	r0, fp
 80131e6:	f000 fcc7 	bl	8013b78 <__pow5mult>
 80131ea:	464a      	mov	r2, r9
 80131ec:	4601      	mov	r1, r0
 80131ee:	4605      	mov	r5, r0
 80131f0:	4658      	mov	r0, fp
 80131f2:	f000 fc17 	bl	8013a24 <__multiply>
 80131f6:	4649      	mov	r1, r9
 80131f8:	9004      	str	r0, [sp, #16]
 80131fa:	4658      	mov	r0, fp
 80131fc:	f000 fb48 	bl	8013890 <_Bfree>
 8013200:	9b04      	ldr	r3, [sp, #16]
 8013202:	4699      	mov	r9, r3
 8013204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013206:	1b1a      	subs	r2, r3, r4
 8013208:	d004      	beq.n	8013214 <_dtoa_r+0x78c>
 801320a:	4649      	mov	r1, r9
 801320c:	4658      	mov	r0, fp
 801320e:	f000 fcb3 	bl	8013b78 <__pow5mult>
 8013212:	4681      	mov	r9, r0
 8013214:	2101      	movs	r1, #1
 8013216:	4658      	mov	r0, fp
 8013218:	f000 fbee 	bl	80139f8 <__i2b>
 801321c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801321e:	4604      	mov	r4, r0
 8013220:	2b00      	cmp	r3, #0
 8013222:	f000 81cf 	beq.w	80135c4 <_dtoa_r+0xb3c>
 8013226:	461a      	mov	r2, r3
 8013228:	4601      	mov	r1, r0
 801322a:	4658      	mov	r0, fp
 801322c:	f000 fca4 	bl	8013b78 <__pow5mult>
 8013230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013232:	2b01      	cmp	r3, #1
 8013234:	4604      	mov	r4, r0
 8013236:	f300 8095 	bgt.w	8013364 <_dtoa_r+0x8dc>
 801323a:	9b02      	ldr	r3, [sp, #8]
 801323c:	2b00      	cmp	r3, #0
 801323e:	f040 8087 	bne.w	8013350 <_dtoa_r+0x8c8>
 8013242:	9b03      	ldr	r3, [sp, #12]
 8013244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013248:	2b00      	cmp	r3, #0
 801324a:	f040 8089 	bne.w	8013360 <_dtoa_r+0x8d8>
 801324e:	9b03      	ldr	r3, [sp, #12]
 8013250:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013254:	0d1b      	lsrs	r3, r3, #20
 8013256:	051b      	lsls	r3, r3, #20
 8013258:	b12b      	cbz	r3, 8013266 <_dtoa_r+0x7de>
 801325a:	9b08      	ldr	r3, [sp, #32]
 801325c:	3301      	adds	r3, #1
 801325e:	9308      	str	r3, [sp, #32]
 8013260:	f108 0801 	add.w	r8, r8, #1
 8013264:	2301      	movs	r3, #1
 8013266:	930a      	str	r3, [sp, #40]	@ 0x28
 8013268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801326a:	2b00      	cmp	r3, #0
 801326c:	f000 81b0 	beq.w	80135d0 <_dtoa_r+0xb48>
 8013270:	6923      	ldr	r3, [r4, #16]
 8013272:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013276:	6918      	ldr	r0, [r3, #16]
 8013278:	f000 fb72 	bl	8013960 <__hi0bits>
 801327c:	f1c0 0020 	rsb	r0, r0, #32
 8013280:	9b08      	ldr	r3, [sp, #32]
 8013282:	4418      	add	r0, r3
 8013284:	f010 001f 	ands.w	r0, r0, #31
 8013288:	d077      	beq.n	801337a <_dtoa_r+0x8f2>
 801328a:	f1c0 0320 	rsb	r3, r0, #32
 801328e:	2b04      	cmp	r3, #4
 8013290:	dd6b      	ble.n	801336a <_dtoa_r+0x8e2>
 8013292:	9b08      	ldr	r3, [sp, #32]
 8013294:	f1c0 001c 	rsb	r0, r0, #28
 8013298:	4403      	add	r3, r0
 801329a:	4480      	add	r8, r0
 801329c:	4406      	add	r6, r0
 801329e:	9308      	str	r3, [sp, #32]
 80132a0:	f1b8 0f00 	cmp.w	r8, #0
 80132a4:	dd05      	ble.n	80132b2 <_dtoa_r+0x82a>
 80132a6:	4649      	mov	r1, r9
 80132a8:	4642      	mov	r2, r8
 80132aa:	4658      	mov	r0, fp
 80132ac:	f000 fcbe 	bl	8013c2c <__lshift>
 80132b0:	4681      	mov	r9, r0
 80132b2:	9b08      	ldr	r3, [sp, #32]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	dd05      	ble.n	80132c4 <_dtoa_r+0x83c>
 80132b8:	4621      	mov	r1, r4
 80132ba:	461a      	mov	r2, r3
 80132bc:	4658      	mov	r0, fp
 80132be:	f000 fcb5 	bl	8013c2c <__lshift>
 80132c2:	4604      	mov	r4, r0
 80132c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d059      	beq.n	801337e <_dtoa_r+0x8f6>
 80132ca:	4621      	mov	r1, r4
 80132cc:	4648      	mov	r0, r9
 80132ce:	f000 fd19 	bl	8013d04 <__mcmp>
 80132d2:	2800      	cmp	r0, #0
 80132d4:	da53      	bge.n	801337e <_dtoa_r+0x8f6>
 80132d6:	1e7b      	subs	r3, r7, #1
 80132d8:	9304      	str	r3, [sp, #16]
 80132da:	4649      	mov	r1, r9
 80132dc:	2300      	movs	r3, #0
 80132de:	220a      	movs	r2, #10
 80132e0:	4658      	mov	r0, fp
 80132e2:	f000 faf7 	bl	80138d4 <__multadd>
 80132e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80132e8:	4681      	mov	r9, r0
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	f000 8172 	beq.w	80135d4 <_dtoa_r+0xb4c>
 80132f0:	2300      	movs	r3, #0
 80132f2:	4629      	mov	r1, r5
 80132f4:	220a      	movs	r2, #10
 80132f6:	4658      	mov	r0, fp
 80132f8:	f000 faec 	bl	80138d4 <__multadd>
 80132fc:	9b00      	ldr	r3, [sp, #0]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	4605      	mov	r5, r0
 8013302:	dc67      	bgt.n	80133d4 <_dtoa_r+0x94c>
 8013304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013306:	2b02      	cmp	r3, #2
 8013308:	dc41      	bgt.n	801338e <_dtoa_r+0x906>
 801330a:	e063      	b.n	80133d4 <_dtoa_r+0x94c>
 801330c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801330e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013312:	e746      	b.n	80131a2 <_dtoa_r+0x71a>
 8013314:	9b07      	ldr	r3, [sp, #28]
 8013316:	1e5c      	subs	r4, r3, #1
 8013318:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801331a:	42a3      	cmp	r3, r4
 801331c:	bfbf      	itttt	lt
 801331e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013320:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8013322:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8013324:	1ae3      	sublt	r3, r4, r3
 8013326:	bfb4      	ite	lt
 8013328:	18d2      	addlt	r2, r2, r3
 801332a:	1b1c      	subge	r4, r3, r4
 801332c:	9b07      	ldr	r3, [sp, #28]
 801332e:	bfbc      	itt	lt
 8013330:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8013332:	2400      	movlt	r4, #0
 8013334:	2b00      	cmp	r3, #0
 8013336:	bfb5      	itete	lt
 8013338:	eba8 0603 	sublt.w	r6, r8, r3
 801333c:	9b07      	ldrge	r3, [sp, #28]
 801333e:	2300      	movlt	r3, #0
 8013340:	4646      	movge	r6, r8
 8013342:	e730      	b.n	80131a6 <_dtoa_r+0x71e>
 8013344:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013346:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013348:	4646      	mov	r6, r8
 801334a:	e735      	b.n	80131b8 <_dtoa_r+0x730>
 801334c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801334e:	e75c      	b.n	801320a <_dtoa_r+0x782>
 8013350:	2300      	movs	r3, #0
 8013352:	e788      	b.n	8013266 <_dtoa_r+0x7de>
 8013354:	3fe00000 	.word	0x3fe00000
 8013358:	40240000 	.word	0x40240000
 801335c:	40140000 	.word	0x40140000
 8013360:	9b02      	ldr	r3, [sp, #8]
 8013362:	e780      	b.n	8013266 <_dtoa_r+0x7de>
 8013364:	2300      	movs	r3, #0
 8013366:	930a      	str	r3, [sp, #40]	@ 0x28
 8013368:	e782      	b.n	8013270 <_dtoa_r+0x7e8>
 801336a:	d099      	beq.n	80132a0 <_dtoa_r+0x818>
 801336c:	9a08      	ldr	r2, [sp, #32]
 801336e:	331c      	adds	r3, #28
 8013370:	441a      	add	r2, r3
 8013372:	4498      	add	r8, r3
 8013374:	441e      	add	r6, r3
 8013376:	9208      	str	r2, [sp, #32]
 8013378:	e792      	b.n	80132a0 <_dtoa_r+0x818>
 801337a:	4603      	mov	r3, r0
 801337c:	e7f6      	b.n	801336c <_dtoa_r+0x8e4>
 801337e:	9b07      	ldr	r3, [sp, #28]
 8013380:	9704      	str	r7, [sp, #16]
 8013382:	2b00      	cmp	r3, #0
 8013384:	dc20      	bgt.n	80133c8 <_dtoa_r+0x940>
 8013386:	9300      	str	r3, [sp, #0]
 8013388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801338a:	2b02      	cmp	r3, #2
 801338c:	dd1e      	ble.n	80133cc <_dtoa_r+0x944>
 801338e:	9b00      	ldr	r3, [sp, #0]
 8013390:	2b00      	cmp	r3, #0
 8013392:	f47f aec0 	bne.w	8013116 <_dtoa_r+0x68e>
 8013396:	4621      	mov	r1, r4
 8013398:	2205      	movs	r2, #5
 801339a:	4658      	mov	r0, fp
 801339c:	f000 fa9a 	bl	80138d4 <__multadd>
 80133a0:	4601      	mov	r1, r0
 80133a2:	4604      	mov	r4, r0
 80133a4:	4648      	mov	r0, r9
 80133a6:	f000 fcad 	bl	8013d04 <__mcmp>
 80133aa:	2800      	cmp	r0, #0
 80133ac:	f77f aeb3 	ble.w	8013116 <_dtoa_r+0x68e>
 80133b0:	4656      	mov	r6, sl
 80133b2:	2331      	movs	r3, #49	@ 0x31
 80133b4:	f806 3b01 	strb.w	r3, [r6], #1
 80133b8:	9b04      	ldr	r3, [sp, #16]
 80133ba:	3301      	adds	r3, #1
 80133bc:	9304      	str	r3, [sp, #16]
 80133be:	e6ae      	b.n	801311e <_dtoa_r+0x696>
 80133c0:	9c07      	ldr	r4, [sp, #28]
 80133c2:	9704      	str	r7, [sp, #16]
 80133c4:	4625      	mov	r5, r4
 80133c6:	e7f3      	b.n	80133b0 <_dtoa_r+0x928>
 80133c8:	9b07      	ldr	r3, [sp, #28]
 80133ca:	9300      	str	r3, [sp, #0]
 80133cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	f000 8104 	beq.w	80135dc <_dtoa_r+0xb54>
 80133d4:	2e00      	cmp	r6, #0
 80133d6:	dd05      	ble.n	80133e4 <_dtoa_r+0x95c>
 80133d8:	4629      	mov	r1, r5
 80133da:	4632      	mov	r2, r6
 80133dc:	4658      	mov	r0, fp
 80133de:	f000 fc25 	bl	8013c2c <__lshift>
 80133e2:	4605      	mov	r5, r0
 80133e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d05a      	beq.n	80134a0 <_dtoa_r+0xa18>
 80133ea:	6869      	ldr	r1, [r5, #4]
 80133ec:	4658      	mov	r0, fp
 80133ee:	f000 fa0f 	bl	8013810 <_Balloc>
 80133f2:	4606      	mov	r6, r0
 80133f4:	b928      	cbnz	r0, 8013402 <_dtoa_r+0x97a>
 80133f6:	4b84      	ldr	r3, [pc, #528]	@ (8013608 <_dtoa_r+0xb80>)
 80133f8:	4602      	mov	r2, r0
 80133fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80133fe:	f7ff bb5a 	b.w	8012ab6 <_dtoa_r+0x2e>
 8013402:	692a      	ldr	r2, [r5, #16]
 8013404:	3202      	adds	r2, #2
 8013406:	0092      	lsls	r2, r2, #2
 8013408:	f105 010c 	add.w	r1, r5, #12
 801340c:	300c      	adds	r0, #12
 801340e:	f7ff faa2 	bl	8012956 <memcpy>
 8013412:	2201      	movs	r2, #1
 8013414:	4631      	mov	r1, r6
 8013416:	4658      	mov	r0, fp
 8013418:	f000 fc08 	bl	8013c2c <__lshift>
 801341c:	f10a 0301 	add.w	r3, sl, #1
 8013420:	9307      	str	r3, [sp, #28]
 8013422:	9b00      	ldr	r3, [sp, #0]
 8013424:	4453      	add	r3, sl
 8013426:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013428:	9b02      	ldr	r3, [sp, #8]
 801342a:	f003 0301 	and.w	r3, r3, #1
 801342e:	462f      	mov	r7, r5
 8013430:	930a      	str	r3, [sp, #40]	@ 0x28
 8013432:	4605      	mov	r5, r0
 8013434:	9b07      	ldr	r3, [sp, #28]
 8013436:	4621      	mov	r1, r4
 8013438:	3b01      	subs	r3, #1
 801343a:	4648      	mov	r0, r9
 801343c:	9300      	str	r3, [sp, #0]
 801343e:	f7ff fa98 	bl	8012972 <quorem>
 8013442:	4639      	mov	r1, r7
 8013444:	9002      	str	r0, [sp, #8]
 8013446:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801344a:	4648      	mov	r0, r9
 801344c:	f000 fc5a 	bl	8013d04 <__mcmp>
 8013450:	462a      	mov	r2, r5
 8013452:	9008      	str	r0, [sp, #32]
 8013454:	4621      	mov	r1, r4
 8013456:	4658      	mov	r0, fp
 8013458:	f000 fc70 	bl	8013d3c <__mdiff>
 801345c:	68c2      	ldr	r2, [r0, #12]
 801345e:	4606      	mov	r6, r0
 8013460:	bb02      	cbnz	r2, 80134a4 <_dtoa_r+0xa1c>
 8013462:	4601      	mov	r1, r0
 8013464:	4648      	mov	r0, r9
 8013466:	f000 fc4d 	bl	8013d04 <__mcmp>
 801346a:	4602      	mov	r2, r0
 801346c:	4631      	mov	r1, r6
 801346e:	4658      	mov	r0, fp
 8013470:	920e      	str	r2, [sp, #56]	@ 0x38
 8013472:	f000 fa0d 	bl	8013890 <_Bfree>
 8013476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013478:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801347a:	9e07      	ldr	r6, [sp, #28]
 801347c:	ea43 0102 	orr.w	r1, r3, r2
 8013480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013482:	4319      	orrs	r1, r3
 8013484:	d110      	bne.n	80134a8 <_dtoa_r+0xa20>
 8013486:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801348a:	d029      	beq.n	80134e0 <_dtoa_r+0xa58>
 801348c:	9b08      	ldr	r3, [sp, #32]
 801348e:	2b00      	cmp	r3, #0
 8013490:	dd02      	ble.n	8013498 <_dtoa_r+0xa10>
 8013492:	9b02      	ldr	r3, [sp, #8]
 8013494:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013498:	9b00      	ldr	r3, [sp, #0]
 801349a:	f883 8000 	strb.w	r8, [r3]
 801349e:	e63f      	b.n	8013120 <_dtoa_r+0x698>
 80134a0:	4628      	mov	r0, r5
 80134a2:	e7bb      	b.n	801341c <_dtoa_r+0x994>
 80134a4:	2201      	movs	r2, #1
 80134a6:	e7e1      	b.n	801346c <_dtoa_r+0x9e4>
 80134a8:	9b08      	ldr	r3, [sp, #32]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	db04      	blt.n	80134b8 <_dtoa_r+0xa30>
 80134ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80134b0:	430b      	orrs	r3, r1
 80134b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80134b4:	430b      	orrs	r3, r1
 80134b6:	d120      	bne.n	80134fa <_dtoa_r+0xa72>
 80134b8:	2a00      	cmp	r2, #0
 80134ba:	dded      	ble.n	8013498 <_dtoa_r+0xa10>
 80134bc:	4649      	mov	r1, r9
 80134be:	2201      	movs	r2, #1
 80134c0:	4658      	mov	r0, fp
 80134c2:	f000 fbb3 	bl	8013c2c <__lshift>
 80134c6:	4621      	mov	r1, r4
 80134c8:	4681      	mov	r9, r0
 80134ca:	f000 fc1b 	bl	8013d04 <__mcmp>
 80134ce:	2800      	cmp	r0, #0
 80134d0:	dc03      	bgt.n	80134da <_dtoa_r+0xa52>
 80134d2:	d1e1      	bne.n	8013498 <_dtoa_r+0xa10>
 80134d4:	f018 0f01 	tst.w	r8, #1
 80134d8:	d0de      	beq.n	8013498 <_dtoa_r+0xa10>
 80134da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80134de:	d1d8      	bne.n	8013492 <_dtoa_r+0xa0a>
 80134e0:	9a00      	ldr	r2, [sp, #0]
 80134e2:	2339      	movs	r3, #57	@ 0x39
 80134e4:	7013      	strb	r3, [r2, #0]
 80134e6:	4633      	mov	r3, r6
 80134e8:	461e      	mov	r6, r3
 80134ea:	3b01      	subs	r3, #1
 80134ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80134f0:	2a39      	cmp	r2, #57	@ 0x39
 80134f2:	d052      	beq.n	801359a <_dtoa_r+0xb12>
 80134f4:	3201      	adds	r2, #1
 80134f6:	701a      	strb	r2, [r3, #0]
 80134f8:	e612      	b.n	8013120 <_dtoa_r+0x698>
 80134fa:	2a00      	cmp	r2, #0
 80134fc:	dd07      	ble.n	801350e <_dtoa_r+0xa86>
 80134fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013502:	d0ed      	beq.n	80134e0 <_dtoa_r+0xa58>
 8013504:	9a00      	ldr	r2, [sp, #0]
 8013506:	f108 0301 	add.w	r3, r8, #1
 801350a:	7013      	strb	r3, [r2, #0]
 801350c:	e608      	b.n	8013120 <_dtoa_r+0x698>
 801350e:	9b07      	ldr	r3, [sp, #28]
 8013510:	9a07      	ldr	r2, [sp, #28]
 8013512:	f803 8c01 	strb.w	r8, [r3, #-1]
 8013516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013518:	4293      	cmp	r3, r2
 801351a:	d028      	beq.n	801356e <_dtoa_r+0xae6>
 801351c:	4649      	mov	r1, r9
 801351e:	2300      	movs	r3, #0
 8013520:	220a      	movs	r2, #10
 8013522:	4658      	mov	r0, fp
 8013524:	f000 f9d6 	bl	80138d4 <__multadd>
 8013528:	42af      	cmp	r7, r5
 801352a:	4681      	mov	r9, r0
 801352c:	f04f 0300 	mov.w	r3, #0
 8013530:	f04f 020a 	mov.w	r2, #10
 8013534:	4639      	mov	r1, r7
 8013536:	4658      	mov	r0, fp
 8013538:	d107      	bne.n	801354a <_dtoa_r+0xac2>
 801353a:	f000 f9cb 	bl	80138d4 <__multadd>
 801353e:	4607      	mov	r7, r0
 8013540:	4605      	mov	r5, r0
 8013542:	9b07      	ldr	r3, [sp, #28]
 8013544:	3301      	adds	r3, #1
 8013546:	9307      	str	r3, [sp, #28]
 8013548:	e774      	b.n	8013434 <_dtoa_r+0x9ac>
 801354a:	f000 f9c3 	bl	80138d4 <__multadd>
 801354e:	4629      	mov	r1, r5
 8013550:	4607      	mov	r7, r0
 8013552:	2300      	movs	r3, #0
 8013554:	220a      	movs	r2, #10
 8013556:	4658      	mov	r0, fp
 8013558:	f000 f9bc 	bl	80138d4 <__multadd>
 801355c:	4605      	mov	r5, r0
 801355e:	e7f0      	b.n	8013542 <_dtoa_r+0xaba>
 8013560:	9b00      	ldr	r3, [sp, #0]
 8013562:	2b00      	cmp	r3, #0
 8013564:	bfcc      	ite	gt
 8013566:	461e      	movgt	r6, r3
 8013568:	2601      	movle	r6, #1
 801356a:	4456      	add	r6, sl
 801356c:	2700      	movs	r7, #0
 801356e:	4649      	mov	r1, r9
 8013570:	2201      	movs	r2, #1
 8013572:	4658      	mov	r0, fp
 8013574:	f000 fb5a 	bl	8013c2c <__lshift>
 8013578:	4621      	mov	r1, r4
 801357a:	4681      	mov	r9, r0
 801357c:	f000 fbc2 	bl	8013d04 <__mcmp>
 8013580:	2800      	cmp	r0, #0
 8013582:	dcb0      	bgt.n	80134e6 <_dtoa_r+0xa5e>
 8013584:	d102      	bne.n	801358c <_dtoa_r+0xb04>
 8013586:	f018 0f01 	tst.w	r8, #1
 801358a:	d1ac      	bne.n	80134e6 <_dtoa_r+0xa5e>
 801358c:	4633      	mov	r3, r6
 801358e:	461e      	mov	r6, r3
 8013590:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013594:	2a30      	cmp	r2, #48	@ 0x30
 8013596:	d0fa      	beq.n	801358e <_dtoa_r+0xb06>
 8013598:	e5c2      	b.n	8013120 <_dtoa_r+0x698>
 801359a:	459a      	cmp	sl, r3
 801359c:	d1a4      	bne.n	80134e8 <_dtoa_r+0xa60>
 801359e:	9b04      	ldr	r3, [sp, #16]
 80135a0:	3301      	adds	r3, #1
 80135a2:	9304      	str	r3, [sp, #16]
 80135a4:	2331      	movs	r3, #49	@ 0x31
 80135a6:	f88a 3000 	strb.w	r3, [sl]
 80135aa:	e5b9      	b.n	8013120 <_dtoa_r+0x698>
 80135ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80135ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801360c <_dtoa_r+0xb84>
 80135b2:	b11b      	cbz	r3, 80135bc <_dtoa_r+0xb34>
 80135b4:	f10a 0308 	add.w	r3, sl, #8
 80135b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80135ba:	6013      	str	r3, [r2, #0]
 80135bc:	4650      	mov	r0, sl
 80135be:	b019      	add	sp, #100	@ 0x64
 80135c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135c6:	2b01      	cmp	r3, #1
 80135c8:	f77f ae37 	ble.w	801323a <_dtoa_r+0x7b2>
 80135cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80135ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80135d0:	2001      	movs	r0, #1
 80135d2:	e655      	b.n	8013280 <_dtoa_r+0x7f8>
 80135d4:	9b00      	ldr	r3, [sp, #0]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	f77f aed6 	ble.w	8013388 <_dtoa_r+0x900>
 80135dc:	4656      	mov	r6, sl
 80135de:	4621      	mov	r1, r4
 80135e0:	4648      	mov	r0, r9
 80135e2:	f7ff f9c6 	bl	8012972 <quorem>
 80135e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80135ea:	f806 8b01 	strb.w	r8, [r6], #1
 80135ee:	9b00      	ldr	r3, [sp, #0]
 80135f0:	eba6 020a 	sub.w	r2, r6, sl
 80135f4:	4293      	cmp	r3, r2
 80135f6:	ddb3      	ble.n	8013560 <_dtoa_r+0xad8>
 80135f8:	4649      	mov	r1, r9
 80135fa:	2300      	movs	r3, #0
 80135fc:	220a      	movs	r2, #10
 80135fe:	4658      	mov	r0, fp
 8013600:	f000 f968 	bl	80138d4 <__multadd>
 8013604:	4681      	mov	r9, r0
 8013606:	e7ea      	b.n	80135de <_dtoa_r+0xb56>
 8013608:	080162e0 	.word	0x080162e0
 801360c:	08016264 	.word	0x08016264

08013610 <_free_r>:
 8013610:	b538      	push	{r3, r4, r5, lr}
 8013612:	4605      	mov	r5, r0
 8013614:	2900      	cmp	r1, #0
 8013616:	d041      	beq.n	801369c <_free_r+0x8c>
 8013618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801361c:	1f0c      	subs	r4, r1, #4
 801361e:	2b00      	cmp	r3, #0
 8013620:	bfb8      	it	lt
 8013622:	18e4      	addlt	r4, r4, r3
 8013624:	f000 f8e8 	bl	80137f8 <__malloc_lock>
 8013628:	4a1d      	ldr	r2, [pc, #116]	@ (80136a0 <_free_r+0x90>)
 801362a:	6813      	ldr	r3, [r2, #0]
 801362c:	b933      	cbnz	r3, 801363c <_free_r+0x2c>
 801362e:	6063      	str	r3, [r4, #4]
 8013630:	6014      	str	r4, [r2, #0]
 8013632:	4628      	mov	r0, r5
 8013634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013638:	f000 b8e4 	b.w	8013804 <__malloc_unlock>
 801363c:	42a3      	cmp	r3, r4
 801363e:	d908      	bls.n	8013652 <_free_r+0x42>
 8013640:	6820      	ldr	r0, [r4, #0]
 8013642:	1821      	adds	r1, r4, r0
 8013644:	428b      	cmp	r3, r1
 8013646:	bf01      	itttt	eq
 8013648:	6819      	ldreq	r1, [r3, #0]
 801364a:	685b      	ldreq	r3, [r3, #4]
 801364c:	1809      	addeq	r1, r1, r0
 801364e:	6021      	streq	r1, [r4, #0]
 8013650:	e7ed      	b.n	801362e <_free_r+0x1e>
 8013652:	461a      	mov	r2, r3
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	b10b      	cbz	r3, 801365c <_free_r+0x4c>
 8013658:	42a3      	cmp	r3, r4
 801365a:	d9fa      	bls.n	8013652 <_free_r+0x42>
 801365c:	6811      	ldr	r1, [r2, #0]
 801365e:	1850      	adds	r0, r2, r1
 8013660:	42a0      	cmp	r0, r4
 8013662:	d10b      	bne.n	801367c <_free_r+0x6c>
 8013664:	6820      	ldr	r0, [r4, #0]
 8013666:	4401      	add	r1, r0
 8013668:	1850      	adds	r0, r2, r1
 801366a:	4283      	cmp	r3, r0
 801366c:	6011      	str	r1, [r2, #0]
 801366e:	d1e0      	bne.n	8013632 <_free_r+0x22>
 8013670:	6818      	ldr	r0, [r3, #0]
 8013672:	685b      	ldr	r3, [r3, #4]
 8013674:	6053      	str	r3, [r2, #4]
 8013676:	4408      	add	r0, r1
 8013678:	6010      	str	r0, [r2, #0]
 801367a:	e7da      	b.n	8013632 <_free_r+0x22>
 801367c:	d902      	bls.n	8013684 <_free_r+0x74>
 801367e:	230c      	movs	r3, #12
 8013680:	602b      	str	r3, [r5, #0]
 8013682:	e7d6      	b.n	8013632 <_free_r+0x22>
 8013684:	6820      	ldr	r0, [r4, #0]
 8013686:	1821      	adds	r1, r4, r0
 8013688:	428b      	cmp	r3, r1
 801368a:	bf04      	itt	eq
 801368c:	6819      	ldreq	r1, [r3, #0]
 801368e:	685b      	ldreq	r3, [r3, #4]
 8013690:	6063      	str	r3, [r4, #4]
 8013692:	bf04      	itt	eq
 8013694:	1809      	addeq	r1, r1, r0
 8013696:	6021      	streq	r1, [r4, #0]
 8013698:	6054      	str	r4, [r2, #4]
 801369a:	e7ca      	b.n	8013632 <_free_r+0x22>
 801369c:	bd38      	pop	{r3, r4, r5, pc}
 801369e:	bf00      	nop
 80136a0:	20008f3c 	.word	0x20008f3c

080136a4 <malloc>:
 80136a4:	4b02      	ldr	r3, [pc, #8]	@ (80136b0 <malloc+0xc>)
 80136a6:	4601      	mov	r1, r0
 80136a8:	6818      	ldr	r0, [r3, #0]
 80136aa:	f000 b825 	b.w	80136f8 <_malloc_r>
 80136ae:	bf00      	nop
 80136b0:	20000044 	.word	0x20000044

080136b4 <sbrk_aligned>:
 80136b4:	b570      	push	{r4, r5, r6, lr}
 80136b6:	4e0f      	ldr	r6, [pc, #60]	@ (80136f4 <sbrk_aligned+0x40>)
 80136b8:	460c      	mov	r4, r1
 80136ba:	6831      	ldr	r1, [r6, #0]
 80136bc:	4605      	mov	r5, r0
 80136be:	b911      	cbnz	r1, 80136c6 <sbrk_aligned+0x12>
 80136c0:	f000 fe46 	bl	8014350 <_sbrk_r>
 80136c4:	6030      	str	r0, [r6, #0]
 80136c6:	4621      	mov	r1, r4
 80136c8:	4628      	mov	r0, r5
 80136ca:	f000 fe41 	bl	8014350 <_sbrk_r>
 80136ce:	1c43      	adds	r3, r0, #1
 80136d0:	d103      	bne.n	80136da <sbrk_aligned+0x26>
 80136d2:	f04f 34ff 	mov.w	r4, #4294967295
 80136d6:	4620      	mov	r0, r4
 80136d8:	bd70      	pop	{r4, r5, r6, pc}
 80136da:	1cc4      	adds	r4, r0, #3
 80136dc:	f024 0403 	bic.w	r4, r4, #3
 80136e0:	42a0      	cmp	r0, r4
 80136e2:	d0f8      	beq.n	80136d6 <sbrk_aligned+0x22>
 80136e4:	1a21      	subs	r1, r4, r0
 80136e6:	4628      	mov	r0, r5
 80136e8:	f000 fe32 	bl	8014350 <_sbrk_r>
 80136ec:	3001      	adds	r0, #1
 80136ee:	d1f2      	bne.n	80136d6 <sbrk_aligned+0x22>
 80136f0:	e7ef      	b.n	80136d2 <sbrk_aligned+0x1e>
 80136f2:	bf00      	nop
 80136f4:	20008f38 	.word	0x20008f38

080136f8 <_malloc_r>:
 80136f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136fc:	1ccd      	adds	r5, r1, #3
 80136fe:	f025 0503 	bic.w	r5, r5, #3
 8013702:	3508      	adds	r5, #8
 8013704:	2d0c      	cmp	r5, #12
 8013706:	bf38      	it	cc
 8013708:	250c      	movcc	r5, #12
 801370a:	2d00      	cmp	r5, #0
 801370c:	4606      	mov	r6, r0
 801370e:	db01      	blt.n	8013714 <_malloc_r+0x1c>
 8013710:	42a9      	cmp	r1, r5
 8013712:	d904      	bls.n	801371e <_malloc_r+0x26>
 8013714:	230c      	movs	r3, #12
 8013716:	6033      	str	r3, [r6, #0]
 8013718:	2000      	movs	r0, #0
 801371a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801371e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80137f4 <_malloc_r+0xfc>
 8013722:	f000 f869 	bl	80137f8 <__malloc_lock>
 8013726:	f8d8 3000 	ldr.w	r3, [r8]
 801372a:	461c      	mov	r4, r3
 801372c:	bb44      	cbnz	r4, 8013780 <_malloc_r+0x88>
 801372e:	4629      	mov	r1, r5
 8013730:	4630      	mov	r0, r6
 8013732:	f7ff ffbf 	bl	80136b4 <sbrk_aligned>
 8013736:	1c43      	adds	r3, r0, #1
 8013738:	4604      	mov	r4, r0
 801373a:	d158      	bne.n	80137ee <_malloc_r+0xf6>
 801373c:	f8d8 4000 	ldr.w	r4, [r8]
 8013740:	4627      	mov	r7, r4
 8013742:	2f00      	cmp	r7, #0
 8013744:	d143      	bne.n	80137ce <_malloc_r+0xd6>
 8013746:	2c00      	cmp	r4, #0
 8013748:	d04b      	beq.n	80137e2 <_malloc_r+0xea>
 801374a:	6823      	ldr	r3, [r4, #0]
 801374c:	4639      	mov	r1, r7
 801374e:	4630      	mov	r0, r6
 8013750:	eb04 0903 	add.w	r9, r4, r3
 8013754:	f000 fdfc 	bl	8014350 <_sbrk_r>
 8013758:	4581      	cmp	r9, r0
 801375a:	d142      	bne.n	80137e2 <_malloc_r+0xea>
 801375c:	6821      	ldr	r1, [r4, #0]
 801375e:	1a6d      	subs	r5, r5, r1
 8013760:	4629      	mov	r1, r5
 8013762:	4630      	mov	r0, r6
 8013764:	f7ff ffa6 	bl	80136b4 <sbrk_aligned>
 8013768:	3001      	adds	r0, #1
 801376a:	d03a      	beq.n	80137e2 <_malloc_r+0xea>
 801376c:	6823      	ldr	r3, [r4, #0]
 801376e:	442b      	add	r3, r5
 8013770:	6023      	str	r3, [r4, #0]
 8013772:	f8d8 3000 	ldr.w	r3, [r8]
 8013776:	685a      	ldr	r2, [r3, #4]
 8013778:	bb62      	cbnz	r2, 80137d4 <_malloc_r+0xdc>
 801377a:	f8c8 7000 	str.w	r7, [r8]
 801377e:	e00f      	b.n	80137a0 <_malloc_r+0xa8>
 8013780:	6822      	ldr	r2, [r4, #0]
 8013782:	1b52      	subs	r2, r2, r5
 8013784:	d420      	bmi.n	80137c8 <_malloc_r+0xd0>
 8013786:	2a0b      	cmp	r2, #11
 8013788:	d917      	bls.n	80137ba <_malloc_r+0xc2>
 801378a:	1961      	adds	r1, r4, r5
 801378c:	42a3      	cmp	r3, r4
 801378e:	6025      	str	r5, [r4, #0]
 8013790:	bf18      	it	ne
 8013792:	6059      	strne	r1, [r3, #4]
 8013794:	6863      	ldr	r3, [r4, #4]
 8013796:	bf08      	it	eq
 8013798:	f8c8 1000 	streq.w	r1, [r8]
 801379c:	5162      	str	r2, [r4, r5]
 801379e:	604b      	str	r3, [r1, #4]
 80137a0:	4630      	mov	r0, r6
 80137a2:	f000 f82f 	bl	8013804 <__malloc_unlock>
 80137a6:	f104 000b 	add.w	r0, r4, #11
 80137aa:	1d23      	adds	r3, r4, #4
 80137ac:	f020 0007 	bic.w	r0, r0, #7
 80137b0:	1ac2      	subs	r2, r0, r3
 80137b2:	bf1c      	itt	ne
 80137b4:	1a1b      	subne	r3, r3, r0
 80137b6:	50a3      	strne	r3, [r4, r2]
 80137b8:	e7af      	b.n	801371a <_malloc_r+0x22>
 80137ba:	6862      	ldr	r2, [r4, #4]
 80137bc:	42a3      	cmp	r3, r4
 80137be:	bf0c      	ite	eq
 80137c0:	f8c8 2000 	streq.w	r2, [r8]
 80137c4:	605a      	strne	r2, [r3, #4]
 80137c6:	e7eb      	b.n	80137a0 <_malloc_r+0xa8>
 80137c8:	4623      	mov	r3, r4
 80137ca:	6864      	ldr	r4, [r4, #4]
 80137cc:	e7ae      	b.n	801372c <_malloc_r+0x34>
 80137ce:	463c      	mov	r4, r7
 80137d0:	687f      	ldr	r7, [r7, #4]
 80137d2:	e7b6      	b.n	8013742 <_malloc_r+0x4a>
 80137d4:	461a      	mov	r2, r3
 80137d6:	685b      	ldr	r3, [r3, #4]
 80137d8:	42a3      	cmp	r3, r4
 80137da:	d1fb      	bne.n	80137d4 <_malloc_r+0xdc>
 80137dc:	2300      	movs	r3, #0
 80137de:	6053      	str	r3, [r2, #4]
 80137e0:	e7de      	b.n	80137a0 <_malloc_r+0xa8>
 80137e2:	230c      	movs	r3, #12
 80137e4:	6033      	str	r3, [r6, #0]
 80137e6:	4630      	mov	r0, r6
 80137e8:	f000 f80c 	bl	8013804 <__malloc_unlock>
 80137ec:	e794      	b.n	8013718 <_malloc_r+0x20>
 80137ee:	6005      	str	r5, [r0, #0]
 80137f0:	e7d6      	b.n	80137a0 <_malloc_r+0xa8>
 80137f2:	bf00      	nop
 80137f4:	20008f3c 	.word	0x20008f3c

080137f8 <__malloc_lock>:
 80137f8:	4801      	ldr	r0, [pc, #4]	@ (8013800 <__malloc_lock+0x8>)
 80137fa:	f7ff b8aa 	b.w	8012952 <__retarget_lock_acquire_recursive>
 80137fe:	bf00      	nop
 8013800:	20008f34 	.word	0x20008f34

08013804 <__malloc_unlock>:
 8013804:	4801      	ldr	r0, [pc, #4]	@ (801380c <__malloc_unlock+0x8>)
 8013806:	f7ff b8a5 	b.w	8012954 <__retarget_lock_release_recursive>
 801380a:	bf00      	nop
 801380c:	20008f34 	.word	0x20008f34

08013810 <_Balloc>:
 8013810:	b570      	push	{r4, r5, r6, lr}
 8013812:	69c6      	ldr	r6, [r0, #28]
 8013814:	4604      	mov	r4, r0
 8013816:	460d      	mov	r5, r1
 8013818:	b976      	cbnz	r6, 8013838 <_Balloc+0x28>
 801381a:	2010      	movs	r0, #16
 801381c:	f7ff ff42 	bl	80136a4 <malloc>
 8013820:	4602      	mov	r2, r0
 8013822:	61e0      	str	r0, [r4, #28]
 8013824:	b920      	cbnz	r0, 8013830 <_Balloc+0x20>
 8013826:	4b18      	ldr	r3, [pc, #96]	@ (8013888 <_Balloc+0x78>)
 8013828:	4818      	ldr	r0, [pc, #96]	@ (801388c <_Balloc+0x7c>)
 801382a:	216b      	movs	r1, #107	@ 0x6b
 801382c:	f000 fda0 	bl	8014370 <__assert_func>
 8013830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013834:	6006      	str	r6, [r0, #0]
 8013836:	60c6      	str	r6, [r0, #12]
 8013838:	69e6      	ldr	r6, [r4, #28]
 801383a:	68f3      	ldr	r3, [r6, #12]
 801383c:	b183      	cbz	r3, 8013860 <_Balloc+0x50>
 801383e:	69e3      	ldr	r3, [r4, #28]
 8013840:	68db      	ldr	r3, [r3, #12]
 8013842:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013846:	b9b8      	cbnz	r0, 8013878 <_Balloc+0x68>
 8013848:	2101      	movs	r1, #1
 801384a:	fa01 f605 	lsl.w	r6, r1, r5
 801384e:	1d72      	adds	r2, r6, #5
 8013850:	0092      	lsls	r2, r2, #2
 8013852:	4620      	mov	r0, r4
 8013854:	f000 fdaa 	bl	80143ac <_calloc_r>
 8013858:	b160      	cbz	r0, 8013874 <_Balloc+0x64>
 801385a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801385e:	e00e      	b.n	801387e <_Balloc+0x6e>
 8013860:	2221      	movs	r2, #33	@ 0x21
 8013862:	2104      	movs	r1, #4
 8013864:	4620      	mov	r0, r4
 8013866:	f000 fda1 	bl	80143ac <_calloc_r>
 801386a:	69e3      	ldr	r3, [r4, #28]
 801386c:	60f0      	str	r0, [r6, #12]
 801386e:	68db      	ldr	r3, [r3, #12]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d1e4      	bne.n	801383e <_Balloc+0x2e>
 8013874:	2000      	movs	r0, #0
 8013876:	bd70      	pop	{r4, r5, r6, pc}
 8013878:	6802      	ldr	r2, [r0, #0]
 801387a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801387e:	2300      	movs	r3, #0
 8013880:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013884:	e7f7      	b.n	8013876 <_Balloc+0x66>
 8013886:	bf00      	nop
 8013888:	08016271 	.word	0x08016271
 801388c:	080162f1 	.word	0x080162f1

08013890 <_Bfree>:
 8013890:	b570      	push	{r4, r5, r6, lr}
 8013892:	69c6      	ldr	r6, [r0, #28]
 8013894:	4605      	mov	r5, r0
 8013896:	460c      	mov	r4, r1
 8013898:	b976      	cbnz	r6, 80138b8 <_Bfree+0x28>
 801389a:	2010      	movs	r0, #16
 801389c:	f7ff ff02 	bl	80136a4 <malloc>
 80138a0:	4602      	mov	r2, r0
 80138a2:	61e8      	str	r0, [r5, #28]
 80138a4:	b920      	cbnz	r0, 80138b0 <_Bfree+0x20>
 80138a6:	4b09      	ldr	r3, [pc, #36]	@ (80138cc <_Bfree+0x3c>)
 80138a8:	4809      	ldr	r0, [pc, #36]	@ (80138d0 <_Bfree+0x40>)
 80138aa:	218f      	movs	r1, #143	@ 0x8f
 80138ac:	f000 fd60 	bl	8014370 <__assert_func>
 80138b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80138b4:	6006      	str	r6, [r0, #0]
 80138b6:	60c6      	str	r6, [r0, #12]
 80138b8:	b13c      	cbz	r4, 80138ca <_Bfree+0x3a>
 80138ba:	69eb      	ldr	r3, [r5, #28]
 80138bc:	6862      	ldr	r2, [r4, #4]
 80138be:	68db      	ldr	r3, [r3, #12]
 80138c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80138c4:	6021      	str	r1, [r4, #0]
 80138c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80138ca:	bd70      	pop	{r4, r5, r6, pc}
 80138cc:	08016271 	.word	0x08016271
 80138d0:	080162f1 	.word	0x080162f1

080138d4 <__multadd>:
 80138d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138d8:	690d      	ldr	r5, [r1, #16]
 80138da:	4607      	mov	r7, r0
 80138dc:	460c      	mov	r4, r1
 80138de:	461e      	mov	r6, r3
 80138e0:	f101 0c14 	add.w	ip, r1, #20
 80138e4:	2000      	movs	r0, #0
 80138e6:	f8dc 3000 	ldr.w	r3, [ip]
 80138ea:	b299      	uxth	r1, r3
 80138ec:	fb02 6101 	mla	r1, r2, r1, r6
 80138f0:	0c1e      	lsrs	r6, r3, #16
 80138f2:	0c0b      	lsrs	r3, r1, #16
 80138f4:	fb02 3306 	mla	r3, r2, r6, r3
 80138f8:	b289      	uxth	r1, r1
 80138fa:	3001      	adds	r0, #1
 80138fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013900:	4285      	cmp	r5, r0
 8013902:	f84c 1b04 	str.w	r1, [ip], #4
 8013906:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801390a:	dcec      	bgt.n	80138e6 <__multadd+0x12>
 801390c:	b30e      	cbz	r6, 8013952 <__multadd+0x7e>
 801390e:	68a3      	ldr	r3, [r4, #8]
 8013910:	42ab      	cmp	r3, r5
 8013912:	dc19      	bgt.n	8013948 <__multadd+0x74>
 8013914:	6861      	ldr	r1, [r4, #4]
 8013916:	4638      	mov	r0, r7
 8013918:	3101      	adds	r1, #1
 801391a:	f7ff ff79 	bl	8013810 <_Balloc>
 801391e:	4680      	mov	r8, r0
 8013920:	b928      	cbnz	r0, 801392e <__multadd+0x5a>
 8013922:	4602      	mov	r2, r0
 8013924:	4b0c      	ldr	r3, [pc, #48]	@ (8013958 <__multadd+0x84>)
 8013926:	480d      	ldr	r0, [pc, #52]	@ (801395c <__multadd+0x88>)
 8013928:	21ba      	movs	r1, #186	@ 0xba
 801392a:	f000 fd21 	bl	8014370 <__assert_func>
 801392e:	6922      	ldr	r2, [r4, #16]
 8013930:	3202      	adds	r2, #2
 8013932:	f104 010c 	add.w	r1, r4, #12
 8013936:	0092      	lsls	r2, r2, #2
 8013938:	300c      	adds	r0, #12
 801393a:	f7ff f80c 	bl	8012956 <memcpy>
 801393e:	4621      	mov	r1, r4
 8013940:	4638      	mov	r0, r7
 8013942:	f7ff ffa5 	bl	8013890 <_Bfree>
 8013946:	4644      	mov	r4, r8
 8013948:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801394c:	3501      	adds	r5, #1
 801394e:	615e      	str	r6, [r3, #20]
 8013950:	6125      	str	r5, [r4, #16]
 8013952:	4620      	mov	r0, r4
 8013954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013958:	080162e0 	.word	0x080162e0
 801395c:	080162f1 	.word	0x080162f1

08013960 <__hi0bits>:
 8013960:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013964:	4603      	mov	r3, r0
 8013966:	bf36      	itet	cc
 8013968:	0403      	lslcc	r3, r0, #16
 801396a:	2000      	movcs	r0, #0
 801396c:	2010      	movcc	r0, #16
 801396e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013972:	bf3c      	itt	cc
 8013974:	021b      	lslcc	r3, r3, #8
 8013976:	3008      	addcc	r0, #8
 8013978:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801397c:	bf3c      	itt	cc
 801397e:	011b      	lslcc	r3, r3, #4
 8013980:	3004      	addcc	r0, #4
 8013982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013986:	bf3c      	itt	cc
 8013988:	009b      	lslcc	r3, r3, #2
 801398a:	3002      	addcc	r0, #2
 801398c:	2b00      	cmp	r3, #0
 801398e:	db05      	blt.n	801399c <__hi0bits+0x3c>
 8013990:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013994:	f100 0001 	add.w	r0, r0, #1
 8013998:	bf08      	it	eq
 801399a:	2020      	moveq	r0, #32
 801399c:	4770      	bx	lr

0801399e <__lo0bits>:
 801399e:	6803      	ldr	r3, [r0, #0]
 80139a0:	4602      	mov	r2, r0
 80139a2:	f013 0007 	ands.w	r0, r3, #7
 80139a6:	d00b      	beq.n	80139c0 <__lo0bits+0x22>
 80139a8:	07d9      	lsls	r1, r3, #31
 80139aa:	d421      	bmi.n	80139f0 <__lo0bits+0x52>
 80139ac:	0798      	lsls	r0, r3, #30
 80139ae:	bf49      	itett	mi
 80139b0:	085b      	lsrmi	r3, r3, #1
 80139b2:	089b      	lsrpl	r3, r3, #2
 80139b4:	2001      	movmi	r0, #1
 80139b6:	6013      	strmi	r3, [r2, #0]
 80139b8:	bf5c      	itt	pl
 80139ba:	6013      	strpl	r3, [r2, #0]
 80139bc:	2002      	movpl	r0, #2
 80139be:	4770      	bx	lr
 80139c0:	b299      	uxth	r1, r3
 80139c2:	b909      	cbnz	r1, 80139c8 <__lo0bits+0x2a>
 80139c4:	0c1b      	lsrs	r3, r3, #16
 80139c6:	2010      	movs	r0, #16
 80139c8:	b2d9      	uxtb	r1, r3
 80139ca:	b909      	cbnz	r1, 80139d0 <__lo0bits+0x32>
 80139cc:	3008      	adds	r0, #8
 80139ce:	0a1b      	lsrs	r3, r3, #8
 80139d0:	0719      	lsls	r1, r3, #28
 80139d2:	bf04      	itt	eq
 80139d4:	091b      	lsreq	r3, r3, #4
 80139d6:	3004      	addeq	r0, #4
 80139d8:	0799      	lsls	r1, r3, #30
 80139da:	bf04      	itt	eq
 80139dc:	089b      	lsreq	r3, r3, #2
 80139de:	3002      	addeq	r0, #2
 80139e0:	07d9      	lsls	r1, r3, #31
 80139e2:	d403      	bmi.n	80139ec <__lo0bits+0x4e>
 80139e4:	085b      	lsrs	r3, r3, #1
 80139e6:	f100 0001 	add.w	r0, r0, #1
 80139ea:	d003      	beq.n	80139f4 <__lo0bits+0x56>
 80139ec:	6013      	str	r3, [r2, #0]
 80139ee:	4770      	bx	lr
 80139f0:	2000      	movs	r0, #0
 80139f2:	4770      	bx	lr
 80139f4:	2020      	movs	r0, #32
 80139f6:	4770      	bx	lr

080139f8 <__i2b>:
 80139f8:	b510      	push	{r4, lr}
 80139fa:	460c      	mov	r4, r1
 80139fc:	2101      	movs	r1, #1
 80139fe:	f7ff ff07 	bl	8013810 <_Balloc>
 8013a02:	4602      	mov	r2, r0
 8013a04:	b928      	cbnz	r0, 8013a12 <__i2b+0x1a>
 8013a06:	4b05      	ldr	r3, [pc, #20]	@ (8013a1c <__i2b+0x24>)
 8013a08:	4805      	ldr	r0, [pc, #20]	@ (8013a20 <__i2b+0x28>)
 8013a0a:	f240 1145 	movw	r1, #325	@ 0x145
 8013a0e:	f000 fcaf 	bl	8014370 <__assert_func>
 8013a12:	2301      	movs	r3, #1
 8013a14:	6144      	str	r4, [r0, #20]
 8013a16:	6103      	str	r3, [r0, #16]
 8013a18:	bd10      	pop	{r4, pc}
 8013a1a:	bf00      	nop
 8013a1c:	080162e0 	.word	0x080162e0
 8013a20:	080162f1 	.word	0x080162f1

08013a24 <__multiply>:
 8013a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a28:	4614      	mov	r4, r2
 8013a2a:	690a      	ldr	r2, [r1, #16]
 8013a2c:	6923      	ldr	r3, [r4, #16]
 8013a2e:	429a      	cmp	r2, r3
 8013a30:	bfa8      	it	ge
 8013a32:	4623      	movge	r3, r4
 8013a34:	460f      	mov	r7, r1
 8013a36:	bfa4      	itt	ge
 8013a38:	460c      	movge	r4, r1
 8013a3a:	461f      	movge	r7, r3
 8013a3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013a40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013a44:	68a3      	ldr	r3, [r4, #8]
 8013a46:	6861      	ldr	r1, [r4, #4]
 8013a48:	eb0a 0609 	add.w	r6, sl, r9
 8013a4c:	42b3      	cmp	r3, r6
 8013a4e:	b085      	sub	sp, #20
 8013a50:	bfb8      	it	lt
 8013a52:	3101      	addlt	r1, #1
 8013a54:	f7ff fedc 	bl	8013810 <_Balloc>
 8013a58:	b930      	cbnz	r0, 8013a68 <__multiply+0x44>
 8013a5a:	4602      	mov	r2, r0
 8013a5c:	4b44      	ldr	r3, [pc, #272]	@ (8013b70 <__multiply+0x14c>)
 8013a5e:	4845      	ldr	r0, [pc, #276]	@ (8013b74 <__multiply+0x150>)
 8013a60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013a64:	f000 fc84 	bl	8014370 <__assert_func>
 8013a68:	f100 0514 	add.w	r5, r0, #20
 8013a6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013a70:	462b      	mov	r3, r5
 8013a72:	2200      	movs	r2, #0
 8013a74:	4543      	cmp	r3, r8
 8013a76:	d321      	bcc.n	8013abc <__multiply+0x98>
 8013a78:	f107 0114 	add.w	r1, r7, #20
 8013a7c:	f104 0214 	add.w	r2, r4, #20
 8013a80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013a84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013a88:	9302      	str	r3, [sp, #8]
 8013a8a:	1b13      	subs	r3, r2, r4
 8013a8c:	3b15      	subs	r3, #21
 8013a8e:	f023 0303 	bic.w	r3, r3, #3
 8013a92:	3304      	adds	r3, #4
 8013a94:	f104 0715 	add.w	r7, r4, #21
 8013a98:	42ba      	cmp	r2, r7
 8013a9a:	bf38      	it	cc
 8013a9c:	2304      	movcc	r3, #4
 8013a9e:	9301      	str	r3, [sp, #4]
 8013aa0:	9b02      	ldr	r3, [sp, #8]
 8013aa2:	9103      	str	r1, [sp, #12]
 8013aa4:	428b      	cmp	r3, r1
 8013aa6:	d80c      	bhi.n	8013ac2 <__multiply+0x9e>
 8013aa8:	2e00      	cmp	r6, #0
 8013aaa:	dd03      	ble.n	8013ab4 <__multiply+0x90>
 8013aac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d05b      	beq.n	8013b6c <__multiply+0x148>
 8013ab4:	6106      	str	r6, [r0, #16]
 8013ab6:	b005      	add	sp, #20
 8013ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013abc:	f843 2b04 	str.w	r2, [r3], #4
 8013ac0:	e7d8      	b.n	8013a74 <__multiply+0x50>
 8013ac2:	f8b1 a000 	ldrh.w	sl, [r1]
 8013ac6:	f1ba 0f00 	cmp.w	sl, #0
 8013aca:	d024      	beq.n	8013b16 <__multiply+0xf2>
 8013acc:	f104 0e14 	add.w	lr, r4, #20
 8013ad0:	46a9      	mov	r9, r5
 8013ad2:	f04f 0c00 	mov.w	ip, #0
 8013ad6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013ada:	f8d9 3000 	ldr.w	r3, [r9]
 8013ade:	fa1f fb87 	uxth.w	fp, r7
 8013ae2:	b29b      	uxth	r3, r3
 8013ae4:	fb0a 330b 	mla	r3, sl, fp, r3
 8013ae8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013aec:	f8d9 7000 	ldr.w	r7, [r9]
 8013af0:	4463      	add	r3, ip
 8013af2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013af6:	fb0a c70b 	mla	r7, sl, fp, ip
 8013afa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013afe:	b29b      	uxth	r3, r3
 8013b00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013b04:	4572      	cmp	r2, lr
 8013b06:	f849 3b04 	str.w	r3, [r9], #4
 8013b0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013b0e:	d8e2      	bhi.n	8013ad6 <__multiply+0xb2>
 8013b10:	9b01      	ldr	r3, [sp, #4]
 8013b12:	f845 c003 	str.w	ip, [r5, r3]
 8013b16:	9b03      	ldr	r3, [sp, #12]
 8013b18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013b1c:	3104      	adds	r1, #4
 8013b1e:	f1b9 0f00 	cmp.w	r9, #0
 8013b22:	d021      	beq.n	8013b68 <__multiply+0x144>
 8013b24:	682b      	ldr	r3, [r5, #0]
 8013b26:	f104 0c14 	add.w	ip, r4, #20
 8013b2a:	46ae      	mov	lr, r5
 8013b2c:	f04f 0a00 	mov.w	sl, #0
 8013b30:	f8bc b000 	ldrh.w	fp, [ip]
 8013b34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013b38:	fb09 770b 	mla	r7, r9, fp, r7
 8013b3c:	4457      	add	r7, sl
 8013b3e:	b29b      	uxth	r3, r3
 8013b40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013b44:	f84e 3b04 	str.w	r3, [lr], #4
 8013b48:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013b4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013b50:	f8be 3000 	ldrh.w	r3, [lr]
 8013b54:	fb09 330a 	mla	r3, r9, sl, r3
 8013b58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013b5c:	4562      	cmp	r2, ip
 8013b5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013b62:	d8e5      	bhi.n	8013b30 <__multiply+0x10c>
 8013b64:	9f01      	ldr	r7, [sp, #4]
 8013b66:	51eb      	str	r3, [r5, r7]
 8013b68:	3504      	adds	r5, #4
 8013b6a:	e799      	b.n	8013aa0 <__multiply+0x7c>
 8013b6c:	3e01      	subs	r6, #1
 8013b6e:	e79b      	b.n	8013aa8 <__multiply+0x84>
 8013b70:	080162e0 	.word	0x080162e0
 8013b74:	080162f1 	.word	0x080162f1

08013b78 <__pow5mult>:
 8013b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b7c:	4615      	mov	r5, r2
 8013b7e:	f012 0203 	ands.w	r2, r2, #3
 8013b82:	4607      	mov	r7, r0
 8013b84:	460e      	mov	r6, r1
 8013b86:	d007      	beq.n	8013b98 <__pow5mult+0x20>
 8013b88:	4c25      	ldr	r4, [pc, #148]	@ (8013c20 <__pow5mult+0xa8>)
 8013b8a:	3a01      	subs	r2, #1
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013b92:	f7ff fe9f 	bl	80138d4 <__multadd>
 8013b96:	4606      	mov	r6, r0
 8013b98:	10ad      	asrs	r5, r5, #2
 8013b9a:	d03d      	beq.n	8013c18 <__pow5mult+0xa0>
 8013b9c:	69fc      	ldr	r4, [r7, #28]
 8013b9e:	b97c      	cbnz	r4, 8013bc0 <__pow5mult+0x48>
 8013ba0:	2010      	movs	r0, #16
 8013ba2:	f7ff fd7f 	bl	80136a4 <malloc>
 8013ba6:	4602      	mov	r2, r0
 8013ba8:	61f8      	str	r0, [r7, #28]
 8013baa:	b928      	cbnz	r0, 8013bb8 <__pow5mult+0x40>
 8013bac:	4b1d      	ldr	r3, [pc, #116]	@ (8013c24 <__pow5mult+0xac>)
 8013bae:	481e      	ldr	r0, [pc, #120]	@ (8013c28 <__pow5mult+0xb0>)
 8013bb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013bb4:	f000 fbdc 	bl	8014370 <__assert_func>
 8013bb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013bbc:	6004      	str	r4, [r0, #0]
 8013bbe:	60c4      	str	r4, [r0, #12]
 8013bc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013bc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013bc8:	b94c      	cbnz	r4, 8013bde <__pow5mult+0x66>
 8013bca:	f240 2171 	movw	r1, #625	@ 0x271
 8013bce:	4638      	mov	r0, r7
 8013bd0:	f7ff ff12 	bl	80139f8 <__i2b>
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8013bda:	4604      	mov	r4, r0
 8013bdc:	6003      	str	r3, [r0, #0]
 8013bde:	f04f 0900 	mov.w	r9, #0
 8013be2:	07eb      	lsls	r3, r5, #31
 8013be4:	d50a      	bpl.n	8013bfc <__pow5mult+0x84>
 8013be6:	4631      	mov	r1, r6
 8013be8:	4622      	mov	r2, r4
 8013bea:	4638      	mov	r0, r7
 8013bec:	f7ff ff1a 	bl	8013a24 <__multiply>
 8013bf0:	4631      	mov	r1, r6
 8013bf2:	4680      	mov	r8, r0
 8013bf4:	4638      	mov	r0, r7
 8013bf6:	f7ff fe4b 	bl	8013890 <_Bfree>
 8013bfa:	4646      	mov	r6, r8
 8013bfc:	106d      	asrs	r5, r5, #1
 8013bfe:	d00b      	beq.n	8013c18 <__pow5mult+0xa0>
 8013c00:	6820      	ldr	r0, [r4, #0]
 8013c02:	b938      	cbnz	r0, 8013c14 <__pow5mult+0x9c>
 8013c04:	4622      	mov	r2, r4
 8013c06:	4621      	mov	r1, r4
 8013c08:	4638      	mov	r0, r7
 8013c0a:	f7ff ff0b 	bl	8013a24 <__multiply>
 8013c0e:	6020      	str	r0, [r4, #0]
 8013c10:	f8c0 9000 	str.w	r9, [r0]
 8013c14:	4604      	mov	r4, r0
 8013c16:	e7e4      	b.n	8013be2 <__pow5mult+0x6a>
 8013c18:	4630      	mov	r0, r6
 8013c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c1e:	bf00      	nop
 8013c20:	0801634c 	.word	0x0801634c
 8013c24:	08016271 	.word	0x08016271
 8013c28:	080162f1 	.word	0x080162f1

08013c2c <__lshift>:
 8013c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c30:	460c      	mov	r4, r1
 8013c32:	6849      	ldr	r1, [r1, #4]
 8013c34:	6923      	ldr	r3, [r4, #16]
 8013c36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013c3a:	68a3      	ldr	r3, [r4, #8]
 8013c3c:	4607      	mov	r7, r0
 8013c3e:	4691      	mov	r9, r2
 8013c40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013c44:	f108 0601 	add.w	r6, r8, #1
 8013c48:	42b3      	cmp	r3, r6
 8013c4a:	db0b      	blt.n	8013c64 <__lshift+0x38>
 8013c4c:	4638      	mov	r0, r7
 8013c4e:	f7ff fddf 	bl	8013810 <_Balloc>
 8013c52:	4605      	mov	r5, r0
 8013c54:	b948      	cbnz	r0, 8013c6a <__lshift+0x3e>
 8013c56:	4602      	mov	r2, r0
 8013c58:	4b28      	ldr	r3, [pc, #160]	@ (8013cfc <__lshift+0xd0>)
 8013c5a:	4829      	ldr	r0, [pc, #164]	@ (8013d00 <__lshift+0xd4>)
 8013c5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013c60:	f000 fb86 	bl	8014370 <__assert_func>
 8013c64:	3101      	adds	r1, #1
 8013c66:	005b      	lsls	r3, r3, #1
 8013c68:	e7ee      	b.n	8013c48 <__lshift+0x1c>
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	f100 0114 	add.w	r1, r0, #20
 8013c70:	f100 0210 	add.w	r2, r0, #16
 8013c74:	4618      	mov	r0, r3
 8013c76:	4553      	cmp	r3, sl
 8013c78:	db33      	blt.n	8013ce2 <__lshift+0xb6>
 8013c7a:	6920      	ldr	r0, [r4, #16]
 8013c7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013c80:	f104 0314 	add.w	r3, r4, #20
 8013c84:	f019 091f 	ands.w	r9, r9, #31
 8013c88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013c8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013c90:	d02b      	beq.n	8013cea <__lshift+0xbe>
 8013c92:	f1c9 0e20 	rsb	lr, r9, #32
 8013c96:	468a      	mov	sl, r1
 8013c98:	2200      	movs	r2, #0
 8013c9a:	6818      	ldr	r0, [r3, #0]
 8013c9c:	fa00 f009 	lsl.w	r0, r0, r9
 8013ca0:	4310      	orrs	r0, r2
 8013ca2:	f84a 0b04 	str.w	r0, [sl], #4
 8013ca6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013caa:	459c      	cmp	ip, r3
 8013cac:	fa22 f20e 	lsr.w	r2, r2, lr
 8013cb0:	d8f3      	bhi.n	8013c9a <__lshift+0x6e>
 8013cb2:	ebac 0304 	sub.w	r3, ip, r4
 8013cb6:	3b15      	subs	r3, #21
 8013cb8:	f023 0303 	bic.w	r3, r3, #3
 8013cbc:	3304      	adds	r3, #4
 8013cbe:	f104 0015 	add.w	r0, r4, #21
 8013cc2:	4584      	cmp	ip, r0
 8013cc4:	bf38      	it	cc
 8013cc6:	2304      	movcc	r3, #4
 8013cc8:	50ca      	str	r2, [r1, r3]
 8013cca:	b10a      	cbz	r2, 8013cd0 <__lshift+0xa4>
 8013ccc:	f108 0602 	add.w	r6, r8, #2
 8013cd0:	3e01      	subs	r6, #1
 8013cd2:	4638      	mov	r0, r7
 8013cd4:	612e      	str	r6, [r5, #16]
 8013cd6:	4621      	mov	r1, r4
 8013cd8:	f7ff fdda 	bl	8013890 <_Bfree>
 8013cdc:	4628      	mov	r0, r5
 8013cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ce2:	f842 0f04 	str.w	r0, [r2, #4]!
 8013ce6:	3301      	adds	r3, #1
 8013ce8:	e7c5      	b.n	8013c76 <__lshift+0x4a>
 8013cea:	3904      	subs	r1, #4
 8013cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cf0:	f841 2f04 	str.w	r2, [r1, #4]!
 8013cf4:	459c      	cmp	ip, r3
 8013cf6:	d8f9      	bhi.n	8013cec <__lshift+0xc0>
 8013cf8:	e7ea      	b.n	8013cd0 <__lshift+0xa4>
 8013cfa:	bf00      	nop
 8013cfc:	080162e0 	.word	0x080162e0
 8013d00:	080162f1 	.word	0x080162f1

08013d04 <__mcmp>:
 8013d04:	690a      	ldr	r2, [r1, #16]
 8013d06:	4603      	mov	r3, r0
 8013d08:	6900      	ldr	r0, [r0, #16]
 8013d0a:	1a80      	subs	r0, r0, r2
 8013d0c:	b530      	push	{r4, r5, lr}
 8013d0e:	d10e      	bne.n	8013d2e <__mcmp+0x2a>
 8013d10:	3314      	adds	r3, #20
 8013d12:	3114      	adds	r1, #20
 8013d14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013d18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013d1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013d20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013d24:	4295      	cmp	r5, r2
 8013d26:	d003      	beq.n	8013d30 <__mcmp+0x2c>
 8013d28:	d205      	bcs.n	8013d36 <__mcmp+0x32>
 8013d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8013d2e:	bd30      	pop	{r4, r5, pc}
 8013d30:	42a3      	cmp	r3, r4
 8013d32:	d3f3      	bcc.n	8013d1c <__mcmp+0x18>
 8013d34:	e7fb      	b.n	8013d2e <__mcmp+0x2a>
 8013d36:	2001      	movs	r0, #1
 8013d38:	e7f9      	b.n	8013d2e <__mcmp+0x2a>
	...

08013d3c <__mdiff>:
 8013d3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d40:	4689      	mov	r9, r1
 8013d42:	4606      	mov	r6, r0
 8013d44:	4611      	mov	r1, r2
 8013d46:	4648      	mov	r0, r9
 8013d48:	4614      	mov	r4, r2
 8013d4a:	f7ff ffdb 	bl	8013d04 <__mcmp>
 8013d4e:	1e05      	subs	r5, r0, #0
 8013d50:	d112      	bne.n	8013d78 <__mdiff+0x3c>
 8013d52:	4629      	mov	r1, r5
 8013d54:	4630      	mov	r0, r6
 8013d56:	f7ff fd5b 	bl	8013810 <_Balloc>
 8013d5a:	4602      	mov	r2, r0
 8013d5c:	b928      	cbnz	r0, 8013d6a <__mdiff+0x2e>
 8013d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8013e5c <__mdiff+0x120>)
 8013d60:	f240 2137 	movw	r1, #567	@ 0x237
 8013d64:	483e      	ldr	r0, [pc, #248]	@ (8013e60 <__mdiff+0x124>)
 8013d66:	f000 fb03 	bl	8014370 <__assert_func>
 8013d6a:	2301      	movs	r3, #1
 8013d6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013d70:	4610      	mov	r0, r2
 8013d72:	b003      	add	sp, #12
 8013d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d78:	bfbc      	itt	lt
 8013d7a:	464b      	movlt	r3, r9
 8013d7c:	46a1      	movlt	r9, r4
 8013d7e:	4630      	mov	r0, r6
 8013d80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013d84:	bfba      	itte	lt
 8013d86:	461c      	movlt	r4, r3
 8013d88:	2501      	movlt	r5, #1
 8013d8a:	2500      	movge	r5, #0
 8013d8c:	f7ff fd40 	bl	8013810 <_Balloc>
 8013d90:	4602      	mov	r2, r0
 8013d92:	b918      	cbnz	r0, 8013d9c <__mdiff+0x60>
 8013d94:	4b31      	ldr	r3, [pc, #196]	@ (8013e5c <__mdiff+0x120>)
 8013d96:	f240 2145 	movw	r1, #581	@ 0x245
 8013d9a:	e7e3      	b.n	8013d64 <__mdiff+0x28>
 8013d9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013da0:	6926      	ldr	r6, [r4, #16]
 8013da2:	60c5      	str	r5, [r0, #12]
 8013da4:	f109 0310 	add.w	r3, r9, #16
 8013da8:	f109 0514 	add.w	r5, r9, #20
 8013dac:	f104 0e14 	add.w	lr, r4, #20
 8013db0:	f100 0b14 	add.w	fp, r0, #20
 8013db4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013db8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013dbc:	9301      	str	r3, [sp, #4]
 8013dbe:	46d9      	mov	r9, fp
 8013dc0:	f04f 0c00 	mov.w	ip, #0
 8013dc4:	9b01      	ldr	r3, [sp, #4]
 8013dc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013dca:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013dce:	9301      	str	r3, [sp, #4]
 8013dd0:	fa1f f38a 	uxth.w	r3, sl
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	b283      	uxth	r3, r0
 8013dd8:	1acb      	subs	r3, r1, r3
 8013dda:	0c00      	lsrs	r0, r0, #16
 8013ddc:	4463      	add	r3, ip
 8013dde:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013de2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013de6:	b29b      	uxth	r3, r3
 8013de8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013dec:	4576      	cmp	r6, lr
 8013dee:	f849 3b04 	str.w	r3, [r9], #4
 8013df2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013df6:	d8e5      	bhi.n	8013dc4 <__mdiff+0x88>
 8013df8:	1b33      	subs	r3, r6, r4
 8013dfa:	3b15      	subs	r3, #21
 8013dfc:	f023 0303 	bic.w	r3, r3, #3
 8013e00:	3415      	adds	r4, #21
 8013e02:	3304      	adds	r3, #4
 8013e04:	42a6      	cmp	r6, r4
 8013e06:	bf38      	it	cc
 8013e08:	2304      	movcc	r3, #4
 8013e0a:	441d      	add	r5, r3
 8013e0c:	445b      	add	r3, fp
 8013e0e:	461e      	mov	r6, r3
 8013e10:	462c      	mov	r4, r5
 8013e12:	4544      	cmp	r4, r8
 8013e14:	d30e      	bcc.n	8013e34 <__mdiff+0xf8>
 8013e16:	f108 0103 	add.w	r1, r8, #3
 8013e1a:	1b49      	subs	r1, r1, r5
 8013e1c:	f021 0103 	bic.w	r1, r1, #3
 8013e20:	3d03      	subs	r5, #3
 8013e22:	45a8      	cmp	r8, r5
 8013e24:	bf38      	it	cc
 8013e26:	2100      	movcc	r1, #0
 8013e28:	440b      	add	r3, r1
 8013e2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013e2e:	b191      	cbz	r1, 8013e56 <__mdiff+0x11a>
 8013e30:	6117      	str	r7, [r2, #16]
 8013e32:	e79d      	b.n	8013d70 <__mdiff+0x34>
 8013e34:	f854 1b04 	ldr.w	r1, [r4], #4
 8013e38:	46e6      	mov	lr, ip
 8013e3a:	0c08      	lsrs	r0, r1, #16
 8013e3c:	fa1c fc81 	uxtah	ip, ip, r1
 8013e40:	4471      	add	r1, lr
 8013e42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013e46:	b289      	uxth	r1, r1
 8013e48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013e4c:	f846 1b04 	str.w	r1, [r6], #4
 8013e50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013e54:	e7dd      	b.n	8013e12 <__mdiff+0xd6>
 8013e56:	3f01      	subs	r7, #1
 8013e58:	e7e7      	b.n	8013e2a <__mdiff+0xee>
 8013e5a:	bf00      	nop
 8013e5c:	080162e0 	.word	0x080162e0
 8013e60:	080162f1 	.word	0x080162f1

08013e64 <__d2b>:
 8013e64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013e68:	460f      	mov	r7, r1
 8013e6a:	2101      	movs	r1, #1
 8013e6c:	ec59 8b10 	vmov	r8, r9, d0
 8013e70:	4616      	mov	r6, r2
 8013e72:	f7ff fccd 	bl	8013810 <_Balloc>
 8013e76:	4604      	mov	r4, r0
 8013e78:	b930      	cbnz	r0, 8013e88 <__d2b+0x24>
 8013e7a:	4602      	mov	r2, r0
 8013e7c:	4b23      	ldr	r3, [pc, #140]	@ (8013f0c <__d2b+0xa8>)
 8013e7e:	4824      	ldr	r0, [pc, #144]	@ (8013f10 <__d2b+0xac>)
 8013e80:	f240 310f 	movw	r1, #783	@ 0x30f
 8013e84:	f000 fa74 	bl	8014370 <__assert_func>
 8013e88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013e8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e90:	b10d      	cbz	r5, 8013e96 <__d2b+0x32>
 8013e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013e96:	9301      	str	r3, [sp, #4]
 8013e98:	f1b8 0300 	subs.w	r3, r8, #0
 8013e9c:	d023      	beq.n	8013ee6 <__d2b+0x82>
 8013e9e:	4668      	mov	r0, sp
 8013ea0:	9300      	str	r3, [sp, #0]
 8013ea2:	f7ff fd7c 	bl	801399e <__lo0bits>
 8013ea6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013eaa:	b1d0      	cbz	r0, 8013ee2 <__d2b+0x7e>
 8013eac:	f1c0 0320 	rsb	r3, r0, #32
 8013eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8013eb4:	430b      	orrs	r3, r1
 8013eb6:	40c2      	lsrs	r2, r0
 8013eb8:	6163      	str	r3, [r4, #20]
 8013eba:	9201      	str	r2, [sp, #4]
 8013ebc:	9b01      	ldr	r3, [sp, #4]
 8013ebe:	61a3      	str	r3, [r4, #24]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	bf0c      	ite	eq
 8013ec4:	2201      	moveq	r2, #1
 8013ec6:	2202      	movne	r2, #2
 8013ec8:	6122      	str	r2, [r4, #16]
 8013eca:	b1a5      	cbz	r5, 8013ef6 <__d2b+0x92>
 8013ecc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013ed0:	4405      	add	r5, r0
 8013ed2:	603d      	str	r5, [r7, #0]
 8013ed4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013ed8:	6030      	str	r0, [r6, #0]
 8013eda:	4620      	mov	r0, r4
 8013edc:	b003      	add	sp, #12
 8013ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ee2:	6161      	str	r1, [r4, #20]
 8013ee4:	e7ea      	b.n	8013ebc <__d2b+0x58>
 8013ee6:	a801      	add	r0, sp, #4
 8013ee8:	f7ff fd59 	bl	801399e <__lo0bits>
 8013eec:	9b01      	ldr	r3, [sp, #4]
 8013eee:	6163      	str	r3, [r4, #20]
 8013ef0:	3020      	adds	r0, #32
 8013ef2:	2201      	movs	r2, #1
 8013ef4:	e7e8      	b.n	8013ec8 <__d2b+0x64>
 8013ef6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013efa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013efe:	6038      	str	r0, [r7, #0]
 8013f00:	6918      	ldr	r0, [r3, #16]
 8013f02:	f7ff fd2d 	bl	8013960 <__hi0bits>
 8013f06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013f0a:	e7e5      	b.n	8013ed8 <__d2b+0x74>
 8013f0c:	080162e0 	.word	0x080162e0
 8013f10:	080162f1 	.word	0x080162f1

08013f14 <__ssputs_r>:
 8013f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f18:	688e      	ldr	r6, [r1, #8]
 8013f1a:	461f      	mov	r7, r3
 8013f1c:	42be      	cmp	r6, r7
 8013f1e:	680b      	ldr	r3, [r1, #0]
 8013f20:	4682      	mov	sl, r0
 8013f22:	460c      	mov	r4, r1
 8013f24:	4690      	mov	r8, r2
 8013f26:	d82d      	bhi.n	8013f84 <__ssputs_r+0x70>
 8013f28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013f2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013f30:	d026      	beq.n	8013f80 <__ssputs_r+0x6c>
 8013f32:	6965      	ldr	r5, [r4, #20]
 8013f34:	6909      	ldr	r1, [r1, #16]
 8013f36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f3a:	eba3 0901 	sub.w	r9, r3, r1
 8013f3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013f42:	1c7b      	adds	r3, r7, #1
 8013f44:	444b      	add	r3, r9
 8013f46:	106d      	asrs	r5, r5, #1
 8013f48:	429d      	cmp	r5, r3
 8013f4a:	bf38      	it	cc
 8013f4c:	461d      	movcc	r5, r3
 8013f4e:	0553      	lsls	r3, r2, #21
 8013f50:	d527      	bpl.n	8013fa2 <__ssputs_r+0x8e>
 8013f52:	4629      	mov	r1, r5
 8013f54:	f7ff fbd0 	bl	80136f8 <_malloc_r>
 8013f58:	4606      	mov	r6, r0
 8013f5a:	b360      	cbz	r0, 8013fb6 <__ssputs_r+0xa2>
 8013f5c:	6921      	ldr	r1, [r4, #16]
 8013f5e:	464a      	mov	r2, r9
 8013f60:	f7fe fcf9 	bl	8012956 <memcpy>
 8013f64:	89a3      	ldrh	r3, [r4, #12]
 8013f66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013f6e:	81a3      	strh	r3, [r4, #12]
 8013f70:	6126      	str	r6, [r4, #16]
 8013f72:	6165      	str	r5, [r4, #20]
 8013f74:	444e      	add	r6, r9
 8013f76:	eba5 0509 	sub.w	r5, r5, r9
 8013f7a:	6026      	str	r6, [r4, #0]
 8013f7c:	60a5      	str	r5, [r4, #8]
 8013f7e:	463e      	mov	r6, r7
 8013f80:	42be      	cmp	r6, r7
 8013f82:	d900      	bls.n	8013f86 <__ssputs_r+0x72>
 8013f84:	463e      	mov	r6, r7
 8013f86:	6820      	ldr	r0, [r4, #0]
 8013f88:	4632      	mov	r2, r6
 8013f8a:	4641      	mov	r1, r8
 8013f8c:	f000 f9c6 	bl	801431c <memmove>
 8013f90:	68a3      	ldr	r3, [r4, #8]
 8013f92:	1b9b      	subs	r3, r3, r6
 8013f94:	60a3      	str	r3, [r4, #8]
 8013f96:	6823      	ldr	r3, [r4, #0]
 8013f98:	4433      	add	r3, r6
 8013f9a:	6023      	str	r3, [r4, #0]
 8013f9c:	2000      	movs	r0, #0
 8013f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fa2:	462a      	mov	r2, r5
 8013fa4:	f000 fa28 	bl	80143f8 <_realloc_r>
 8013fa8:	4606      	mov	r6, r0
 8013faa:	2800      	cmp	r0, #0
 8013fac:	d1e0      	bne.n	8013f70 <__ssputs_r+0x5c>
 8013fae:	6921      	ldr	r1, [r4, #16]
 8013fb0:	4650      	mov	r0, sl
 8013fb2:	f7ff fb2d 	bl	8013610 <_free_r>
 8013fb6:	230c      	movs	r3, #12
 8013fb8:	f8ca 3000 	str.w	r3, [sl]
 8013fbc:	89a3      	ldrh	r3, [r4, #12]
 8013fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013fc2:	81a3      	strh	r3, [r4, #12]
 8013fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8013fc8:	e7e9      	b.n	8013f9e <__ssputs_r+0x8a>
	...

08013fcc <_svfiprintf_r>:
 8013fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fd0:	4698      	mov	r8, r3
 8013fd2:	898b      	ldrh	r3, [r1, #12]
 8013fd4:	061b      	lsls	r3, r3, #24
 8013fd6:	b09d      	sub	sp, #116	@ 0x74
 8013fd8:	4607      	mov	r7, r0
 8013fda:	460d      	mov	r5, r1
 8013fdc:	4614      	mov	r4, r2
 8013fde:	d510      	bpl.n	8014002 <_svfiprintf_r+0x36>
 8013fe0:	690b      	ldr	r3, [r1, #16]
 8013fe2:	b973      	cbnz	r3, 8014002 <_svfiprintf_r+0x36>
 8013fe4:	2140      	movs	r1, #64	@ 0x40
 8013fe6:	f7ff fb87 	bl	80136f8 <_malloc_r>
 8013fea:	6028      	str	r0, [r5, #0]
 8013fec:	6128      	str	r0, [r5, #16]
 8013fee:	b930      	cbnz	r0, 8013ffe <_svfiprintf_r+0x32>
 8013ff0:	230c      	movs	r3, #12
 8013ff2:	603b      	str	r3, [r7, #0]
 8013ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ff8:	b01d      	add	sp, #116	@ 0x74
 8013ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ffe:	2340      	movs	r3, #64	@ 0x40
 8014000:	616b      	str	r3, [r5, #20]
 8014002:	2300      	movs	r3, #0
 8014004:	9309      	str	r3, [sp, #36]	@ 0x24
 8014006:	2320      	movs	r3, #32
 8014008:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801400c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014010:	2330      	movs	r3, #48	@ 0x30
 8014012:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80141b0 <_svfiprintf_r+0x1e4>
 8014016:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801401a:	f04f 0901 	mov.w	r9, #1
 801401e:	4623      	mov	r3, r4
 8014020:	469a      	mov	sl, r3
 8014022:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014026:	b10a      	cbz	r2, 801402c <_svfiprintf_r+0x60>
 8014028:	2a25      	cmp	r2, #37	@ 0x25
 801402a:	d1f9      	bne.n	8014020 <_svfiprintf_r+0x54>
 801402c:	ebba 0b04 	subs.w	fp, sl, r4
 8014030:	d00b      	beq.n	801404a <_svfiprintf_r+0x7e>
 8014032:	465b      	mov	r3, fp
 8014034:	4622      	mov	r2, r4
 8014036:	4629      	mov	r1, r5
 8014038:	4638      	mov	r0, r7
 801403a:	f7ff ff6b 	bl	8013f14 <__ssputs_r>
 801403e:	3001      	adds	r0, #1
 8014040:	f000 80a7 	beq.w	8014192 <_svfiprintf_r+0x1c6>
 8014044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014046:	445a      	add	r2, fp
 8014048:	9209      	str	r2, [sp, #36]	@ 0x24
 801404a:	f89a 3000 	ldrb.w	r3, [sl]
 801404e:	2b00      	cmp	r3, #0
 8014050:	f000 809f 	beq.w	8014192 <_svfiprintf_r+0x1c6>
 8014054:	2300      	movs	r3, #0
 8014056:	f04f 32ff 	mov.w	r2, #4294967295
 801405a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801405e:	f10a 0a01 	add.w	sl, sl, #1
 8014062:	9304      	str	r3, [sp, #16]
 8014064:	9307      	str	r3, [sp, #28]
 8014066:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801406a:	931a      	str	r3, [sp, #104]	@ 0x68
 801406c:	4654      	mov	r4, sl
 801406e:	2205      	movs	r2, #5
 8014070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014074:	484e      	ldr	r0, [pc, #312]	@ (80141b0 <_svfiprintf_r+0x1e4>)
 8014076:	f7ec f8ab 	bl	80001d0 <memchr>
 801407a:	9a04      	ldr	r2, [sp, #16]
 801407c:	b9d8      	cbnz	r0, 80140b6 <_svfiprintf_r+0xea>
 801407e:	06d0      	lsls	r0, r2, #27
 8014080:	bf44      	itt	mi
 8014082:	2320      	movmi	r3, #32
 8014084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014088:	0711      	lsls	r1, r2, #28
 801408a:	bf44      	itt	mi
 801408c:	232b      	movmi	r3, #43	@ 0x2b
 801408e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014092:	f89a 3000 	ldrb.w	r3, [sl]
 8014096:	2b2a      	cmp	r3, #42	@ 0x2a
 8014098:	d015      	beq.n	80140c6 <_svfiprintf_r+0xfa>
 801409a:	9a07      	ldr	r2, [sp, #28]
 801409c:	4654      	mov	r4, sl
 801409e:	2000      	movs	r0, #0
 80140a0:	f04f 0c0a 	mov.w	ip, #10
 80140a4:	4621      	mov	r1, r4
 80140a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80140aa:	3b30      	subs	r3, #48	@ 0x30
 80140ac:	2b09      	cmp	r3, #9
 80140ae:	d94b      	bls.n	8014148 <_svfiprintf_r+0x17c>
 80140b0:	b1b0      	cbz	r0, 80140e0 <_svfiprintf_r+0x114>
 80140b2:	9207      	str	r2, [sp, #28]
 80140b4:	e014      	b.n	80140e0 <_svfiprintf_r+0x114>
 80140b6:	eba0 0308 	sub.w	r3, r0, r8
 80140ba:	fa09 f303 	lsl.w	r3, r9, r3
 80140be:	4313      	orrs	r3, r2
 80140c0:	9304      	str	r3, [sp, #16]
 80140c2:	46a2      	mov	sl, r4
 80140c4:	e7d2      	b.n	801406c <_svfiprintf_r+0xa0>
 80140c6:	9b03      	ldr	r3, [sp, #12]
 80140c8:	1d19      	adds	r1, r3, #4
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	9103      	str	r1, [sp, #12]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	bfbb      	ittet	lt
 80140d2:	425b      	neglt	r3, r3
 80140d4:	f042 0202 	orrlt.w	r2, r2, #2
 80140d8:	9307      	strge	r3, [sp, #28]
 80140da:	9307      	strlt	r3, [sp, #28]
 80140dc:	bfb8      	it	lt
 80140de:	9204      	strlt	r2, [sp, #16]
 80140e0:	7823      	ldrb	r3, [r4, #0]
 80140e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80140e4:	d10a      	bne.n	80140fc <_svfiprintf_r+0x130>
 80140e6:	7863      	ldrb	r3, [r4, #1]
 80140e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80140ea:	d132      	bne.n	8014152 <_svfiprintf_r+0x186>
 80140ec:	9b03      	ldr	r3, [sp, #12]
 80140ee:	1d1a      	adds	r2, r3, #4
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	9203      	str	r2, [sp, #12]
 80140f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80140f8:	3402      	adds	r4, #2
 80140fa:	9305      	str	r3, [sp, #20]
 80140fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80141c0 <_svfiprintf_r+0x1f4>
 8014100:	7821      	ldrb	r1, [r4, #0]
 8014102:	2203      	movs	r2, #3
 8014104:	4650      	mov	r0, sl
 8014106:	f7ec f863 	bl	80001d0 <memchr>
 801410a:	b138      	cbz	r0, 801411c <_svfiprintf_r+0x150>
 801410c:	9b04      	ldr	r3, [sp, #16]
 801410e:	eba0 000a 	sub.w	r0, r0, sl
 8014112:	2240      	movs	r2, #64	@ 0x40
 8014114:	4082      	lsls	r2, r0
 8014116:	4313      	orrs	r3, r2
 8014118:	3401      	adds	r4, #1
 801411a:	9304      	str	r3, [sp, #16]
 801411c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014120:	4824      	ldr	r0, [pc, #144]	@ (80141b4 <_svfiprintf_r+0x1e8>)
 8014122:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014126:	2206      	movs	r2, #6
 8014128:	f7ec f852 	bl	80001d0 <memchr>
 801412c:	2800      	cmp	r0, #0
 801412e:	d036      	beq.n	801419e <_svfiprintf_r+0x1d2>
 8014130:	4b21      	ldr	r3, [pc, #132]	@ (80141b8 <_svfiprintf_r+0x1ec>)
 8014132:	bb1b      	cbnz	r3, 801417c <_svfiprintf_r+0x1b0>
 8014134:	9b03      	ldr	r3, [sp, #12]
 8014136:	3307      	adds	r3, #7
 8014138:	f023 0307 	bic.w	r3, r3, #7
 801413c:	3308      	adds	r3, #8
 801413e:	9303      	str	r3, [sp, #12]
 8014140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014142:	4433      	add	r3, r6
 8014144:	9309      	str	r3, [sp, #36]	@ 0x24
 8014146:	e76a      	b.n	801401e <_svfiprintf_r+0x52>
 8014148:	fb0c 3202 	mla	r2, ip, r2, r3
 801414c:	460c      	mov	r4, r1
 801414e:	2001      	movs	r0, #1
 8014150:	e7a8      	b.n	80140a4 <_svfiprintf_r+0xd8>
 8014152:	2300      	movs	r3, #0
 8014154:	3401      	adds	r4, #1
 8014156:	9305      	str	r3, [sp, #20]
 8014158:	4619      	mov	r1, r3
 801415a:	f04f 0c0a 	mov.w	ip, #10
 801415e:	4620      	mov	r0, r4
 8014160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014164:	3a30      	subs	r2, #48	@ 0x30
 8014166:	2a09      	cmp	r2, #9
 8014168:	d903      	bls.n	8014172 <_svfiprintf_r+0x1a6>
 801416a:	2b00      	cmp	r3, #0
 801416c:	d0c6      	beq.n	80140fc <_svfiprintf_r+0x130>
 801416e:	9105      	str	r1, [sp, #20]
 8014170:	e7c4      	b.n	80140fc <_svfiprintf_r+0x130>
 8014172:	fb0c 2101 	mla	r1, ip, r1, r2
 8014176:	4604      	mov	r4, r0
 8014178:	2301      	movs	r3, #1
 801417a:	e7f0      	b.n	801415e <_svfiprintf_r+0x192>
 801417c:	ab03      	add	r3, sp, #12
 801417e:	9300      	str	r3, [sp, #0]
 8014180:	462a      	mov	r2, r5
 8014182:	4b0e      	ldr	r3, [pc, #56]	@ (80141bc <_svfiprintf_r+0x1f0>)
 8014184:	a904      	add	r1, sp, #16
 8014186:	4638      	mov	r0, r7
 8014188:	f7fd fe88 	bl	8011e9c <_printf_float>
 801418c:	1c42      	adds	r2, r0, #1
 801418e:	4606      	mov	r6, r0
 8014190:	d1d6      	bne.n	8014140 <_svfiprintf_r+0x174>
 8014192:	89ab      	ldrh	r3, [r5, #12]
 8014194:	065b      	lsls	r3, r3, #25
 8014196:	f53f af2d 	bmi.w	8013ff4 <_svfiprintf_r+0x28>
 801419a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801419c:	e72c      	b.n	8013ff8 <_svfiprintf_r+0x2c>
 801419e:	ab03      	add	r3, sp, #12
 80141a0:	9300      	str	r3, [sp, #0]
 80141a2:	462a      	mov	r2, r5
 80141a4:	4b05      	ldr	r3, [pc, #20]	@ (80141bc <_svfiprintf_r+0x1f0>)
 80141a6:	a904      	add	r1, sp, #16
 80141a8:	4638      	mov	r0, r7
 80141aa:	f7fe f90f 	bl	80123cc <_printf_i>
 80141ae:	e7ed      	b.n	801418c <_svfiprintf_r+0x1c0>
 80141b0:	08016448 	.word	0x08016448
 80141b4:	08016452 	.word	0x08016452
 80141b8:	08011e9d 	.word	0x08011e9d
 80141bc:	08013f15 	.word	0x08013f15
 80141c0:	0801644e 	.word	0x0801644e

080141c4 <__sflush_r>:
 80141c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80141c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141cc:	0716      	lsls	r6, r2, #28
 80141ce:	4605      	mov	r5, r0
 80141d0:	460c      	mov	r4, r1
 80141d2:	d454      	bmi.n	801427e <__sflush_r+0xba>
 80141d4:	684b      	ldr	r3, [r1, #4]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	dc02      	bgt.n	80141e0 <__sflush_r+0x1c>
 80141da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80141dc:	2b00      	cmp	r3, #0
 80141de:	dd48      	ble.n	8014272 <__sflush_r+0xae>
 80141e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80141e2:	2e00      	cmp	r6, #0
 80141e4:	d045      	beq.n	8014272 <__sflush_r+0xae>
 80141e6:	2300      	movs	r3, #0
 80141e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80141ec:	682f      	ldr	r7, [r5, #0]
 80141ee:	6a21      	ldr	r1, [r4, #32]
 80141f0:	602b      	str	r3, [r5, #0]
 80141f2:	d030      	beq.n	8014256 <__sflush_r+0x92>
 80141f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80141f6:	89a3      	ldrh	r3, [r4, #12]
 80141f8:	0759      	lsls	r1, r3, #29
 80141fa:	d505      	bpl.n	8014208 <__sflush_r+0x44>
 80141fc:	6863      	ldr	r3, [r4, #4]
 80141fe:	1ad2      	subs	r2, r2, r3
 8014200:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014202:	b10b      	cbz	r3, 8014208 <__sflush_r+0x44>
 8014204:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014206:	1ad2      	subs	r2, r2, r3
 8014208:	2300      	movs	r3, #0
 801420a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801420c:	6a21      	ldr	r1, [r4, #32]
 801420e:	4628      	mov	r0, r5
 8014210:	47b0      	blx	r6
 8014212:	1c43      	adds	r3, r0, #1
 8014214:	89a3      	ldrh	r3, [r4, #12]
 8014216:	d106      	bne.n	8014226 <__sflush_r+0x62>
 8014218:	6829      	ldr	r1, [r5, #0]
 801421a:	291d      	cmp	r1, #29
 801421c:	d82b      	bhi.n	8014276 <__sflush_r+0xb2>
 801421e:	4a2a      	ldr	r2, [pc, #168]	@ (80142c8 <__sflush_r+0x104>)
 8014220:	410a      	asrs	r2, r1
 8014222:	07d6      	lsls	r6, r2, #31
 8014224:	d427      	bmi.n	8014276 <__sflush_r+0xb2>
 8014226:	2200      	movs	r2, #0
 8014228:	6062      	str	r2, [r4, #4]
 801422a:	04d9      	lsls	r1, r3, #19
 801422c:	6922      	ldr	r2, [r4, #16]
 801422e:	6022      	str	r2, [r4, #0]
 8014230:	d504      	bpl.n	801423c <__sflush_r+0x78>
 8014232:	1c42      	adds	r2, r0, #1
 8014234:	d101      	bne.n	801423a <__sflush_r+0x76>
 8014236:	682b      	ldr	r3, [r5, #0]
 8014238:	b903      	cbnz	r3, 801423c <__sflush_r+0x78>
 801423a:	6560      	str	r0, [r4, #84]	@ 0x54
 801423c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801423e:	602f      	str	r7, [r5, #0]
 8014240:	b1b9      	cbz	r1, 8014272 <__sflush_r+0xae>
 8014242:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014246:	4299      	cmp	r1, r3
 8014248:	d002      	beq.n	8014250 <__sflush_r+0x8c>
 801424a:	4628      	mov	r0, r5
 801424c:	f7ff f9e0 	bl	8013610 <_free_r>
 8014250:	2300      	movs	r3, #0
 8014252:	6363      	str	r3, [r4, #52]	@ 0x34
 8014254:	e00d      	b.n	8014272 <__sflush_r+0xae>
 8014256:	2301      	movs	r3, #1
 8014258:	4628      	mov	r0, r5
 801425a:	47b0      	blx	r6
 801425c:	4602      	mov	r2, r0
 801425e:	1c50      	adds	r0, r2, #1
 8014260:	d1c9      	bne.n	80141f6 <__sflush_r+0x32>
 8014262:	682b      	ldr	r3, [r5, #0]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d0c6      	beq.n	80141f6 <__sflush_r+0x32>
 8014268:	2b1d      	cmp	r3, #29
 801426a:	d001      	beq.n	8014270 <__sflush_r+0xac>
 801426c:	2b16      	cmp	r3, #22
 801426e:	d11e      	bne.n	80142ae <__sflush_r+0xea>
 8014270:	602f      	str	r7, [r5, #0]
 8014272:	2000      	movs	r0, #0
 8014274:	e022      	b.n	80142bc <__sflush_r+0xf8>
 8014276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801427a:	b21b      	sxth	r3, r3
 801427c:	e01b      	b.n	80142b6 <__sflush_r+0xf2>
 801427e:	690f      	ldr	r7, [r1, #16]
 8014280:	2f00      	cmp	r7, #0
 8014282:	d0f6      	beq.n	8014272 <__sflush_r+0xae>
 8014284:	0793      	lsls	r3, r2, #30
 8014286:	680e      	ldr	r6, [r1, #0]
 8014288:	bf08      	it	eq
 801428a:	694b      	ldreq	r3, [r1, #20]
 801428c:	600f      	str	r7, [r1, #0]
 801428e:	bf18      	it	ne
 8014290:	2300      	movne	r3, #0
 8014292:	eba6 0807 	sub.w	r8, r6, r7
 8014296:	608b      	str	r3, [r1, #8]
 8014298:	f1b8 0f00 	cmp.w	r8, #0
 801429c:	dde9      	ble.n	8014272 <__sflush_r+0xae>
 801429e:	6a21      	ldr	r1, [r4, #32]
 80142a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80142a2:	4643      	mov	r3, r8
 80142a4:	463a      	mov	r2, r7
 80142a6:	4628      	mov	r0, r5
 80142a8:	47b0      	blx	r6
 80142aa:	2800      	cmp	r0, #0
 80142ac:	dc08      	bgt.n	80142c0 <__sflush_r+0xfc>
 80142ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142b6:	81a3      	strh	r3, [r4, #12]
 80142b8:	f04f 30ff 	mov.w	r0, #4294967295
 80142bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142c0:	4407      	add	r7, r0
 80142c2:	eba8 0800 	sub.w	r8, r8, r0
 80142c6:	e7e7      	b.n	8014298 <__sflush_r+0xd4>
 80142c8:	dfbffffe 	.word	0xdfbffffe

080142cc <_fflush_r>:
 80142cc:	b538      	push	{r3, r4, r5, lr}
 80142ce:	690b      	ldr	r3, [r1, #16]
 80142d0:	4605      	mov	r5, r0
 80142d2:	460c      	mov	r4, r1
 80142d4:	b913      	cbnz	r3, 80142dc <_fflush_r+0x10>
 80142d6:	2500      	movs	r5, #0
 80142d8:	4628      	mov	r0, r5
 80142da:	bd38      	pop	{r3, r4, r5, pc}
 80142dc:	b118      	cbz	r0, 80142e6 <_fflush_r+0x1a>
 80142de:	6a03      	ldr	r3, [r0, #32]
 80142e0:	b90b      	cbnz	r3, 80142e6 <_fflush_r+0x1a>
 80142e2:	f7fe fa1f 	bl	8012724 <__sinit>
 80142e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d0f3      	beq.n	80142d6 <_fflush_r+0xa>
 80142ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80142f0:	07d0      	lsls	r0, r2, #31
 80142f2:	d404      	bmi.n	80142fe <_fflush_r+0x32>
 80142f4:	0599      	lsls	r1, r3, #22
 80142f6:	d402      	bmi.n	80142fe <_fflush_r+0x32>
 80142f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80142fa:	f7fe fb2a 	bl	8012952 <__retarget_lock_acquire_recursive>
 80142fe:	4628      	mov	r0, r5
 8014300:	4621      	mov	r1, r4
 8014302:	f7ff ff5f 	bl	80141c4 <__sflush_r>
 8014306:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014308:	07da      	lsls	r2, r3, #31
 801430a:	4605      	mov	r5, r0
 801430c:	d4e4      	bmi.n	80142d8 <_fflush_r+0xc>
 801430e:	89a3      	ldrh	r3, [r4, #12]
 8014310:	059b      	lsls	r3, r3, #22
 8014312:	d4e1      	bmi.n	80142d8 <_fflush_r+0xc>
 8014314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014316:	f7fe fb1d 	bl	8012954 <__retarget_lock_release_recursive>
 801431a:	e7dd      	b.n	80142d8 <_fflush_r+0xc>

0801431c <memmove>:
 801431c:	4288      	cmp	r0, r1
 801431e:	b510      	push	{r4, lr}
 8014320:	eb01 0402 	add.w	r4, r1, r2
 8014324:	d902      	bls.n	801432c <memmove+0x10>
 8014326:	4284      	cmp	r4, r0
 8014328:	4623      	mov	r3, r4
 801432a:	d807      	bhi.n	801433c <memmove+0x20>
 801432c:	1e43      	subs	r3, r0, #1
 801432e:	42a1      	cmp	r1, r4
 8014330:	d008      	beq.n	8014344 <memmove+0x28>
 8014332:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014336:	f803 2f01 	strb.w	r2, [r3, #1]!
 801433a:	e7f8      	b.n	801432e <memmove+0x12>
 801433c:	4402      	add	r2, r0
 801433e:	4601      	mov	r1, r0
 8014340:	428a      	cmp	r2, r1
 8014342:	d100      	bne.n	8014346 <memmove+0x2a>
 8014344:	bd10      	pop	{r4, pc}
 8014346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801434a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801434e:	e7f7      	b.n	8014340 <memmove+0x24>

08014350 <_sbrk_r>:
 8014350:	b538      	push	{r3, r4, r5, lr}
 8014352:	4d06      	ldr	r5, [pc, #24]	@ (801436c <_sbrk_r+0x1c>)
 8014354:	2300      	movs	r3, #0
 8014356:	4604      	mov	r4, r0
 8014358:	4608      	mov	r0, r1
 801435a:	602b      	str	r3, [r5, #0]
 801435c:	f7ee fd70 	bl	8002e40 <_sbrk>
 8014360:	1c43      	adds	r3, r0, #1
 8014362:	d102      	bne.n	801436a <_sbrk_r+0x1a>
 8014364:	682b      	ldr	r3, [r5, #0]
 8014366:	b103      	cbz	r3, 801436a <_sbrk_r+0x1a>
 8014368:	6023      	str	r3, [r4, #0]
 801436a:	bd38      	pop	{r3, r4, r5, pc}
 801436c:	20008f30 	.word	0x20008f30

08014370 <__assert_func>:
 8014370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014372:	4614      	mov	r4, r2
 8014374:	461a      	mov	r2, r3
 8014376:	4b09      	ldr	r3, [pc, #36]	@ (801439c <__assert_func+0x2c>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	4605      	mov	r5, r0
 801437c:	68d8      	ldr	r0, [r3, #12]
 801437e:	b954      	cbnz	r4, 8014396 <__assert_func+0x26>
 8014380:	4b07      	ldr	r3, [pc, #28]	@ (80143a0 <__assert_func+0x30>)
 8014382:	461c      	mov	r4, r3
 8014384:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014388:	9100      	str	r1, [sp, #0]
 801438a:	462b      	mov	r3, r5
 801438c:	4905      	ldr	r1, [pc, #20]	@ (80143a4 <__assert_func+0x34>)
 801438e:	f000 f86f 	bl	8014470 <fiprintf>
 8014392:	f000 f87f 	bl	8014494 <abort>
 8014396:	4b04      	ldr	r3, [pc, #16]	@ (80143a8 <__assert_func+0x38>)
 8014398:	e7f4      	b.n	8014384 <__assert_func+0x14>
 801439a:	bf00      	nop
 801439c:	20000044 	.word	0x20000044
 80143a0:	0801649e 	.word	0x0801649e
 80143a4:	08016470 	.word	0x08016470
 80143a8:	08016463 	.word	0x08016463

080143ac <_calloc_r>:
 80143ac:	b570      	push	{r4, r5, r6, lr}
 80143ae:	fba1 5402 	umull	r5, r4, r1, r2
 80143b2:	b93c      	cbnz	r4, 80143c4 <_calloc_r+0x18>
 80143b4:	4629      	mov	r1, r5
 80143b6:	f7ff f99f 	bl	80136f8 <_malloc_r>
 80143ba:	4606      	mov	r6, r0
 80143bc:	b928      	cbnz	r0, 80143ca <_calloc_r+0x1e>
 80143be:	2600      	movs	r6, #0
 80143c0:	4630      	mov	r0, r6
 80143c2:	bd70      	pop	{r4, r5, r6, pc}
 80143c4:	220c      	movs	r2, #12
 80143c6:	6002      	str	r2, [r0, #0]
 80143c8:	e7f9      	b.n	80143be <_calloc_r+0x12>
 80143ca:	462a      	mov	r2, r5
 80143cc:	4621      	mov	r1, r4
 80143ce:	f7fe fa42 	bl	8012856 <memset>
 80143d2:	e7f5      	b.n	80143c0 <_calloc_r+0x14>

080143d4 <__ascii_mbtowc>:
 80143d4:	b082      	sub	sp, #8
 80143d6:	b901      	cbnz	r1, 80143da <__ascii_mbtowc+0x6>
 80143d8:	a901      	add	r1, sp, #4
 80143da:	b142      	cbz	r2, 80143ee <__ascii_mbtowc+0x1a>
 80143dc:	b14b      	cbz	r3, 80143f2 <__ascii_mbtowc+0x1e>
 80143de:	7813      	ldrb	r3, [r2, #0]
 80143e0:	600b      	str	r3, [r1, #0]
 80143e2:	7812      	ldrb	r2, [r2, #0]
 80143e4:	1e10      	subs	r0, r2, #0
 80143e6:	bf18      	it	ne
 80143e8:	2001      	movne	r0, #1
 80143ea:	b002      	add	sp, #8
 80143ec:	4770      	bx	lr
 80143ee:	4610      	mov	r0, r2
 80143f0:	e7fb      	b.n	80143ea <__ascii_mbtowc+0x16>
 80143f2:	f06f 0001 	mvn.w	r0, #1
 80143f6:	e7f8      	b.n	80143ea <__ascii_mbtowc+0x16>

080143f8 <_realloc_r>:
 80143f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143fc:	4680      	mov	r8, r0
 80143fe:	4615      	mov	r5, r2
 8014400:	460c      	mov	r4, r1
 8014402:	b921      	cbnz	r1, 801440e <_realloc_r+0x16>
 8014404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014408:	4611      	mov	r1, r2
 801440a:	f7ff b975 	b.w	80136f8 <_malloc_r>
 801440e:	b92a      	cbnz	r2, 801441c <_realloc_r+0x24>
 8014410:	f7ff f8fe 	bl	8013610 <_free_r>
 8014414:	2400      	movs	r4, #0
 8014416:	4620      	mov	r0, r4
 8014418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801441c:	f000 f841 	bl	80144a2 <_malloc_usable_size_r>
 8014420:	4285      	cmp	r5, r0
 8014422:	4606      	mov	r6, r0
 8014424:	d802      	bhi.n	801442c <_realloc_r+0x34>
 8014426:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801442a:	d8f4      	bhi.n	8014416 <_realloc_r+0x1e>
 801442c:	4629      	mov	r1, r5
 801442e:	4640      	mov	r0, r8
 8014430:	f7ff f962 	bl	80136f8 <_malloc_r>
 8014434:	4607      	mov	r7, r0
 8014436:	2800      	cmp	r0, #0
 8014438:	d0ec      	beq.n	8014414 <_realloc_r+0x1c>
 801443a:	42b5      	cmp	r5, r6
 801443c:	462a      	mov	r2, r5
 801443e:	4621      	mov	r1, r4
 8014440:	bf28      	it	cs
 8014442:	4632      	movcs	r2, r6
 8014444:	f7fe fa87 	bl	8012956 <memcpy>
 8014448:	4621      	mov	r1, r4
 801444a:	4640      	mov	r0, r8
 801444c:	f7ff f8e0 	bl	8013610 <_free_r>
 8014450:	463c      	mov	r4, r7
 8014452:	e7e0      	b.n	8014416 <_realloc_r+0x1e>

08014454 <__ascii_wctomb>:
 8014454:	4603      	mov	r3, r0
 8014456:	4608      	mov	r0, r1
 8014458:	b141      	cbz	r1, 801446c <__ascii_wctomb+0x18>
 801445a:	2aff      	cmp	r2, #255	@ 0xff
 801445c:	d904      	bls.n	8014468 <__ascii_wctomb+0x14>
 801445e:	228a      	movs	r2, #138	@ 0x8a
 8014460:	601a      	str	r2, [r3, #0]
 8014462:	f04f 30ff 	mov.w	r0, #4294967295
 8014466:	4770      	bx	lr
 8014468:	700a      	strb	r2, [r1, #0]
 801446a:	2001      	movs	r0, #1
 801446c:	4770      	bx	lr
	...

08014470 <fiprintf>:
 8014470:	b40e      	push	{r1, r2, r3}
 8014472:	b503      	push	{r0, r1, lr}
 8014474:	4601      	mov	r1, r0
 8014476:	ab03      	add	r3, sp, #12
 8014478:	4805      	ldr	r0, [pc, #20]	@ (8014490 <fiprintf+0x20>)
 801447a:	f853 2b04 	ldr.w	r2, [r3], #4
 801447e:	6800      	ldr	r0, [r0, #0]
 8014480:	9301      	str	r3, [sp, #4]
 8014482:	f000 f83f 	bl	8014504 <_vfiprintf_r>
 8014486:	b002      	add	sp, #8
 8014488:	f85d eb04 	ldr.w	lr, [sp], #4
 801448c:	b003      	add	sp, #12
 801448e:	4770      	bx	lr
 8014490:	20000044 	.word	0x20000044

08014494 <abort>:
 8014494:	b508      	push	{r3, lr}
 8014496:	2006      	movs	r0, #6
 8014498:	f000 fa08 	bl	80148ac <raise>
 801449c:	2001      	movs	r0, #1
 801449e:	f7ee fc57 	bl	8002d50 <_exit>

080144a2 <_malloc_usable_size_r>:
 80144a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80144a6:	1f18      	subs	r0, r3, #4
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	bfbc      	itt	lt
 80144ac:	580b      	ldrlt	r3, [r1, r0]
 80144ae:	18c0      	addlt	r0, r0, r3
 80144b0:	4770      	bx	lr

080144b2 <__sfputc_r>:
 80144b2:	6893      	ldr	r3, [r2, #8]
 80144b4:	3b01      	subs	r3, #1
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	b410      	push	{r4}
 80144ba:	6093      	str	r3, [r2, #8]
 80144bc:	da08      	bge.n	80144d0 <__sfputc_r+0x1e>
 80144be:	6994      	ldr	r4, [r2, #24]
 80144c0:	42a3      	cmp	r3, r4
 80144c2:	db01      	blt.n	80144c8 <__sfputc_r+0x16>
 80144c4:	290a      	cmp	r1, #10
 80144c6:	d103      	bne.n	80144d0 <__sfputc_r+0x1e>
 80144c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80144cc:	f000 b932 	b.w	8014734 <__swbuf_r>
 80144d0:	6813      	ldr	r3, [r2, #0]
 80144d2:	1c58      	adds	r0, r3, #1
 80144d4:	6010      	str	r0, [r2, #0]
 80144d6:	7019      	strb	r1, [r3, #0]
 80144d8:	4608      	mov	r0, r1
 80144da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80144de:	4770      	bx	lr

080144e0 <__sfputs_r>:
 80144e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144e2:	4606      	mov	r6, r0
 80144e4:	460f      	mov	r7, r1
 80144e6:	4614      	mov	r4, r2
 80144e8:	18d5      	adds	r5, r2, r3
 80144ea:	42ac      	cmp	r4, r5
 80144ec:	d101      	bne.n	80144f2 <__sfputs_r+0x12>
 80144ee:	2000      	movs	r0, #0
 80144f0:	e007      	b.n	8014502 <__sfputs_r+0x22>
 80144f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144f6:	463a      	mov	r2, r7
 80144f8:	4630      	mov	r0, r6
 80144fa:	f7ff ffda 	bl	80144b2 <__sfputc_r>
 80144fe:	1c43      	adds	r3, r0, #1
 8014500:	d1f3      	bne.n	80144ea <__sfputs_r+0xa>
 8014502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014504 <_vfiprintf_r>:
 8014504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014508:	460d      	mov	r5, r1
 801450a:	b09d      	sub	sp, #116	@ 0x74
 801450c:	4614      	mov	r4, r2
 801450e:	4698      	mov	r8, r3
 8014510:	4606      	mov	r6, r0
 8014512:	b118      	cbz	r0, 801451c <_vfiprintf_r+0x18>
 8014514:	6a03      	ldr	r3, [r0, #32]
 8014516:	b90b      	cbnz	r3, 801451c <_vfiprintf_r+0x18>
 8014518:	f7fe f904 	bl	8012724 <__sinit>
 801451c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801451e:	07d9      	lsls	r1, r3, #31
 8014520:	d405      	bmi.n	801452e <_vfiprintf_r+0x2a>
 8014522:	89ab      	ldrh	r3, [r5, #12]
 8014524:	059a      	lsls	r2, r3, #22
 8014526:	d402      	bmi.n	801452e <_vfiprintf_r+0x2a>
 8014528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801452a:	f7fe fa12 	bl	8012952 <__retarget_lock_acquire_recursive>
 801452e:	89ab      	ldrh	r3, [r5, #12]
 8014530:	071b      	lsls	r3, r3, #28
 8014532:	d501      	bpl.n	8014538 <_vfiprintf_r+0x34>
 8014534:	692b      	ldr	r3, [r5, #16]
 8014536:	b99b      	cbnz	r3, 8014560 <_vfiprintf_r+0x5c>
 8014538:	4629      	mov	r1, r5
 801453a:	4630      	mov	r0, r6
 801453c:	f000 f938 	bl	80147b0 <__swsetup_r>
 8014540:	b170      	cbz	r0, 8014560 <_vfiprintf_r+0x5c>
 8014542:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014544:	07dc      	lsls	r4, r3, #31
 8014546:	d504      	bpl.n	8014552 <_vfiprintf_r+0x4e>
 8014548:	f04f 30ff 	mov.w	r0, #4294967295
 801454c:	b01d      	add	sp, #116	@ 0x74
 801454e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014552:	89ab      	ldrh	r3, [r5, #12]
 8014554:	0598      	lsls	r0, r3, #22
 8014556:	d4f7      	bmi.n	8014548 <_vfiprintf_r+0x44>
 8014558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801455a:	f7fe f9fb 	bl	8012954 <__retarget_lock_release_recursive>
 801455e:	e7f3      	b.n	8014548 <_vfiprintf_r+0x44>
 8014560:	2300      	movs	r3, #0
 8014562:	9309      	str	r3, [sp, #36]	@ 0x24
 8014564:	2320      	movs	r3, #32
 8014566:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801456a:	f8cd 800c 	str.w	r8, [sp, #12]
 801456e:	2330      	movs	r3, #48	@ 0x30
 8014570:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014720 <_vfiprintf_r+0x21c>
 8014574:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014578:	f04f 0901 	mov.w	r9, #1
 801457c:	4623      	mov	r3, r4
 801457e:	469a      	mov	sl, r3
 8014580:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014584:	b10a      	cbz	r2, 801458a <_vfiprintf_r+0x86>
 8014586:	2a25      	cmp	r2, #37	@ 0x25
 8014588:	d1f9      	bne.n	801457e <_vfiprintf_r+0x7a>
 801458a:	ebba 0b04 	subs.w	fp, sl, r4
 801458e:	d00b      	beq.n	80145a8 <_vfiprintf_r+0xa4>
 8014590:	465b      	mov	r3, fp
 8014592:	4622      	mov	r2, r4
 8014594:	4629      	mov	r1, r5
 8014596:	4630      	mov	r0, r6
 8014598:	f7ff ffa2 	bl	80144e0 <__sfputs_r>
 801459c:	3001      	adds	r0, #1
 801459e:	f000 80a7 	beq.w	80146f0 <_vfiprintf_r+0x1ec>
 80145a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80145a4:	445a      	add	r2, fp
 80145a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80145a8:	f89a 3000 	ldrb.w	r3, [sl]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	f000 809f 	beq.w	80146f0 <_vfiprintf_r+0x1ec>
 80145b2:	2300      	movs	r3, #0
 80145b4:	f04f 32ff 	mov.w	r2, #4294967295
 80145b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80145bc:	f10a 0a01 	add.w	sl, sl, #1
 80145c0:	9304      	str	r3, [sp, #16]
 80145c2:	9307      	str	r3, [sp, #28]
 80145c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80145c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80145ca:	4654      	mov	r4, sl
 80145cc:	2205      	movs	r2, #5
 80145ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145d2:	4853      	ldr	r0, [pc, #332]	@ (8014720 <_vfiprintf_r+0x21c>)
 80145d4:	f7eb fdfc 	bl	80001d0 <memchr>
 80145d8:	9a04      	ldr	r2, [sp, #16]
 80145da:	b9d8      	cbnz	r0, 8014614 <_vfiprintf_r+0x110>
 80145dc:	06d1      	lsls	r1, r2, #27
 80145de:	bf44      	itt	mi
 80145e0:	2320      	movmi	r3, #32
 80145e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80145e6:	0713      	lsls	r3, r2, #28
 80145e8:	bf44      	itt	mi
 80145ea:	232b      	movmi	r3, #43	@ 0x2b
 80145ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80145f0:	f89a 3000 	ldrb.w	r3, [sl]
 80145f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80145f6:	d015      	beq.n	8014624 <_vfiprintf_r+0x120>
 80145f8:	9a07      	ldr	r2, [sp, #28]
 80145fa:	4654      	mov	r4, sl
 80145fc:	2000      	movs	r0, #0
 80145fe:	f04f 0c0a 	mov.w	ip, #10
 8014602:	4621      	mov	r1, r4
 8014604:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014608:	3b30      	subs	r3, #48	@ 0x30
 801460a:	2b09      	cmp	r3, #9
 801460c:	d94b      	bls.n	80146a6 <_vfiprintf_r+0x1a2>
 801460e:	b1b0      	cbz	r0, 801463e <_vfiprintf_r+0x13a>
 8014610:	9207      	str	r2, [sp, #28]
 8014612:	e014      	b.n	801463e <_vfiprintf_r+0x13a>
 8014614:	eba0 0308 	sub.w	r3, r0, r8
 8014618:	fa09 f303 	lsl.w	r3, r9, r3
 801461c:	4313      	orrs	r3, r2
 801461e:	9304      	str	r3, [sp, #16]
 8014620:	46a2      	mov	sl, r4
 8014622:	e7d2      	b.n	80145ca <_vfiprintf_r+0xc6>
 8014624:	9b03      	ldr	r3, [sp, #12]
 8014626:	1d19      	adds	r1, r3, #4
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	9103      	str	r1, [sp, #12]
 801462c:	2b00      	cmp	r3, #0
 801462e:	bfbb      	ittet	lt
 8014630:	425b      	neglt	r3, r3
 8014632:	f042 0202 	orrlt.w	r2, r2, #2
 8014636:	9307      	strge	r3, [sp, #28]
 8014638:	9307      	strlt	r3, [sp, #28]
 801463a:	bfb8      	it	lt
 801463c:	9204      	strlt	r2, [sp, #16]
 801463e:	7823      	ldrb	r3, [r4, #0]
 8014640:	2b2e      	cmp	r3, #46	@ 0x2e
 8014642:	d10a      	bne.n	801465a <_vfiprintf_r+0x156>
 8014644:	7863      	ldrb	r3, [r4, #1]
 8014646:	2b2a      	cmp	r3, #42	@ 0x2a
 8014648:	d132      	bne.n	80146b0 <_vfiprintf_r+0x1ac>
 801464a:	9b03      	ldr	r3, [sp, #12]
 801464c:	1d1a      	adds	r2, r3, #4
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	9203      	str	r2, [sp, #12]
 8014652:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014656:	3402      	adds	r4, #2
 8014658:	9305      	str	r3, [sp, #20]
 801465a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014730 <_vfiprintf_r+0x22c>
 801465e:	7821      	ldrb	r1, [r4, #0]
 8014660:	2203      	movs	r2, #3
 8014662:	4650      	mov	r0, sl
 8014664:	f7eb fdb4 	bl	80001d0 <memchr>
 8014668:	b138      	cbz	r0, 801467a <_vfiprintf_r+0x176>
 801466a:	9b04      	ldr	r3, [sp, #16]
 801466c:	eba0 000a 	sub.w	r0, r0, sl
 8014670:	2240      	movs	r2, #64	@ 0x40
 8014672:	4082      	lsls	r2, r0
 8014674:	4313      	orrs	r3, r2
 8014676:	3401      	adds	r4, #1
 8014678:	9304      	str	r3, [sp, #16]
 801467a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801467e:	4829      	ldr	r0, [pc, #164]	@ (8014724 <_vfiprintf_r+0x220>)
 8014680:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014684:	2206      	movs	r2, #6
 8014686:	f7eb fda3 	bl	80001d0 <memchr>
 801468a:	2800      	cmp	r0, #0
 801468c:	d03f      	beq.n	801470e <_vfiprintf_r+0x20a>
 801468e:	4b26      	ldr	r3, [pc, #152]	@ (8014728 <_vfiprintf_r+0x224>)
 8014690:	bb1b      	cbnz	r3, 80146da <_vfiprintf_r+0x1d6>
 8014692:	9b03      	ldr	r3, [sp, #12]
 8014694:	3307      	adds	r3, #7
 8014696:	f023 0307 	bic.w	r3, r3, #7
 801469a:	3308      	adds	r3, #8
 801469c:	9303      	str	r3, [sp, #12]
 801469e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146a0:	443b      	add	r3, r7
 80146a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80146a4:	e76a      	b.n	801457c <_vfiprintf_r+0x78>
 80146a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80146aa:	460c      	mov	r4, r1
 80146ac:	2001      	movs	r0, #1
 80146ae:	e7a8      	b.n	8014602 <_vfiprintf_r+0xfe>
 80146b0:	2300      	movs	r3, #0
 80146b2:	3401      	adds	r4, #1
 80146b4:	9305      	str	r3, [sp, #20]
 80146b6:	4619      	mov	r1, r3
 80146b8:	f04f 0c0a 	mov.w	ip, #10
 80146bc:	4620      	mov	r0, r4
 80146be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80146c2:	3a30      	subs	r2, #48	@ 0x30
 80146c4:	2a09      	cmp	r2, #9
 80146c6:	d903      	bls.n	80146d0 <_vfiprintf_r+0x1cc>
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d0c6      	beq.n	801465a <_vfiprintf_r+0x156>
 80146cc:	9105      	str	r1, [sp, #20]
 80146ce:	e7c4      	b.n	801465a <_vfiprintf_r+0x156>
 80146d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80146d4:	4604      	mov	r4, r0
 80146d6:	2301      	movs	r3, #1
 80146d8:	e7f0      	b.n	80146bc <_vfiprintf_r+0x1b8>
 80146da:	ab03      	add	r3, sp, #12
 80146dc:	9300      	str	r3, [sp, #0]
 80146de:	462a      	mov	r2, r5
 80146e0:	4b12      	ldr	r3, [pc, #72]	@ (801472c <_vfiprintf_r+0x228>)
 80146e2:	a904      	add	r1, sp, #16
 80146e4:	4630      	mov	r0, r6
 80146e6:	f7fd fbd9 	bl	8011e9c <_printf_float>
 80146ea:	4607      	mov	r7, r0
 80146ec:	1c78      	adds	r0, r7, #1
 80146ee:	d1d6      	bne.n	801469e <_vfiprintf_r+0x19a>
 80146f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80146f2:	07d9      	lsls	r1, r3, #31
 80146f4:	d405      	bmi.n	8014702 <_vfiprintf_r+0x1fe>
 80146f6:	89ab      	ldrh	r3, [r5, #12]
 80146f8:	059a      	lsls	r2, r3, #22
 80146fa:	d402      	bmi.n	8014702 <_vfiprintf_r+0x1fe>
 80146fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80146fe:	f7fe f929 	bl	8012954 <__retarget_lock_release_recursive>
 8014702:	89ab      	ldrh	r3, [r5, #12]
 8014704:	065b      	lsls	r3, r3, #25
 8014706:	f53f af1f 	bmi.w	8014548 <_vfiprintf_r+0x44>
 801470a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801470c:	e71e      	b.n	801454c <_vfiprintf_r+0x48>
 801470e:	ab03      	add	r3, sp, #12
 8014710:	9300      	str	r3, [sp, #0]
 8014712:	462a      	mov	r2, r5
 8014714:	4b05      	ldr	r3, [pc, #20]	@ (801472c <_vfiprintf_r+0x228>)
 8014716:	a904      	add	r1, sp, #16
 8014718:	4630      	mov	r0, r6
 801471a:	f7fd fe57 	bl	80123cc <_printf_i>
 801471e:	e7e4      	b.n	80146ea <_vfiprintf_r+0x1e6>
 8014720:	08016448 	.word	0x08016448
 8014724:	08016452 	.word	0x08016452
 8014728:	08011e9d 	.word	0x08011e9d
 801472c:	080144e1 	.word	0x080144e1
 8014730:	0801644e 	.word	0x0801644e

08014734 <__swbuf_r>:
 8014734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014736:	460e      	mov	r6, r1
 8014738:	4614      	mov	r4, r2
 801473a:	4605      	mov	r5, r0
 801473c:	b118      	cbz	r0, 8014746 <__swbuf_r+0x12>
 801473e:	6a03      	ldr	r3, [r0, #32]
 8014740:	b90b      	cbnz	r3, 8014746 <__swbuf_r+0x12>
 8014742:	f7fd ffef 	bl	8012724 <__sinit>
 8014746:	69a3      	ldr	r3, [r4, #24]
 8014748:	60a3      	str	r3, [r4, #8]
 801474a:	89a3      	ldrh	r3, [r4, #12]
 801474c:	071a      	lsls	r2, r3, #28
 801474e:	d501      	bpl.n	8014754 <__swbuf_r+0x20>
 8014750:	6923      	ldr	r3, [r4, #16]
 8014752:	b943      	cbnz	r3, 8014766 <__swbuf_r+0x32>
 8014754:	4621      	mov	r1, r4
 8014756:	4628      	mov	r0, r5
 8014758:	f000 f82a 	bl	80147b0 <__swsetup_r>
 801475c:	b118      	cbz	r0, 8014766 <__swbuf_r+0x32>
 801475e:	f04f 37ff 	mov.w	r7, #4294967295
 8014762:	4638      	mov	r0, r7
 8014764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014766:	6823      	ldr	r3, [r4, #0]
 8014768:	6922      	ldr	r2, [r4, #16]
 801476a:	1a98      	subs	r0, r3, r2
 801476c:	6963      	ldr	r3, [r4, #20]
 801476e:	b2f6      	uxtb	r6, r6
 8014770:	4283      	cmp	r3, r0
 8014772:	4637      	mov	r7, r6
 8014774:	dc05      	bgt.n	8014782 <__swbuf_r+0x4e>
 8014776:	4621      	mov	r1, r4
 8014778:	4628      	mov	r0, r5
 801477a:	f7ff fda7 	bl	80142cc <_fflush_r>
 801477e:	2800      	cmp	r0, #0
 8014780:	d1ed      	bne.n	801475e <__swbuf_r+0x2a>
 8014782:	68a3      	ldr	r3, [r4, #8]
 8014784:	3b01      	subs	r3, #1
 8014786:	60a3      	str	r3, [r4, #8]
 8014788:	6823      	ldr	r3, [r4, #0]
 801478a:	1c5a      	adds	r2, r3, #1
 801478c:	6022      	str	r2, [r4, #0]
 801478e:	701e      	strb	r6, [r3, #0]
 8014790:	6962      	ldr	r2, [r4, #20]
 8014792:	1c43      	adds	r3, r0, #1
 8014794:	429a      	cmp	r2, r3
 8014796:	d004      	beq.n	80147a2 <__swbuf_r+0x6e>
 8014798:	89a3      	ldrh	r3, [r4, #12]
 801479a:	07db      	lsls	r3, r3, #31
 801479c:	d5e1      	bpl.n	8014762 <__swbuf_r+0x2e>
 801479e:	2e0a      	cmp	r6, #10
 80147a0:	d1df      	bne.n	8014762 <__swbuf_r+0x2e>
 80147a2:	4621      	mov	r1, r4
 80147a4:	4628      	mov	r0, r5
 80147a6:	f7ff fd91 	bl	80142cc <_fflush_r>
 80147aa:	2800      	cmp	r0, #0
 80147ac:	d0d9      	beq.n	8014762 <__swbuf_r+0x2e>
 80147ae:	e7d6      	b.n	801475e <__swbuf_r+0x2a>

080147b0 <__swsetup_r>:
 80147b0:	b538      	push	{r3, r4, r5, lr}
 80147b2:	4b29      	ldr	r3, [pc, #164]	@ (8014858 <__swsetup_r+0xa8>)
 80147b4:	4605      	mov	r5, r0
 80147b6:	6818      	ldr	r0, [r3, #0]
 80147b8:	460c      	mov	r4, r1
 80147ba:	b118      	cbz	r0, 80147c4 <__swsetup_r+0x14>
 80147bc:	6a03      	ldr	r3, [r0, #32]
 80147be:	b90b      	cbnz	r3, 80147c4 <__swsetup_r+0x14>
 80147c0:	f7fd ffb0 	bl	8012724 <__sinit>
 80147c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147c8:	0719      	lsls	r1, r3, #28
 80147ca:	d422      	bmi.n	8014812 <__swsetup_r+0x62>
 80147cc:	06da      	lsls	r2, r3, #27
 80147ce:	d407      	bmi.n	80147e0 <__swsetup_r+0x30>
 80147d0:	2209      	movs	r2, #9
 80147d2:	602a      	str	r2, [r5, #0]
 80147d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147d8:	81a3      	strh	r3, [r4, #12]
 80147da:	f04f 30ff 	mov.w	r0, #4294967295
 80147de:	e033      	b.n	8014848 <__swsetup_r+0x98>
 80147e0:	0758      	lsls	r0, r3, #29
 80147e2:	d512      	bpl.n	801480a <__swsetup_r+0x5a>
 80147e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80147e6:	b141      	cbz	r1, 80147fa <__swsetup_r+0x4a>
 80147e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80147ec:	4299      	cmp	r1, r3
 80147ee:	d002      	beq.n	80147f6 <__swsetup_r+0x46>
 80147f0:	4628      	mov	r0, r5
 80147f2:	f7fe ff0d 	bl	8013610 <_free_r>
 80147f6:	2300      	movs	r3, #0
 80147f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80147fa:	89a3      	ldrh	r3, [r4, #12]
 80147fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014800:	81a3      	strh	r3, [r4, #12]
 8014802:	2300      	movs	r3, #0
 8014804:	6063      	str	r3, [r4, #4]
 8014806:	6923      	ldr	r3, [r4, #16]
 8014808:	6023      	str	r3, [r4, #0]
 801480a:	89a3      	ldrh	r3, [r4, #12]
 801480c:	f043 0308 	orr.w	r3, r3, #8
 8014810:	81a3      	strh	r3, [r4, #12]
 8014812:	6923      	ldr	r3, [r4, #16]
 8014814:	b94b      	cbnz	r3, 801482a <__swsetup_r+0x7a>
 8014816:	89a3      	ldrh	r3, [r4, #12]
 8014818:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801481c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014820:	d003      	beq.n	801482a <__swsetup_r+0x7a>
 8014822:	4621      	mov	r1, r4
 8014824:	4628      	mov	r0, r5
 8014826:	f000 f883 	bl	8014930 <__smakebuf_r>
 801482a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801482e:	f013 0201 	ands.w	r2, r3, #1
 8014832:	d00a      	beq.n	801484a <__swsetup_r+0x9a>
 8014834:	2200      	movs	r2, #0
 8014836:	60a2      	str	r2, [r4, #8]
 8014838:	6962      	ldr	r2, [r4, #20]
 801483a:	4252      	negs	r2, r2
 801483c:	61a2      	str	r2, [r4, #24]
 801483e:	6922      	ldr	r2, [r4, #16]
 8014840:	b942      	cbnz	r2, 8014854 <__swsetup_r+0xa4>
 8014842:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014846:	d1c5      	bne.n	80147d4 <__swsetup_r+0x24>
 8014848:	bd38      	pop	{r3, r4, r5, pc}
 801484a:	0799      	lsls	r1, r3, #30
 801484c:	bf58      	it	pl
 801484e:	6962      	ldrpl	r2, [r4, #20]
 8014850:	60a2      	str	r2, [r4, #8]
 8014852:	e7f4      	b.n	801483e <__swsetup_r+0x8e>
 8014854:	2000      	movs	r0, #0
 8014856:	e7f7      	b.n	8014848 <__swsetup_r+0x98>
 8014858:	20000044 	.word	0x20000044

0801485c <_raise_r>:
 801485c:	291f      	cmp	r1, #31
 801485e:	b538      	push	{r3, r4, r5, lr}
 8014860:	4605      	mov	r5, r0
 8014862:	460c      	mov	r4, r1
 8014864:	d904      	bls.n	8014870 <_raise_r+0x14>
 8014866:	2316      	movs	r3, #22
 8014868:	6003      	str	r3, [r0, #0]
 801486a:	f04f 30ff 	mov.w	r0, #4294967295
 801486e:	bd38      	pop	{r3, r4, r5, pc}
 8014870:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014872:	b112      	cbz	r2, 801487a <_raise_r+0x1e>
 8014874:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014878:	b94b      	cbnz	r3, 801488e <_raise_r+0x32>
 801487a:	4628      	mov	r0, r5
 801487c:	f000 f830 	bl	80148e0 <_getpid_r>
 8014880:	4622      	mov	r2, r4
 8014882:	4601      	mov	r1, r0
 8014884:	4628      	mov	r0, r5
 8014886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801488a:	f000 b817 	b.w	80148bc <_kill_r>
 801488e:	2b01      	cmp	r3, #1
 8014890:	d00a      	beq.n	80148a8 <_raise_r+0x4c>
 8014892:	1c59      	adds	r1, r3, #1
 8014894:	d103      	bne.n	801489e <_raise_r+0x42>
 8014896:	2316      	movs	r3, #22
 8014898:	6003      	str	r3, [r0, #0]
 801489a:	2001      	movs	r0, #1
 801489c:	e7e7      	b.n	801486e <_raise_r+0x12>
 801489e:	2100      	movs	r1, #0
 80148a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80148a4:	4620      	mov	r0, r4
 80148a6:	4798      	blx	r3
 80148a8:	2000      	movs	r0, #0
 80148aa:	e7e0      	b.n	801486e <_raise_r+0x12>

080148ac <raise>:
 80148ac:	4b02      	ldr	r3, [pc, #8]	@ (80148b8 <raise+0xc>)
 80148ae:	4601      	mov	r1, r0
 80148b0:	6818      	ldr	r0, [r3, #0]
 80148b2:	f7ff bfd3 	b.w	801485c <_raise_r>
 80148b6:	bf00      	nop
 80148b8:	20000044 	.word	0x20000044

080148bc <_kill_r>:
 80148bc:	b538      	push	{r3, r4, r5, lr}
 80148be:	4d07      	ldr	r5, [pc, #28]	@ (80148dc <_kill_r+0x20>)
 80148c0:	2300      	movs	r3, #0
 80148c2:	4604      	mov	r4, r0
 80148c4:	4608      	mov	r0, r1
 80148c6:	4611      	mov	r1, r2
 80148c8:	602b      	str	r3, [r5, #0]
 80148ca:	f7ee fa31 	bl	8002d30 <_kill>
 80148ce:	1c43      	adds	r3, r0, #1
 80148d0:	d102      	bne.n	80148d8 <_kill_r+0x1c>
 80148d2:	682b      	ldr	r3, [r5, #0]
 80148d4:	b103      	cbz	r3, 80148d8 <_kill_r+0x1c>
 80148d6:	6023      	str	r3, [r4, #0]
 80148d8:	bd38      	pop	{r3, r4, r5, pc}
 80148da:	bf00      	nop
 80148dc:	20008f30 	.word	0x20008f30

080148e0 <_getpid_r>:
 80148e0:	f7ee ba1e 	b.w	8002d20 <_getpid>

080148e4 <__swhatbuf_r>:
 80148e4:	b570      	push	{r4, r5, r6, lr}
 80148e6:	460c      	mov	r4, r1
 80148e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148ec:	2900      	cmp	r1, #0
 80148ee:	b096      	sub	sp, #88	@ 0x58
 80148f0:	4615      	mov	r5, r2
 80148f2:	461e      	mov	r6, r3
 80148f4:	da0d      	bge.n	8014912 <__swhatbuf_r+0x2e>
 80148f6:	89a3      	ldrh	r3, [r4, #12]
 80148f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80148fc:	f04f 0100 	mov.w	r1, #0
 8014900:	bf14      	ite	ne
 8014902:	2340      	movne	r3, #64	@ 0x40
 8014904:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014908:	2000      	movs	r0, #0
 801490a:	6031      	str	r1, [r6, #0]
 801490c:	602b      	str	r3, [r5, #0]
 801490e:	b016      	add	sp, #88	@ 0x58
 8014910:	bd70      	pop	{r4, r5, r6, pc}
 8014912:	466a      	mov	r2, sp
 8014914:	f000 f848 	bl	80149a8 <_fstat_r>
 8014918:	2800      	cmp	r0, #0
 801491a:	dbec      	blt.n	80148f6 <__swhatbuf_r+0x12>
 801491c:	9901      	ldr	r1, [sp, #4]
 801491e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014922:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014926:	4259      	negs	r1, r3
 8014928:	4159      	adcs	r1, r3
 801492a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801492e:	e7eb      	b.n	8014908 <__swhatbuf_r+0x24>

08014930 <__smakebuf_r>:
 8014930:	898b      	ldrh	r3, [r1, #12]
 8014932:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014934:	079d      	lsls	r5, r3, #30
 8014936:	4606      	mov	r6, r0
 8014938:	460c      	mov	r4, r1
 801493a:	d507      	bpl.n	801494c <__smakebuf_r+0x1c>
 801493c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014940:	6023      	str	r3, [r4, #0]
 8014942:	6123      	str	r3, [r4, #16]
 8014944:	2301      	movs	r3, #1
 8014946:	6163      	str	r3, [r4, #20]
 8014948:	b003      	add	sp, #12
 801494a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801494c:	ab01      	add	r3, sp, #4
 801494e:	466a      	mov	r2, sp
 8014950:	f7ff ffc8 	bl	80148e4 <__swhatbuf_r>
 8014954:	9f00      	ldr	r7, [sp, #0]
 8014956:	4605      	mov	r5, r0
 8014958:	4639      	mov	r1, r7
 801495a:	4630      	mov	r0, r6
 801495c:	f7fe fecc 	bl	80136f8 <_malloc_r>
 8014960:	b948      	cbnz	r0, 8014976 <__smakebuf_r+0x46>
 8014962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014966:	059a      	lsls	r2, r3, #22
 8014968:	d4ee      	bmi.n	8014948 <__smakebuf_r+0x18>
 801496a:	f023 0303 	bic.w	r3, r3, #3
 801496e:	f043 0302 	orr.w	r3, r3, #2
 8014972:	81a3      	strh	r3, [r4, #12]
 8014974:	e7e2      	b.n	801493c <__smakebuf_r+0xc>
 8014976:	89a3      	ldrh	r3, [r4, #12]
 8014978:	6020      	str	r0, [r4, #0]
 801497a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801497e:	81a3      	strh	r3, [r4, #12]
 8014980:	9b01      	ldr	r3, [sp, #4]
 8014982:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014986:	b15b      	cbz	r3, 80149a0 <__smakebuf_r+0x70>
 8014988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801498c:	4630      	mov	r0, r6
 801498e:	f000 f81d 	bl	80149cc <_isatty_r>
 8014992:	b128      	cbz	r0, 80149a0 <__smakebuf_r+0x70>
 8014994:	89a3      	ldrh	r3, [r4, #12]
 8014996:	f023 0303 	bic.w	r3, r3, #3
 801499a:	f043 0301 	orr.w	r3, r3, #1
 801499e:	81a3      	strh	r3, [r4, #12]
 80149a0:	89a3      	ldrh	r3, [r4, #12]
 80149a2:	431d      	orrs	r5, r3
 80149a4:	81a5      	strh	r5, [r4, #12]
 80149a6:	e7cf      	b.n	8014948 <__smakebuf_r+0x18>

080149a8 <_fstat_r>:
 80149a8:	b538      	push	{r3, r4, r5, lr}
 80149aa:	4d07      	ldr	r5, [pc, #28]	@ (80149c8 <_fstat_r+0x20>)
 80149ac:	2300      	movs	r3, #0
 80149ae:	4604      	mov	r4, r0
 80149b0:	4608      	mov	r0, r1
 80149b2:	4611      	mov	r1, r2
 80149b4:	602b      	str	r3, [r5, #0]
 80149b6:	f7ee fa1b 	bl	8002df0 <_fstat>
 80149ba:	1c43      	adds	r3, r0, #1
 80149bc:	d102      	bne.n	80149c4 <_fstat_r+0x1c>
 80149be:	682b      	ldr	r3, [r5, #0]
 80149c0:	b103      	cbz	r3, 80149c4 <_fstat_r+0x1c>
 80149c2:	6023      	str	r3, [r4, #0]
 80149c4:	bd38      	pop	{r3, r4, r5, pc}
 80149c6:	bf00      	nop
 80149c8:	20008f30 	.word	0x20008f30

080149cc <_isatty_r>:
 80149cc:	b538      	push	{r3, r4, r5, lr}
 80149ce:	4d06      	ldr	r5, [pc, #24]	@ (80149e8 <_isatty_r+0x1c>)
 80149d0:	2300      	movs	r3, #0
 80149d2:	4604      	mov	r4, r0
 80149d4:	4608      	mov	r0, r1
 80149d6:	602b      	str	r3, [r5, #0]
 80149d8:	f7ee fa1a 	bl	8002e10 <_isatty>
 80149dc:	1c43      	adds	r3, r0, #1
 80149de:	d102      	bne.n	80149e6 <_isatty_r+0x1a>
 80149e0:	682b      	ldr	r3, [r5, #0]
 80149e2:	b103      	cbz	r3, 80149e6 <_isatty_r+0x1a>
 80149e4:	6023      	str	r3, [r4, #0]
 80149e6:	bd38      	pop	{r3, r4, r5, pc}
 80149e8:	20008f30 	.word	0x20008f30

080149ec <_init>:
 80149ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ee:	bf00      	nop
 80149f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149f2:	bc08      	pop	{r3}
 80149f4:	469e      	mov	lr, r3
 80149f6:	4770      	bx	lr

080149f8 <_fini>:
 80149f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149fa:	bf00      	nop
 80149fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149fe:	bc08      	pop	{r3}
 8014a00:	469e      	mov	lr, r3
 8014a02:	4770      	bx	lr
